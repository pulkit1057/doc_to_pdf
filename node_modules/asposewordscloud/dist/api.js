"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="api.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordsApi = void 0;
const FormData = require("form-data");
const RSA = require("node-rsa");
const configuration_1 = require("./internal/configuration");
const requestHelper_1 = require("./internal/requestHelper");
const objectSerializer_1 = require("./internal/objectSerializer");
const model = require("./model/model");
__exportStar(require("./model/model"), exports);
__exportStar(require("./model/batchPartRequest"), exports);
/**
 * Library for communicating with the Aspose.Words for Cloud API
 */
class WordsApi {
    /**
     * @param clientId.
     * @param clientSecret.
     * @param baseUrl Base api Url.
     * @param debugMode A value indicating whether debug mode. In debug mode all requests and responses are logged to console.
     */
    constructor(clientId, clientSecret, baseUrl, debugMode) {
        this.configuration = new configuration_1.Configuration(clientId, clientSecret, baseUrl, debugMode);
    }
    /**
     * Encrypt string.
     * @param data to encrypt.
     */
    encrypt(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data)
                return Promise.resolve(data);
            if (!this.encryptor) {
                this.encryptor = new RSA();
                if (this.configuration.modulus && this.configuration.exponent) {
                    this.encryptor.importKey({
                        n: Buffer.from(this.configuration.modulus, "base64"),
                        e: Buffer.from(this.configuration.exponent, "base64")
                    }, 'components-public');
                }
                else {
                    const resultApi = yield this.getPublicKey(new model.GetPublicKeyRequest({}));
                    this.encryptor.importKey({
                        n: Buffer.from(resultApi.body.modulus, "base64"),
                        e: Buffer.from(resultApi.body.exponent, "base64")
                    }, 'components-public');
                }
                this.encryptor.setOptions({
                    encryptionScheme: 'pkcs1'
                });
            }
            return Promise.resolve(this.encryptor.encrypt(Buffer.from(data, 'utf8'), 'base64'));
        });
    }
    /**
     * Accepts all revisions in the document.
     * @param requestObj contains request parameters
     */
    acceptAllRevisions(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling acceptAllRevisions.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Accepts all revisions in the document.
     * @param requestObj contains request parameters
     */
    acceptAllRevisionsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling acceptAllRevisionsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Appends documents to the original document.
     * @param requestObj contains request parameters
     */
    appendDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling appendDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Appends documents to the original document.
     * @param requestObj contains request parameters
     */
    appendDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling appendDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Applies a style to the document node.
     * @param requestObj contains request parameters
     */
    applyStyleToDocumentElement(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling applyStyleToDocumentElement.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Applies a style to the document node.
     * @param requestObj contains request parameters
     */
    applyStyleToDocumentElementOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling applyStyleToDocumentElementOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Executes the report generation process using the specified document template and the external data source in XML, JSON or CSV format.
     * @param requestObj contains request parameters
     */
    buildReport(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling buildReport.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Executes the report generation process online using the specified document template and the external data source in XML, JSON or CSV format.
     * @param requestObj contains request parameters
     */
    buildReportOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling buildReportOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Runs a multi-class text classification for the specified raw text.
     * @param requestObj contains request parameters
     */
    classify(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling classify.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Runs a multi-class text classification for the document.
     * @param requestObj contains request parameters
     */
    classifyDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling classifyDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Runs a multi-class text classification for the document.
     * @param requestObj contains request parameters
     */
    classifyDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling classifyDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Compares two documents.
     * @param requestObj contains request parameters
     */
    compareDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling compareDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Compares two documents.
     * @param requestObj contains request parameters
     */
    compareDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling compareDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Compress and resize images inside the document.
     * The default settings allows to reduce the size of the document without any visible degradation of images quality.
     * @param requestObj contains request parameters
     */
    compressDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling compressDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Compress and resize images inside the document.
     * The default settings allows to reduce the size of the document without any visible degradation of images quality.
     * @param requestObj contains request parameters
     */
    compressDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling compressDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Converts a document on a local drive to the specified format.
     * @param requestObj contains request parameters
     */
    convertDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling convertDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Copy file.
     * @param requestObj contains request parameters
     */
    copyFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling copyFile.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Copy folder.
     * @param requestObj contains request parameters
     */
    copyFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling copyFolder.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Makes a copy of the style in the document.
     * @param requestObj contains request parameters
     */
    copyStyle(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling copyStyle.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Makes a copy of the style in the document.
     * @param requestObj contains request parameters
     */
    copyStyleOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling copyStyleOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Copies styles from the origin document to the target document.
     * @param requestObj contains request parameters
     */
    copyStylesFromTemplate(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling copyStylesFromTemplate.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Creates a new document in cloud storage in the format, determined by the file extension.
     * Supported all save format extensions.
     * @param requestObj contains request parameters
     */
    createDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling createDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Create the folder.
     * @param requestObj contains request parameters
     */
    createFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling createFolder.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Adds a new or updates an existing document property.
     * @param requestObj contains request parameters
     */
    createOrUpdateDocumentProperty(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling createOrUpdateDocumentProperty.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Adds a new or updates an existing document property.
     * @param requestObj contains request parameters
     */
    createOrUpdateDocumentPropertyOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling createOrUpdateDocumentPropertyOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    deleteAllParagraphTabStops(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteAllParagraphTabStops.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    deleteAllParagraphTabStopsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteAllParagraphTabStopsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a bookmark from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmark(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBookmark.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a bookmark from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmarkOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBookmarkOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes all bookmarks from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmarks(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBookmarks.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes all bookmarks from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmarksOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBookmarksOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBorder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBorder.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBorderOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBorderOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes borders from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBorders(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBorders.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes borders from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBordersOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteBordersOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a comment from the document.
     * @param requestObj contains request parameters
     */
    deleteComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteComment.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a comment from the document.
     * @param requestObj contains request parameters
     */
    deleteCommentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteCommentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes all comments from the document.
     * @param requestObj contains request parameters
     */
    deleteComments(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteComments.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes all comments from the document.
     * @param requestObj contains request parameters
     */
    deleteCommentsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteCommentsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlPart(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteCustomXmlPart.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlPartOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteCustomXmlPartOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes all custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlParts(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteCustomXmlParts.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes all custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlPartsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteCustomXmlPartsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a document property.
     * @param requestObj contains request parameters
     */
    deleteDocumentProperty(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteDocumentProperty.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a document property.
     * @param requestObj contains request parameters
     */
    deleteDocumentPropertyOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteDocumentPropertyOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    deleteDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteDrawingObject.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    deleteDrawingObjectOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteDrawingObjectOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a field from the document node.
     * @param requestObj contains request parameters
     */
    deleteField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a field from the document node.
     * @param requestObj contains request parameters
     */
    deleteFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes fields from the document node.
     * @param requestObj contains request parameters
     */
    deleteFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFields.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes fields from the document node.
     * @param requestObj contains request parameters
     */
    deleteFieldsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFieldsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Delete file.
     * @param requestObj contains request parameters
     */
    deleteFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFile.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Delete folder.
     * @param requestObj contains request parameters
     */
    deleteFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFolder.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a footnote from the document node.
     * @param requestObj contains request parameters
     */
    deleteFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFootnote.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a footnote from the document node.
     * @param requestObj contains request parameters
     */
    deleteFootnoteOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFootnoteOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a form field from the document node.
     * @param requestObj contains request parameters
     */
    deleteFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFormField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a form field from the document node.
     * @param requestObj contains request parameters
     */
    deleteFormFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteFormFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeaderFooter(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteHeaderFooter.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeaderFooterOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteHeaderFooterOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeadersFooters(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteHeadersFooters.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeadersFootersOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteHeadersFootersOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes macros from the document.
     * @param requestObj contains request parameters
     */
    deleteMacros(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteMacros.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes macros from the document.
     * @param requestObj contains request parameters
     */
    deleteMacrosOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteMacrosOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteOfficeMathObject.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjectOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteOfficeMathObjectOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes all office math objects from the document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjects(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteOfficeMathObjects.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes all office math objects from the document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjectsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteOfficeMathObjectsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteParagraph.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphListFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteParagraphListFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphListFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteParagraphListFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteParagraphOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a paragraph tab stop from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphTabStop(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteParagraphTabStop.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a paragraph tab stop from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphTabStopOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteParagraphTabStopOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    deleteRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteRun.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    deleteRunOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteRunOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a section from the document.
     * @param requestObj contains request parameters
     */
    deleteSection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteSection.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a section from the document.
     * @param requestObj contains request parameters
     */
    deleteSectionOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteSectionOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    deleteStructuredDocumentTag(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteStructuredDocumentTag.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    deleteStructuredDocumentTagOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteStructuredDocumentTagOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a table from the document node.
     * @param requestObj contains request parameters
     */
    deleteTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteTable.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a cell from the table row.
     * @param requestObj contains request parameters
     */
    deleteTableCell(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteTableCell.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a cell from the table row.
     * @param requestObj contains request parameters
     */
    deleteTableCellOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteTableCellOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a table from the document node.
     * @param requestObj contains request parameters
     */
    deleteTableOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteTableOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a row from the table.
     * @param requestObj contains request parameters
     */
    deleteTableRow(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteTableRow.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Removes a row from the table.
     * @param requestObj contains request parameters
     */
    deleteTableRowOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteTableRowOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a watermark from the document.
     * @param requestObj contains request parameters
     */
    deleteWatermark(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteWatermark.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a watermark from the document.
     * @param requestObj contains request parameters
     */
    deleteWatermarkOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling deleteWatermarkOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Download file.
     * @param requestObj contains request parameters
     */
    downloadFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling downloadFile.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Executes a Mail Merge operation.
     * @param requestObj contains request parameters
     */
    executeMailMerge(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling executeMailMerge.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Executes a Mail Merge operation online.
     * @param requestObj contains request parameters
     */
    executeMailMergeOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling executeMailMergeOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Get all information about revisions.
     * @param requestObj contains request parameters
     */
    getAllRevisions(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getAllRevisions.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Get all information about revisions.
     * @param requestObj contains request parameters
     */
    getAllRevisionsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getAllRevisionsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads available fonts from the document.
     * @param requestObj contains request parameters
     */
    getAvailableFonts(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getAvailableFonts.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a bookmark, specified by name, from the document.
     * @param requestObj contains request parameters
     */
    getBookmarkByName(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBookmarkByName.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a bookmark, specified by name, from the document.
     * @param requestObj contains request parameters
     */
    getBookmarkByNameOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBookmarkByNameOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads bookmarks from the document.
     * @param requestObj contains request parameters
     */
    getBookmarks(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBookmarks.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads bookmarks from the document.
     * @param requestObj contains request parameters
     */
    getBookmarksOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBookmarksOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    getBorder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBorder.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    getBorderOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBorderOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads borders from the document node.
     * @param requestObj contains request parameters
     */
    getBorders(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBorders.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads borders from the document node.
     * @param requestObj contains request parameters
     */
    getBordersOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getBordersOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a comment from the document.
     * @param requestObj contains request parameters
     */
    getComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getComment.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a comment from the document.
     * @param requestObj contains request parameters
     */
    getCommentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getCommentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads comments from the document.
     * @param requestObj contains request parameters
     */
    getComments(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getComments.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads comments from the document.
     * @param requestObj contains request parameters
     */
    getCommentsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getCommentsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlPart(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getCustomXmlPart.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlPartOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getCustomXmlPartOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlParts(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getCustomXmlParts.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlPartsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getCustomXmlPartsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads common information from the document.
     * @param requestObj contains request parameters
     */
    getDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndex(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjectByIndex.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndexOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjectByIndexOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads image data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageData(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjectImageData.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads image data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageDataOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjectImageDataOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleData(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjectOleData.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleDataOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjectOleDataOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads DrawingObjects from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjects(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjects.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads DrawingObjects from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentDrawingObjectsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads merge field names from the document.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNames(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentFieldNames.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads merge field names from the document.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNamesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentFieldNamesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a hyperlink from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinkByIndex(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentHyperlinkByIndex.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a hyperlink from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinkByIndexOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentHyperlinkByIndexOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads hyperlinks from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinks(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentHyperlinks.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads hyperlinks from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinksOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentHyperlinksOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document properties.
     * @param requestObj contains request parameters
     */
    getDocumentProperties(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentProperties.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document properties.
     * @param requestObj contains request parameters
     */
    getDocumentPropertiesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentPropertiesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a document property.
     * @param requestObj contains request parameters
     */
    getDocumentProperty(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentProperty.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a document property.
     * @param requestObj contains request parameters
     */
    getDocumentPropertyOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentPropertyOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads protection properties from the document.
     * @param requestObj contains request parameters
     */
    getDocumentProtection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentProtection.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads protection properties from the document.
     * @param requestObj contains request parameters
     */
    getDocumentProtectionOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentProtectionOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document statistics.
     * @param requestObj contains request parameters
     */
    getDocumentStatistics(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentStatistics.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads document statistics.
     * @param requestObj contains request parameters
     */
    getDocumentStatisticsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentStatisticsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Converts a document in cloud storage to the specified format.
     * @param requestObj contains request parameters
     */
    getDocumentWithFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getDocumentWithFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a field from the document node.
     * @param requestObj contains request parameters
     */
    getField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a field from the document node.
     * @param requestObj contains request parameters
     */
    getFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads fields from the document node.
     * @param requestObj contains request parameters
     */
    getFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFields.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads fields from the document node.
     * @param requestObj contains request parameters
     */
    getFieldsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFieldsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Get all files and folders within a folder.
     * @param requestObj contains request parameters
     */
    getFilesList(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFilesList.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a footnote from the document node.
     * @param requestObj contains request parameters
     */
    getFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFootnote.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a footnote from the document node.
     * @param requestObj contains request parameters
     */
    getFootnoteOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFootnoteOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads footnotes from the document node.
     * @param requestObj contains request parameters
     */
    getFootnotes(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFootnotes.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads footnotes from the document node.
     * @param requestObj contains request parameters
     */
    getFootnotesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFootnotesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a form field from the document node.
     * @param requestObj contains request parameters
     */
    getFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFormField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a form field from the document node.
     * @param requestObj contains request parameters
     */
    getFormFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFormFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads form fields from the document node.
     * @param requestObj contains request parameters
     */
    getFormFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFormFields.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads form fields from the document node.
     * @param requestObj contains request parameters
     */
    getFormFieldsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getFormFieldsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a HeaderFooter object from the document.
     * @param requestObj contains request parameters
     */
    getHeaderFooter(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getHeaderFooter.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOfSection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getHeaderFooterOfSection.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOfSectionOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getHeaderFooterOfSectionOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a HeaderFooter object from the document.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getHeaderFooterOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooters(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getHeaderFooters.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFootersOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getHeaderFootersOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Returns application info.
     * @param requestObj contains request parameters
     */
    getInfo(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getInfo.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a list from the document.
     * @param requestObj contains request parameters
     */
    getList(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getList.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a list from the document.
     * @param requestObj contains request parameters
     */
    getListOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getListOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads lists from the document.
     * @param requestObj contains request parameters
     */
    getLists(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getLists.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads lists from the document.
     * @param requestObj contains request parameters
     */
    getListsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getListsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getOfficeMathObject.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getOfficeMathObjectOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads OfficeMath objects from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjects(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getOfficeMathObjects.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads OfficeMath objects from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getOfficeMathObjectsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraph.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphListFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphListFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphListFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphListFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads paragraphs from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphs(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphs.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads paragraphs from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphTabStops(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphTabStops.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphTabStopsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getParagraphTabStopsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Get assymetric public key.
     * @param requestObj contains request parameters
     */
    getPublicKey(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getPublicKey.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads range text from the document.
     * @param requestObj contains request parameters
     */
    getRangeText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRangeText.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads range text from the document.
     * @param requestObj contains request parameters
     */
    getRangeTextOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRangeTextOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRun.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunFont(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRunFont.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunFontOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRunFontOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRunOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads Run objects from the paragraph.
     * @param requestObj contains request parameters
     */
    getRuns(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRuns.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads Run objects from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getRunsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a section from the document.
     * @param requestObj contains request parameters
     */
    getSection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSection.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a section from the document.
     * @param requestObj contains request parameters
     */
    getSectionOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSectionOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the page setup of a section from the document.
     * @param requestObj contains request parameters
     */
    getSectionPageSetup(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSectionPageSetup.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the page setup of a section from the document.
     * @param requestObj contains request parameters
     */
    getSectionPageSetupOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSectionPageSetupOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads sections from the document.
     * @param requestObj contains request parameters
     */
    getSections(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSections.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads sections from the document.
     * @param requestObj contains request parameters
     */
    getSectionsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSectionsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Gets signatures from the document.
     * @param requestObj contains request parameters
     */
    getSignatures(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSignatures.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Gets signatures from the document.
     * @param requestObj contains request parameters
     */
    getSignaturesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getSignaturesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTag(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStructuredDocumentTag.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTagOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStructuredDocumentTagOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads StructuredDocumentTags (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTags(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStructuredDocumentTags.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads StructuredDocumentTags (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTagsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStructuredDocumentTagsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a style from the document.
     * @param requestObj contains request parameters
     */
    getStyle(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStyle.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a style from the document node.
     * @param requestObj contains request parameters
     */
    getStyleFromDocumentElement(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStyleFromDocumentElement.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a style from the document node.
     * @param requestObj contains request parameters
     */
    getStyleFromDocumentElementOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStyleFromDocumentElementOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a style from the document.
     * @param requestObj contains request parameters
     */
    getStyleOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStyleOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads styles from the document.
     * @param requestObj contains request parameters
     */
    getStyles(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStyles.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads styles from the document.
     * @param requestObj contains request parameters
     */
    getStylesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getStylesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a table from the document node.
     * @param requestObj contains request parameters
     */
    getTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTable.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a cell from the table row.
     * @param requestObj contains request parameters
     */
    getTableCell(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableCell.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a table cell.
     * @param requestObj contains request parameters
     */
    getTableCellFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableCellFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a table cell.
     * @param requestObj contains request parameters
     */
    getTableCellFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableCellFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a cell from the table row.
     * @param requestObj contains request parameters
     */
    getTableCellOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableCellOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a table from the document node.
     * @param requestObj contains request parameters
     */
    getTableOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads properties of a table from the document node.
     * @param requestObj contains request parameters
     */
    getTableProperties(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableProperties.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads properties of a table from the document node.
     * @param requestObj contains request parameters
     */
    getTablePropertiesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTablePropertiesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a row from the table.
     * @param requestObj contains request parameters
     */
    getTableRow(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableRow.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    getTableRowFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableRowFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    getTableRowFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableRowFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads a row from the table.
     * @param requestObj contains request parameters
     */
    getTableRowOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTableRowOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads tables from the document node.
     * @param requestObj contains request parameters
     */
    getTables(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTables.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reads tables from the document node.
     * @param requestObj contains request parameters
     */
    getTablesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling getTablesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new bookmark to the document.
     * @param requestObj contains request parameters
     */
    insertBookmark(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertBookmark.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new bookmark to the document.
     * @param requestObj contains request parameters
     */
    insertBookmarkOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertBookmarkOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new comment to the document.
     * @param requestObj contains request parameters
     */
    insertComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertComment.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new comment to the document.
     * @param requestObj contains request parameters
     */
    insertCommentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertCommentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new custom xml part to the document.
     * @param requestObj contains request parameters
     */
    insertCustomXmlPart(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertCustomXmlPart.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new custom xml part to the document.
     * @param requestObj contains request parameters
     */
    insertCustomXmlPartOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertCustomXmlPartOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new DrawingObject to the document node.
     * @param requestObj contains request parameters
     */
    insertDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertDrawingObject.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new DrawingObject to the document node.
     * @param requestObj contains request parameters
     */
    insertDrawingObjectOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertDrawingObjectOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new field to the document node.
     * @param requestObj contains request parameters
     */
    insertField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new field to the document node.
     * @param requestObj contains request parameters
     */
    insertFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new footnote to the document node.
     * @param requestObj contains request parameters
     */
    insertFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertFootnote.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new footnote to the document node.
     * @param requestObj contains request parameters
     */
    insertFootnoteOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertFootnoteOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new form field to the document node.
     * @param requestObj contains request parameters
     */
    insertFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertFormField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new form field to the document node.
     * @param requestObj contains request parameters
     */
    insertFormFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertFormFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param requestObj contains request parameters
     */
    insertHeaderFooter(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertHeaderFooter.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param requestObj contains request parameters
     */
    insertHeaderFooterOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertHeaderFooterOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new list to the document.
     * @param requestObj contains request parameters
     */
    insertList(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertList.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new list to the document.
     * @param requestObj contains request parameters
     */
    insertListOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertListOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param requestObj contains request parameters
     */
    insertOrUpdateParagraphTabStop(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertOrUpdateParagraphTabStop.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param requestObj contains request parameters
     */
    insertOrUpdateParagraphTabStopOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertOrUpdateParagraphTabStopOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts page numbers to the document.
     * @param requestObj contains request parameters
     */
    insertPageNumbers(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertPageNumbers.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts page numbers to the document.
     * @param requestObj contains request parameters
     */
    insertPageNumbersOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertPageNumbersOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new paragraph to the document node.
     * @param requestObj contains request parameters
     */
    insertParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertParagraph.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new paragraph to the document node.
     * @param requestObj contains request parameters
     */
    insertParagraphOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertParagraphOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new Run object to the paragraph.
     * @param requestObj contains request parameters
     */
    insertRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertRun.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new Run object to the paragraph.
     * @param requestObj contains request parameters
     */
    insertRunOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertRunOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a section to the document.
     * @param requestObj contains request parameters
     */
    insertSection(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertSection.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Inserts a section to the document.
     * @param requestObj contains request parameters
     */
    insertSectionOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertSectionOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new StructuredDocumentTag (SDT) to the document node.
     * @param requestObj contains request parameters
     */
    insertStructuredDocumentTag(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertStructuredDocumentTag.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new StructuredDocumentTag (SDT) to the document node.
     * @param requestObj contains request parameters
     */
    insertStructuredDocumentTagOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertStructuredDocumentTagOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new style to the document.
     * @param requestObj contains request parameters
     */
    insertStyle(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertStyle.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new style to the document.
     * @param requestObj contains request parameters
     */
    insertStyleOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertStyleOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new table to the document node.
     * @param requestObj contains request parameters
     */
    insertTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertTable.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new cell to the table row.
     * @param requestObj contains request parameters
     */
    insertTableCell(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertTableCell.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new cell to the table row.
     * @param requestObj contains request parameters
     */
    insertTableCellOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertTableCellOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new table to the document node.
     * @param requestObj contains request parameters
     */
    insertTableOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertTableOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new row to the table.
     * @param requestObj contains request parameters
     */
    insertTableRow(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertTableRow.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new row to the table.
     * @param requestObj contains request parameters
     */
    insertTableRowOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertTableRowOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Insert a watermark to the document.
     * @param requestObj contains request parameters
     */
    insertWatermark(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertWatermark.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new watermark image to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkImage(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertWatermarkImage.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new watermark image to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkImageOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertWatermarkImageOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Insert a watermark to the document.
     * @param requestObj contains request parameters
     */
    insertWatermarkOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertWatermarkOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new watermark text to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertWatermarkText.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Inserts a new watermark text to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkTextOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling insertWatermarkTextOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Links headers / footers of the section to the previous one.
     * @param requestObj contains request parameters
     */
    linkHeaderFootersToPrevious(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling linkHeaderFootersToPrevious.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Downloads a document from the Web using URL and saves it to cloud storage in the specified format.
     * @param requestObj contains request parameters
     */
    loadWebDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling loadWebDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Merge the section with the next one.
     * @param requestObj contains request parameters
     */
    mergeWithNext(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling mergeWithNext.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Merge the section with the next one.
     * @param requestObj contains request parameters
     */
    mergeWithNextOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling mergeWithNextOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Move file.
     * @param requestObj contains request parameters
     */
    moveFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling moveFile.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Move folder.
     * @param requestObj contains request parameters
     */
    moveFolder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling moveFolder.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param requestObj contains request parameters
     */
    optimizeDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling optimizeDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param requestObj contains request parameters
     */
    optimizeDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling optimizeDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Changes the document protection. The previous protection will be overwritten if it exist.
     * @param requestObj contains request parameters
     */
    protectDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling protectDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Changes the document protection. The previous protection will be overwritten if it exist.
     * @param requestObj contains request parameters
     */
    protectDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling protectDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Rejects all revisions in the document.
     * @param requestObj contains request parameters
     */
    rejectAllRevisions(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling rejectAllRevisions.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Rejects all revisions in the document.
     * @param requestObj contains request parameters
     */
    rejectAllRevisionsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling rejectAllRevisionsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes all signatures of the document.
     * @param requestObj contains request parameters
     */
    removeAllSignatures(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling removeAllSignatures.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes all signatures of the document.
     * @param requestObj contains request parameters
     */
    removeAllSignaturesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling removeAllSignaturesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a range from the document.
     * @param requestObj contains request parameters
     */
    removeRange(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling removeRange.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes a range from the document.
     * @param requestObj contains request parameters
     */
    removeRangeOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling removeRangeOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a DrawingObject to the specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderDrawingObject.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a DrawingObject to the specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObjectOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderDrawingObjectOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders an OfficeMath object to the specified format.
     * @param requestObj contains request parameters
     */
    renderMathObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderMathObject.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders an OfficeMath object to the specified format.
     * @param requestObj contains request parameters
     */
    renderMathObjectOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderMathObjectOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a page to the specified format.
     * @param requestObj contains request parameters
     */
    renderPage(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderPage.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a page to the specified format.
     * @param requestObj contains request parameters
     */
    renderPageOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderPageOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a paragraph to the specified format.
     * @param requestObj contains request parameters
     */
    renderParagraph(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderParagraph.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a paragraph to the specified format.
     * @param requestObj contains request parameters
     */
    renderParagraphOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderParagraphOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a table to the specified format.
     * @param requestObj contains request parameters
     */
    renderTable(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderTable.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Renders a table to the specified format.
     * @param requestObj contains request parameters
     */
    renderTableOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling renderTableOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Replaces text in the document.
     * @param requestObj contains request parameters
     */
    replaceText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling replaceText.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Replaces text in the document.
     * @param requestObj contains request parameters
     */
    replaceTextOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling replaceTextOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Replaces a range with text in the document.
     * @param requestObj contains request parameters
     */
    replaceWithText(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling replaceWithText.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Replaces a range with text in the document.
     * @param requestObj contains request parameters
     */
    replaceWithTextOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling replaceWithTextOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Clears the font cache.
     * @param requestObj contains request parameters
     */
    resetCache(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling resetCache.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            return Promise.resolve(response);
        });
    }
    /**
     * Converts a document in cloud storage to the specified format.
     * @param requestObj contains request parameters
     */
    saveAs(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling saveAs.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Converts a document in cloud storage to the specified format.
     * @param requestObj contains request parameters
     */
    saveAsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling saveAsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Saves a range as a new document.
     * @param requestObj contains request parameters
     */
    saveAsRange(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling saveAsRange.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Saves a range as a new document.
     * @param requestObj contains request parameters
     */
    saveAsRangeOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling saveAsRangeOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @deprecated This operation will be removed in the future.
     * @param requestObj contains request parameters
     */
    saveAsTiff(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling saveAsTiff.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @deprecated This operation will be removed in the future.
     * @param requestObj contains request parameters
     */
    saveAsTiffOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling saveAsTiffOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Searches text, specified by the regular expression, in the document.
     * @param requestObj contains request parameters
     */
    search(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling search.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Searches text, specified by the regular expression, in the document.
     * @param requestObj contains request parameters
     */
    searchOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling searchOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Signs the document with given certificate.
     * @param requestObj contains request parameters
     */
    signDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling signDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Signs the document with given certificate.
     * @param requestObj contains request parameters
     */
    signDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling signDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Splits a document into parts and saves them in the specified format.
     * @param requestObj contains request parameters
     */
    splitDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling splitDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Splits a document into parts and saves them in the specified format.
     * @param requestObj contains request parameters
     */
    splitDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling splitDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Translate a node id to a node path.
     * @param requestObj contains request parameters
     */
    translateNodeId(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling translateNodeId.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Translate a node id to a node path.
     * @param requestObj contains request parameters
     */
    translateNodeIdOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling translateNodeIdOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes protection from the document.
     * @param requestObj contains request parameters
     */
    unprotectDocument(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling unprotectDocument.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Removes protection from the document.
     * @param requestObj contains request parameters
     */
    unprotectDocumentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling unprotectDocumentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a bookmark in the document.
     * @param requestObj contains request parameters
     */
    updateBookmark(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateBookmark.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a bookmark in the document.
     * @param requestObj contains request parameters
     */
    updateBookmarkOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateBookmarkOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a border in the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    updateBorder(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateBorder.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a border in the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    updateBorderOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateBorderOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a comment in the document.
     * @param requestObj contains request parameters
     */
    updateComment(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateComment.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a comment in the document.
     * @param requestObj contains request parameters
     */
    updateCommentOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateCommentOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the custom xml part in the document.
     * @param requestObj contains request parameters
     */
    updateCustomXmlPart(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateCustomXmlPart.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the custom xml part in the document.
     * @param requestObj contains request parameters
     */
    updateCustomXmlPartOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateCustomXmlPartOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a DrawingObject in the document node.
     * @param requestObj contains request parameters
     */
    updateDrawingObject(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateDrawingObject.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a DrawingObject in the document node.
     * @param requestObj contains request parameters
     */
    updateDrawingObjectOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateDrawingObjectOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a field in the document node.
     * @param requestObj contains request parameters
     */
    updateField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a field in the document node.
     * @param requestObj contains request parameters
     */
    updateFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reevaluates field values in the document.
     * @param requestObj contains request parameters
     */
    updateFields(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateFields.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Reevaluates field values in the document.
     * @param requestObj contains request parameters
     */
    updateFieldsOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateFieldsOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a footnote in the document node.
     * @param requestObj contains request parameters
     */
    updateFootnote(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateFootnote.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a footnote in the document node.
     * @param requestObj contains request parameters
     */
    updateFootnoteOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateFootnoteOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a form field in the document node.
     * @param requestObj contains request parameters
     */
    updateFormField(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateFormField.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a form field in the document node.
     * @param requestObj contains request parameters
     */
    updateFormFieldOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateFormFieldOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a list in the document.
     * @param requestObj contains request parameters
     */
    updateList(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateList.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the level of a List element in the document.
     * @param requestObj contains request parameters
     */
    updateListLevel(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateListLevel.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the level of a List element in the document.
     * @param requestObj contains request parameters
     */
    updateListLevelOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateListLevelOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a list in the document.
     * @param requestObj contains request parameters
     */
    updateListOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateListOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateParagraphFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateParagraphFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphListFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateParagraphListFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphListFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateParagraphListFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRun(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateRun.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRunFont(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateRunFont.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRunFontOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateRunFontOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRunOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateRunOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the page setup of a section in the document.
     * @param requestObj contains request parameters
     */
    updateSectionPageSetup(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateSectionPageSetup.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the page setup of a section in the document.
     * @param requestObj contains request parameters
     */
    updateSectionPageSetupOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateSectionPageSetupOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a StructuredDocumentTag (SDT) in the document node.
     * @param requestObj contains request parameters
     */
    updateStructuredDocumentTag(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateStructuredDocumentTag.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a StructuredDocumentTag (SDT) in the document node.
     * @param requestObj contains request parameters
     */
    updateStructuredDocumentTagOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateStructuredDocumentTagOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a style in the document.
     * @param requestObj contains request parameters
     */
    updateStyle(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateStyle.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates a style in the document.
     * @param requestObj contains request parameters
     */
    updateStyleOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateStyleOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a cell in the table row.
     * @param requestObj contains request parameters
     */
    updateTableCellFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateTableCellFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a cell in the table row.
     * @param requestObj contains request parameters
     */
    updateTableCellFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateTableCellFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates properties of a table in the document node.
     * @param requestObj contains request parameters
     */
    updateTableProperties(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateTableProperties.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates properties of a table in the document node.
     * @param requestObj contains request parameters
     */
    updateTablePropertiesOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateTablePropertiesOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    updateTableRowFormat(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateTableRowFormat.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Updates the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    updateTableRowFormatOnline(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling updateTableRowFormatOnline.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Upload file.
     * @param requestObj contains request parameters
     */
    uploadFile(requestObj) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestObj === null || requestObj === undefined) {
                throw new Error('Required parameter "request" was null or undefined when calling uploadFile.');
            }
            const requestOptions = yield requestObj.createRequestOptions(this.configuration, this);
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            const result = new model.WordsIncomingMessage();
            result.response = response;
            result.body = requestObj.createResponse(response.body, response.headers);
            return Promise.resolve(result);
        });
    }
    /**
     * Batch request.
     * @param requests contains requests parameters
     */
    batch(...requests) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._batchInternal(true, ...requests);
        });
    }
    /**
     * Batch request withoit returning of intermediate results.
     * @param requests contains requests parameters
     */
    batchWithoutIntermediateResults(...requests) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._batchInternal(false, ...requests);
        });
    }
    /**
     * Batch request.
     * @param displayIntermediateResults display intermediate results or not
     * @param requests contains requests parameters
     */
    _batchInternal(displayIntermediateResults = true, ...requests) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requests === null || requests.length === 0) {
                throw new Error('Required parameter "requests" was null or empty.');
            }
            // create [id, request] map
            const requestMap = requests.reduce(function (map, obj) {
                map[obj.id] = obj;
                return map;
            }, {});
            let url = this.configuration.getApiBaseUrl() + "/words/batch";
            if (!displayIntermediateResults) {
                url += '?displayIntermediateResults=false';
            }
            // create a batch request
            const requestOptions = {
                method: "PUT",
                uri: url,
                headers: {
                    "Content-Type": "multipart/mixed",
                },
            };
            const querystring = require('querystring');
            const requestParts = [];
            const readStream = function (stream) {
                var _a, stream_1, stream_1_1;
                var _b, e_1, _c, _d;
                return __awaiter(this, void 0, void 0, function* () {
                    const chunks = [];
                    try {
                        for (_a = true, stream_1 = __asyncValues(stream); stream_1_1 = yield stream_1.next(), _b = stream_1_1.done, !_b;) {
                            _d = stream_1_1.value;
                            _a = false;
                            try {
                                const x = _d;
                                chunks.push(x);
                            }
                            finally {
                                _a = true;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (!_a && !_b && (_c = stream_1.return)) yield _c.call(stream_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (chunks.length > 0 && typeof (chunks[0]) === 'number') {
                        return Buffer.from(chunks);
                    }
                    else {
                        return Buffer.concat(chunks);
                    }
                });
            };
            for (const requestObj of requests) {
                const options = yield requestObj.createRequestOptions(this.configuration, this);
                let bodyString = options.method + " " + options.uri.toString().replace(this.configuration.getApiBaseUrl() + "/words/", "") + (Object.keys(options.qs).length ? '?' + querystring.stringify(options.qs) : "") + "\r\n";
                if (options.formData == null) {
                    if (options.headers != null && options.headers['Content-Type'] != null) {
                        bodyString += "Content-Type: " + options.headers['Content-Type'] + "\r\n";
                    }
                    bodyString += "RequestId: " + requestObj.id + "\r\n";
                    if (requestObj.parentId) {
                        bodyString += "DependsOn: " + requestObj.parentId + "\r\n";
                    }
                    bodyString += "\r\n";
                    var bodyBuffer = null;
                    if (options.body != null) {
                        if (typeof options.body === 'string' || options.body instanceof String) {
                            bodyBuffer = Buffer.from(options.body);
                        }
                        else {
                            bodyBuffer = yield readStream(options.body);
                        }
                    }
                    else {
                        bodyBuffer = Buffer.from('');
                    }
                    const textPart = {
                        'Content-Type': 'application/http; msgtype=request',
                        'Content-Disposition': 'form-data',
                        body: Buffer.concat([Buffer.from(bodyString), bodyBuffer]),
                    };
                    requestParts.push(textPart);
                }
                else {
                    const formData = options.formData;
                    const requestForm = new FormData();
                    const appendFormValue = function (key, value) {
                        return __awaiter(this, void 0, void 0, function* () {
                            if (value instanceof require("stream").Readable) {
                                try {
                                    value = {
                                        value: yield readStream(value),
                                        options: {
                                            filename: key
                                        }
                                    };
                                }
                                catch (error) {
                                    throw error;
                                }
                            }
                            if (value && value.hasOwnProperty('value') && value.hasOwnProperty('options')) {
                                requestForm.append(key, value.value, value.options);
                            }
                            else {
                                requestForm.append(key, value);
                            }
                        });
                    };
                    for (const formKey in formData) {
                        if (formData.hasOwnProperty(formKey)) {
                            const formValue = formData[formKey];
                            if (formValue instanceof Array) {
                                for (const formValueElement of formValue) {
                                    yield appendFormValue(formKey, formValueElement);
                                }
                            }
                            else {
                                yield appendFormValue(formKey, formValue);
                            }
                        }
                    }
                    bodyString += "Content-Type: " + requestForm.getHeaders()["content-type"] + "\r\n";
                    bodyString += "RequestId: " + requestObj.id + "\r\n";
                    if (requestObj.parentId) {
                        bodyString += "DependsOn: " + requestObj.parentId + "\r\n";
                    }
                    bodyString += "\r\n";
                    const formPart = {
                        'Content-Type': 'application/http; msgtype=request',
                        'Content-Disposition': 'form-data',
                        body: Buffer.concat([Buffer.from(bodyString), requestForm.getBuffer()]),
                    };
                    requestParts.push(formPart);
                }
            }
            requestOptions.multipart = requestParts;
            requestOptions.encoding = null;
            const response = yield (0, requestHelper_1.invokeApiMethod)(requestOptions, this.configuration);
            // parse the response
            const responseParts = (0, requestHelper_1.parseBatchParts)(response.body, (0, requestHelper_1.getBoundary)(response.headers), true);
            const data = new Array();
            for (const responsePart of responseParts) {
                if (responsePart.code < 200 && responsePart.code > 299) {
                    const bodyContent = JSON.parse(response.body);
                    data.push(objectSerializer_1.ObjectSerializer.deserialize(bodyContent, "WordsApiErrorResponse"));
                }
                else {
                    if (responsePart.body != null) {
                        /* tslint:disable-next-line:no-string-literal */
                        const id = responsePart.headers["requestid"];
                        if (parseInt(responsePart.headers["content-length"], 10) === 0) {
                            data.push(null);
                            continue;
                        }
                        data.push(requestMap[id].createResponse(responsePart.body, responsePart.headers));
                    }
                }
            }
            const result = { response, body: data };
            return Promise.resolve(result);
        });
    }
}
exports.WordsApi = WordsApi;
