/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import http = require("http");
import { Configuration } from "./internal/configuration";
import * as model from "./model/model";
import { BatchPartRequest } from "./model/batchPartRequest";
export * from "./model/model";
export * from "./model/batchPartRequest";
/**
 * encryptor interface
 */
export interface Encryptor {
    /**
     * Encrypt string.
     * @param data to encrypt.
     */
    encrypt(data: string): Promise<string>;
}
/**
 * Library for communicating with the Aspose.Words for Cloud API
 */
export declare class WordsApi implements Encryptor {
    /**
     * API configuration
     */
    configuration: Configuration;
    private encryptor;
    /**
     * @param clientId.
     * @param clientSecret.
     * @param baseUrl Base api Url.
     * @param debugMode A value indicating whether debug mode. In debug mode all requests and responses are logged to console.
     */
    constructor(clientId: string, clientSecret: string, baseUrl?: string, debugMode?: boolean);
    /**
     * Encrypt string.
     * @param data to encrypt.
     */
    encrypt(data: string): Promise<string>;
    /**
     * Accepts all revisions in the document.
     * @param requestObj contains request parameters
     */
    acceptAllRevisions(requestObj: model.AcceptAllRevisionsRequest): Promise<model.WordsIncomingMessage<model.RevisionsModificationResponse>>;
    /**
     * Accepts all revisions in the document.
     * @param requestObj contains request parameters
     */
    acceptAllRevisionsOnline(requestObj: model.AcceptAllRevisionsOnlineRequest): Promise<model.WordsIncomingMessage<model.AcceptAllRevisionsOnlineResponse>>;
    /**
     * Appends documents to the original document.
     * @param requestObj contains request parameters
     */
    appendDocument(requestObj: model.AppendDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Appends documents to the original document.
     * @param requestObj contains request parameters
     */
    appendDocumentOnline(requestObj: model.AppendDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.AppendDocumentOnlineResponse>>;
    /**
     * Applies a style to the document node.
     * @param requestObj contains request parameters
     */
    applyStyleToDocumentElement(requestObj: model.ApplyStyleToDocumentElementRequest): Promise<model.WordsIncomingMessage<model.WordsResponse>>;
    /**
     * Applies a style to the document node.
     * @param requestObj contains request parameters
     */
    applyStyleToDocumentElementOnline(requestObj: model.ApplyStyleToDocumentElementOnlineRequest): Promise<model.WordsIncomingMessage<model.ApplyStyleToDocumentElementOnlineResponse>>;
    /**
     * Executes the report generation process using the specified document template and the external data source in XML, JSON or CSV format.
     * @param requestObj contains request parameters
     */
    buildReport(requestObj: model.BuildReportRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Executes the report generation process online using the specified document template and the external data source in XML, JSON or CSV format.
     * @param requestObj contains request parameters
     */
    buildReportOnline(requestObj: model.BuildReportOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Runs a multi-class text classification for the specified raw text.
     * @param requestObj contains request parameters
     */
    classify(requestObj: model.ClassifyRequest): Promise<model.WordsIncomingMessage<model.ClassificationResponse>>;
    /**
     * Runs a multi-class text classification for the document.
     * @param requestObj contains request parameters
     */
    classifyDocument(requestObj: model.ClassifyDocumentRequest): Promise<model.WordsIncomingMessage<model.ClassificationResponse>>;
    /**
     * Runs a multi-class text classification for the document.
     * @param requestObj contains request parameters
     */
    classifyDocumentOnline(requestObj: model.ClassifyDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.ClassificationResponse>>;
    /**
     * Compares two documents.
     * @param requestObj contains request parameters
     */
    compareDocument(requestObj: model.CompareDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Compares two documents.
     * @param requestObj contains request parameters
     */
    compareDocumentOnline(requestObj: model.CompareDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.CompareDocumentOnlineResponse>>;
    /**
     * Compress and resize images inside the document.
     * The default settings allows to reduce the size of the document without any visible degradation of images quality.
     * @param requestObj contains request parameters
     */
    compressDocument(requestObj: model.CompressDocumentRequest): Promise<model.WordsIncomingMessage<model.CompressResponse>>;
    /**
     * Compress and resize images inside the document.
     * The default settings allows to reduce the size of the document without any visible degradation of images quality.
     * @param requestObj contains request parameters
     */
    compressDocumentOnline(requestObj: model.CompressDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.CompressDocumentOnlineResponse>>;
    /**
     * Converts a document on a local drive to the specified format.
     * @param requestObj contains request parameters
     */
    convertDocument(requestObj: model.ConvertDocumentRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Copy file.
     * @param requestObj contains request parameters
     */
    copyFile(requestObj: model.CopyFileRequest): Promise<http.IncomingMessage>;
    /**
     * Copy folder.
     * @param requestObj contains request parameters
     */
    copyFolder(requestObj: model.CopyFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Makes a copy of the style in the document.
     * @param requestObj contains request parameters
     */
    copyStyle(requestObj: model.CopyStyleRequest): Promise<model.WordsIncomingMessage<model.StyleResponse>>;
    /**
     * Makes a copy of the style in the document.
     * @param requestObj contains request parameters
     */
    copyStyleOnline(requestObj: model.CopyStyleOnlineRequest): Promise<model.WordsIncomingMessage<model.CopyStyleOnlineResponse>>;
    /**
     * Copies styles from the origin document to the target document.
     * @param requestObj contains request parameters
     */
    copyStylesFromTemplate(requestObj: model.CopyStylesFromTemplateRequest): Promise<model.WordsIncomingMessage<model.WordsResponse>>;
    /**
     * Creates a new document in cloud storage in the format, determined by the file extension.
     * Supported all save format extensions.
     * @param requestObj contains request parameters
     */
    createDocument(requestObj: model.CreateDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Create the folder.
     * @param requestObj contains request parameters
     */
    createFolder(requestObj: model.CreateFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Adds a new or updates an existing document property.
     * @param requestObj contains request parameters
     */
    createOrUpdateDocumentProperty(requestObj: model.CreateOrUpdateDocumentPropertyRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertyResponse>>;
    /**
     * Adds a new or updates an existing document property.
     * @param requestObj contains request parameters
     */
    createOrUpdateDocumentPropertyOnline(requestObj: model.CreateOrUpdateDocumentPropertyOnlineRequest): Promise<model.WordsIncomingMessage<model.CreateOrUpdateDocumentPropertyOnlineResponse>>;
    /**
     * Removes paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    deleteAllParagraphTabStops(requestObj: model.DeleteAllParagraphTabStopsRequest): Promise<model.WordsIncomingMessage<model.TabStopsResponse>>;
    /**
     * Removes paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    deleteAllParagraphTabStopsOnline(requestObj: model.DeleteAllParagraphTabStopsOnlineRequest): Promise<model.WordsIncomingMessage<model.DeleteAllParagraphTabStopsOnlineResponse>>;
    /**
     * Removes a bookmark from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmark(requestObj: model.DeleteBookmarkRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a bookmark from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmarkOnline(requestObj: model.DeleteBookmarkOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes all bookmarks from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmarks(requestObj: model.DeleteBookmarksRequest): Promise<http.IncomingMessage>;
    /**
     * Removes all bookmarks from the document.
     * @param requestObj contains request parameters
     */
    deleteBookmarksOnline(requestObj: model.DeleteBookmarksOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBorder(requestObj: model.DeleteBorderRequest): Promise<model.WordsIncomingMessage<model.BorderResponse>>;
    /**
     * Removes a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBorderOnline(requestObj: model.DeleteBorderOnlineRequest): Promise<model.WordsIncomingMessage<model.DeleteBorderOnlineResponse>>;
    /**
     * Removes borders from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBorders(requestObj: model.DeleteBordersRequest): Promise<model.WordsIncomingMessage<model.BordersResponse>>;
    /**
     * Removes borders from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    deleteBordersOnline(requestObj: model.DeleteBordersOnlineRequest): Promise<model.WordsIncomingMessage<model.DeleteBordersOnlineResponse>>;
    /**
     * Removes a comment from the document.
     * @param requestObj contains request parameters
     */
    deleteComment(requestObj: model.DeleteCommentRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a comment from the document.
     * @param requestObj contains request parameters
     */
    deleteCommentOnline(requestObj: model.DeleteCommentOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes all comments from the document.
     * @param requestObj contains request parameters
     */
    deleteComments(requestObj: model.DeleteCommentsRequest): Promise<http.IncomingMessage>;
    /**
     * Removes all comments from the document.
     * @param requestObj contains request parameters
     */
    deleteCommentsOnline(requestObj: model.DeleteCommentsOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlPart(requestObj: model.DeleteCustomXmlPartRequest): Promise<http.IncomingMessage>;
    /**
     * Removes the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlPartOnline(requestObj: model.DeleteCustomXmlPartOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes all custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlParts(requestObj: model.DeleteCustomXmlPartsRequest): Promise<http.IncomingMessage>;
    /**
     * Removes all custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    deleteCustomXmlPartsOnline(requestObj: model.DeleteCustomXmlPartsOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a document property.
     * @param requestObj contains request parameters
     */
    deleteDocumentProperty(requestObj: model.DeleteDocumentPropertyRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a document property.
     * @param requestObj contains request parameters
     */
    deleteDocumentPropertyOnline(requestObj: model.DeleteDocumentPropertyOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    deleteDrawingObject(requestObj: model.DeleteDrawingObjectRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    deleteDrawingObjectOnline(requestObj: model.DeleteDrawingObjectOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a field from the document node.
     * @param requestObj contains request parameters
     */
    deleteField(requestObj: model.DeleteFieldRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a field from the document node.
     * @param requestObj contains request parameters
     */
    deleteFieldOnline(requestObj: model.DeleteFieldOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes fields from the document node.
     * @param requestObj contains request parameters
     */
    deleteFields(requestObj: model.DeleteFieldsRequest): Promise<http.IncomingMessage>;
    /**
     * Removes fields from the document node.
     * @param requestObj contains request parameters
     */
    deleteFieldsOnline(requestObj: model.DeleteFieldsOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Delete file.
     * @param requestObj contains request parameters
     */
    deleteFile(requestObj: model.DeleteFileRequest): Promise<http.IncomingMessage>;
    /**
     * Delete folder.
     * @param requestObj contains request parameters
     */
    deleteFolder(requestObj: model.DeleteFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a footnote from the document node.
     * @param requestObj contains request parameters
     */
    deleteFootnote(requestObj: model.DeleteFootnoteRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a footnote from the document node.
     * @param requestObj contains request parameters
     */
    deleteFootnoteOnline(requestObj: model.DeleteFootnoteOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a form field from the document node.
     * @param requestObj contains request parameters
     */
    deleteFormField(requestObj: model.DeleteFormFieldRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a form field from the document node.
     * @param requestObj contains request parameters
     */
    deleteFormFieldOnline(requestObj: model.DeleteFormFieldOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeaderFooter(requestObj: model.DeleteHeaderFooterRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeaderFooterOnline(requestObj: model.DeleteHeaderFooterOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeadersFooters(requestObj: model.DeleteHeadersFootersRequest): Promise<http.IncomingMessage>;
    /**
     * Removes HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    deleteHeadersFootersOnline(requestObj: model.DeleteHeadersFootersOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes macros from the document.
     * @param requestObj contains request parameters
     */
    deleteMacros(requestObj: model.DeleteMacrosRequest): Promise<http.IncomingMessage>;
    /**
     * Removes macros from the document.
     * @param requestObj contains request parameters
     */
    deleteMacrosOnline(requestObj: model.DeleteMacrosOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObject(requestObj: model.DeleteOfficeMathObjectRequest): Promise<http.IncomingMessage>;
    /**
     * Removes an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjectOnline(requestObj: model.DeleteOfficeMathObjectOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes all office math objects from the document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjects(requestObj: model.DeleteOfficeMathObjectsRequest): Promise<http.IncomingMessage>;
    /**
     * Removes all office math objects from the document.
     * @param requestObj contains request parameters
     */
    deleteOfficeMathObjectsOnline(requestObj: model.DeleteOfficeMathObjectsOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraph(requestObj: model.DeleteParagraphRequest): Promise<http.IncomingMessage>;
    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphListFormat(requestObj: model.DeleteParagraphListFormatRequest): Promise<model.WordsIncomingMessage<model.ParagraphListFormatResponse>>;
    /**
     * Removes the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphListFormatOnline(requestObj: model.DeleteParagraphListFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.DeleteParagraphListFormatOnlineResponse>>;
    /**
     * Removes a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphOnline(requestObj: model.DeleteParagraphOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a paragraph tab stop from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphTabStop(requestObj: model.DeleteParagraphTabStopRequest): Promise<model.WordsIncomingMessage<model.TabStopsResponse>>;
    /**
     * Removes a paragraph tab stop from the document node.
     * @param requestObj contains request parameters
     */
    deleteParagraphTabStopOnline(requestObj: model.DeleteParagraphTabStopOnlineRequest): Promise<model.WordsIncomingMessage<model.DeleteParagraphTabStopOnlineResponse>>;
    /**
     * Removes a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    deleteRun(requestObj: model.DeleteRunRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    deleteRunOnline(requestObj: model.DeleteRunOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a section from the document.
     * @param requestObj contains request parameters
     */
    deleteSection(requestObj: model.DeleteSectionRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a section from the document.
     * @param requestObj contains request parameters
     */
    deleteSectionOnline(requestObj: model.DeleteSectionOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    deleteStructuredDocumentTag(requestObj: model.DeleteStructuredDocumentTagRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    deleteStructuredDocumentTagOnline(requestObj: model.DeleteStructuredDocumentTagOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a table from the document node.
     * @param requestObj contains request parameters
     */
    deleteTable(requestObj: model.DeleteTableRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a cell from the table row.
     * @param requestObj contains request parameters
     */
    deleteTableCell(requestObj: model.DeleteTableCellRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a cell from the table row.
     * @param requestObj contains request parameters
     */
    deleteTableCellOnline(requestObj: model.DeleteTableCellOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a table from the document node.
     * @param requestObj contains request parameters
     */
    deleteTableOnline(requestObj: model.DeleteTableOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a row from the table.
     * @param requestObj contains request parameters
     */
    deleteTableRow(requestObj: model.DeleteTableRowRequest): Promise<http.IncomingMessage>;
    /**
     * Removes a row from the table.
     * @param requestObj contains request parameters
     */
    deleteTableRowOnline(requestObj: model.DeleteTableRowOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Removes a watermark from the document.
     * @param requestObj contains request parameters
     */
    deleteWatermark(requestObj: model.DeleteWatermarkRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Removes a watermark from the document.
     * @param requestObj contains request parameters
     */
    deleteWatermarkOnline(requestObj: model.DeleteWatermarkOnlineRequest): Promise<model.WordsIncomingMessage<model.DeleteWatermarkOnlineResponse>>;
    /**
     * Download file.
     * @param requestObj contains request parameters
     */
    downloadFile(requestObj: model.DownloadFileRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Executes a Mail Merge operation.
     * @param requestObj contains request parameters
     */
    executeMailMerge(requestObj: model.ExecuteMailMergeRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Executes a Mail Merge operation online.
     * @param requestObj contains request parameters
     */
    executeMailMergeOnline(requestObj: model.ExecuteMailMergeOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Get all information about revisions.
     * @param requestObj contains request parameters
     */
    getAllRevisions(requestObj: model.GetAllRevisionsRequest): Promise<model.WordsIncomingMessage<model.RevisionsResponse>>;
    /**
     * Get all information about revisions.
     * @param requestObj contains request parameters
     */
    getAllRevisionsOnline(requestObj: model.GetAllRevisionsOnlineRequest): Promise<model.WordsIncomingMessage<model.RevisionsResponse>>;
    /**
     * Reads available fonts from the document.
     * @param requestObj contains request parameters
     */
    getAvailableFonts(requestObj: model.GetAvailableFontsRequest): Promise<model.WordsIncomingMessage<model.AvailableFontsResponse>>;
    /**
     * Reads a bookmark, specified by name, from the document.
     * @param requestObj contains request parameters
     */
    getBookmarkByName(requestObj: model.GetBookmarkByNameRequest): Promise<model.WordsIncomingMessage<model.BookmarkResponse>>;
    /**
     * Reads a bookmark, specified by name, from the document.
     * @param requestObj contains request parameters
     */
    getBookmarkByNameOnline(requestObj: model.GetBookmarkByNameOnlineRequest): Promise<model.WordsIncomingMessage<model.BookmarkResponse>>;
    /**
     * Reads bookmarks from the document.
     * @param requestObj contains request parameters
     */
    getBookmarks(requestObj: model.GetBookmarksRequest): Promise<model.WordsIncomingMessage<model.BookmarksResponse>>;
    /**
     * Reads bookmarks from the document.
     * @param requestObj contains request parameters
     */
    getBookmarksOnline(requestObj: model.GetBookmarksOnlineRequest): Promise<model.WordsIncomingMessage<model.BookmarksResponse>>;
    /**
     * Reads a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    getBorder(requestObj: model.GetBorderRequest): Promise<model.WordsIncomingMessage<model.BorderResponse>>;
    /**
     * Reads a border from the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    getBorderOnline(requestObj: model.GetBorderOnlineRequest): Promise<model.WordsIncomingMessage<model.BorderResponse>>;
    /**
     * Reads borders from the document node.
     * @param requestObj contains request parameters
     */
    getBorders(requestObj: model.GetBordersRequest): Promise<model.WordsIncomingMessage<model.BordersResponse>>;
    /**
     * Reads borders from the document node.
     * @param requestObj contains request parameters
     */
    getBordersOnline(requestObj: model.GetBordersOnlineRequest): Promise<model.WordsIncomingMessage<model.BordersResponse>>;
    /**
     * Reads a comment from the document.
     * @param requestObj contains request parameters
     */
    getComment(requestObj: model.GetCommentRequest): Promise<model.WordsIncomingMessage<model.CommentResponse>>;
    /**
     * Reads a comment from the document.
     * @param requestObj contains request parameters
     */
    getCommentOnline(requestObj: model.GetCommentOnlineRequest): Promise<model.WordsIncomingMessage<model.CommentResponse>>;
    /**
     * Reads comments from the document.
     * @param requestObj contains request parameters
     */
    getComments(requestObj: model.GetCommentsRequest): Promise<model.WordsIncomingMessage<model.CommentsResponse>>;
    /**
     * Reads comments from the document.
     * @param requestObj contains request parameters
     */
    getCommentsOnline(requestObj: model.GetCommentsOnlineRequest): Promise<model.WordsIncomingMessage<model.CommentsResponse>>;
    /**
     * Reads the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlPart(requestObj: model.GetCustomXmlPartRequest): Promise<model.WordsIncomingMessage<model.CustomXmlPartResponse>>;
    /**
     * Reads the custom xml part from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlPartOnline(requestObj: model.GetCustomXmlPartOnlineRequest): Promise<model.WordsIncomingMessage<model.CustomXmlPartResponse>>;
    /**
     * Reads custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlParts(requestObj: model.GetCustomXmlPartsRequest): Promise<model.WordsIncomingMessage<model.CustomXmlPartsResponse>>;
    /**
     * Reads custom xml parts from the document.
     * @param requestObj contains request parameters
     */
    getCustomXmlPartsOnline(requestObj: model.GetCustomXmlPartsOnlineRequest): Promise<model.WordsIncomingMessage<model.CustomXmlPartsResponse>>;
    /**
     * Reads common information from the document.
     * @param requestObj contains request parameters
     */
    getDocument(requestObj: model.GetDocumentRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Reads a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndex(requestObj: model.GetDocumentDrawingObjectByIndexRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Reads a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectByIndexOnline(requestObj: model.GetDocumentDrawingObjectByIndexOnlineRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Reads image data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageData(requestObj: model.GetDocumentDrawingObjectImageDataRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Reads image data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectImageDataOnline(requestObj: model.GetDocumentDrawingObjectImageDataOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleData(requestObj: model.GetDocumentDrawingObjectOleDataRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Reads OLE data of a DrawingObject from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectOleDataOnline(requestObj: model.GetDocumentDrawingObjectOleDataOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Reads DrawingObjects from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjects(requestObj: model.GetDocumentDrawingObjectsRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectsResponse>>;
    /**
     * Reads DrawingObjects from the document node.
     * @param requestObj contains request parameters
     */
    getDocumentDrawingObjectsOnline(requestObj: model.GetDocumentDrawingObjectsOnlineRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectsResponse>>;
    /**
     * Reads merge field names from the document.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNames(requestObj: model.GetDocumentFieldNamesRequest): Promise<model.WordsIncomingMessage<model.FieldNamesResponse>>;
    /**
     * Reads merge field names from the document.
     * @param requestObj contains request parameters
     */
    getDocumentFieldNamesOnline(requestObj: model.GetDocumentFieldNamesOnlineRequest): Promise<model.WordsIncomingMessage<model.FieldNamesResponse>>;
    /**
     * Reads a hyperlink from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinkByIndex(requestObj: model.GetDocumentHyperlinkByIndexRequest): Promise<model.WordsIncomingMessage<model.HyperlinkResponse>>;
    /**
     * Reads a hyperlink from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinkByIndexOnline(requestObj: model.GetDocumentHyperlinkByIndexOnlineRequest): Promise<model.WordsIncomingMessage<model.HyperlinkResponse>>;
    /**
     * Reads hyperlinks from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinks(requestObj: model.GetDocumentHyperlinksRequest): Promise<model.WordsIncomingMessage<model.HyperlinksResponse>>;
    /**
     * Reads hyperlinks from the document.
     * @param requestObj contains request parameters
     */
    getDocumentHyperlinksOnline(requestObj: model.GetDocumentHyperlinksOnlineRequest): Promise<model.WordsIncomingMessage<model.HyperlinksResponse>>;
    /**
     * Reads document properties.
     * @param requestObj contains request parameters
     */
    getDocumentProperties(requestObj: model.GetDocumentPropertiesRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertiesResponse>>;
    /**
     * Reads document properties.
     * @param requestObj contains request parameters
     */
    getDocumentPropertiesOnline(requestObj: model.GetDocumentPropertiesOnlineRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertiesResponse>>;
    /**
     * Reads a document property.
     * @param requestObj contains request parameters
     */
    getDocumentProperty(requestObj: model.GetDocumentPropertyRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertyResponse>>;
    /**
     * Reads a document property.
     * @param requestObj contains request parameters
     */
    getDocumentPropertyOnline(requestObj: model.GetDocumentPropertyOnlineRequest): Promise<model.WordsIncomingMessage<model.DocumentPropertyResponse>>;
    /**
     * Reads protection properties from the document.
     * @param requestObj contains request parameters
     */
    getDocumentProtection(requestObj: model.GetDocumentProtectionRequest): Promise<model.WordsIncomingMessage<model.ProtectionDataResponse>>;
    /**
     * Reads protection properties from the document.
     * @param requestObj contains request parameters
     */
    getDocumentProtectionOnline(requestObj: model.GetDocumentProtectionOnlineRequest): Promise<model.WordsIncomingMessage<model.ProtectionDataResponse>>;
    /**
     * Reads document statistics.
     * @param requestObj contains request parameters
     */
    getDocumentStatistics(requestObj: model.GetDocumentStatisticsRequest): Promise<model.WordsIncomingMessage<model.StatDataResponse>>;
    /**
     * Reads document statistics.
     * @param requestObj contains request parameters
     */
    getDocumentStatisticsOnline(requestObj: model.GetDocumentStatisticsOnlineRequest): Promise<model.WordsIncomingMessage<model.StatDataResponse>>;
    /**
     * Converts a document in cloud storage to the specified format.
     * @param requestObj contains request parameters
     */
    getDocumentWithFormat(requestObj: model.GetDocumentWithFormatRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Reads a field from the document node.
     * @param requestObj contains request parameters
     */
    getField(requestObj: model.GetFieldRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Reads a field from the document node.
     * @param requestObj contains request parameters
     */
    getFieldOnline(requestObj: model.GetFieldOnlineRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Reads fields from the document node.
     * @param requestObj contains request parameters
     */
    getFields(requestObj: model.GetFieldsRequest): Promise<model.WordsIncomingMessage<model.FieldsResponse>>;
    /**
     * Reads fields from the document node.
     * @param requestObj contains request parameters
     */
    getFieldsOnline(requestObj: model.GetFieldsOnlineRequest): Promise<model.WordsIncomingMessage<model.FieldsResponse>>;
    /**
     * Get all files and folders within a folder.
     * @param requestObj contains request parameters
     */
    getFilesList(requestObj: model.GetFilesListRequest): Promise<model.WordsIncomingMessage<model.FilesList>>;
    /**
     * Reads a footnote from the document node.
     * @param requestObj contains request parameters
     */
    getFootnote(requestObj: model.GetFootnoteRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Reads a footnote from the document node.
     * @param requestObj contains request parameters
     */
    getFootnoteOnline(requestObj: model.GetFootnoteOnlineRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Reads footnotes from the document node.
     * @param requestObj contains request parameters
     */
    getFootnotes(requestObj: model.GetFootnotesRequest): Promise<model.WordsIncomingMessage<model.FootnotesResponse>>;
    /**
     * Reads footnotes from the document node.
     * @param requestObj contains request parameters
     */
    getFootnotesOnline(requestObj: model.GetFootnotesOnlineRequest): Promise<model.WordsIncomingMessage<model.FootnotesResponse>>;
    /**
     * Reads a form field from the document node.
     * @param requestObj contains request parameters
     */
    getFormField(requestObj: model.GetFormFieldRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Reads a form field from the document node.
     * @param requestObj contains request parameters
     */
    getFormFieldOnline(requestObj: model.GetFormFieldOnlineRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Reads form fields from the document node.
     * @param requestObj contains request parameters
     */
    getFormFields(requestObj: model.GetFormFieldsRequest): Promise<model.WordsIncomingMessage<model.FormFieldsResponse>>;
    /**
     * Reads form fields from the document node.
     * @param requestObj contains request parameters
     */
    getFormFieldsOnline(requestObj: model.GetFormFieldsOnlineRequest): Promise<model.WordsIncomingMessage<model.FormFieldsResponse>>;
    /**
     * Reads a HeaderFooter object from the document.
     * @param requestObj contains request parameters
     */
    getHeaderFooter(requestObj: model.GetHeaderFooterRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Reads a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOfSection(requestObj: model.GetHeaderFooterOfSectionRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Reads a HeaderFooter object from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOfSectionOnline(requestObj: model.GetHeaderFooterOfSectionOnlineRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Reads a HeaderFooter object from the document.
     * @param requestObj contains request parameters
     */
    getHeaderFooterOnline(requestObj: model.GetHeaderFooterOnlineRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Reads HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFooters(requestObj: model.GetHeaderFootersRequest): Promise<model.WordsIncomingMessage<model.HeaderFootersResponse>>;
    /**
     * Reads HeaderFooter objects from the document section.
     * @param requestObj contains request parameters
     */
    getHeaderFootersOnline(requestObj: model.GetHeaderFootersOnlineRequest): Promise<model.WordsIncomingMessage<model.HeaderFootersResponse>>;
    /**
     * Returns application info.
     * @param requestObj contains request parameters
     */
    getInfo(requestObj: model.GetInfoRequest): Promise<model.WordsIncomingMessage<model.InfoResponse>>;
    /**
     * Reads a list from the document.
     * @param requestObj contains request parameters
     */
    getList(requestObj: model.GetListRequest): Promise<model.WordsIncomingMessage<model.ListResponse>>;
    /**
     * Reads a list from the document.
     * @param requestObj contains request parameters
     */
    getListOnline(requestObj: model.GetListOnlineRequest): Promise<model.WordsIncomingMessage<model.ListResponse>>;
    /**
     * Reads lists from the document.
     * @param requestObj contains request parameters
     */
    getLists(requestObj: model.GetListsRequest): Promise<model.WordsIncomingMessage<model.ListsResponse>>;
    /**
     * Reads lists from the document.
     * @param requestObj contains request parameters
     */
    getListsOnline(requestObj: model.GetListsOnlineRequest): Promise<model.WordsIncomingMessage<model.ListsResponse>>;
    /**
     * Reads an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObject(requestObj: model.GetOfficeMathObjectRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectResponse>>;
    /**
     * Reads an OfficeMath object from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectOnline(requestObj: model.GetOfficeMathObjectOnlineRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectResponse>>;
    /**
     * Reads OfficeMath objects from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjects(requestObj: model.GetOfficeMathObjectsRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectsResponse>>;
    /**
     * Reads OfficeMath objects from the document node.
     * @param requestObj contains request parameters
     */
    getOfficeMathObjectsOnline(requestObj: model.GetOfficeMathObjectsOnlineRequest): Promise<model.WordsIncomingMessage<model.OfficeMathObjectsResponse>>;
    /**
     * Reads a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraph(requestObj: model.GetParagraphRequest): Promise<model.WordsIncomingMessage<model.ParagraphResponse>>;
    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphFormat(requestObj: model.GetParagraphFormatRequest): Promise<model.WordsIncomingMessage<model.ParagraphFormatResponse>>;
    /**
     * Reads the formatting properties of a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphFormatOnline(requestObj: model.GetParagraphFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.ParagraphFormatResponse>>;
    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphListFormat(requestObj: model.GetParagraphListFormatRequest): Promise<model.WordsIncomingMessage<model.ParagraphListFormatResponse>>;
    /**
     * Reads the formatting properties of a paragraph list from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphListFormatOnline(requestObj: model.GetParagraphListFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.ParagraphListFormatResponse>>;
    /**
     * Reads a paragraph from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphOnline(requestObj: model.GetParagraphOnlineRequest): Promise<model.WordsIncomingMessage<model.ParagraphResponse>>;
    /**
     * Reads paragraphs from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphs(requestObj: model.GetParagraphsRequest): Promise<model.WordsIncomingMessage<model.ParagraphLinkCollectionResponse>>;
    /**
     * Reads paragraphs from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphsOnline(requestObj: model.GetParagraphsOnlineRequest): Promise<model.WordsIncomingMessage<model.ParagraphLinkCollectionResponse>>;
    /**
     * Reads paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphTabStops(requestObj: model.GetParagraphTabStopsRequest): Promise<model.WordsIncomingMessage<model.TabStopsResponse>>;
    /**
     * Reads paragraph tab stops from the document node.
     * @param requestObj contains request parameters
     */
    getParagraphTabStopsOnline(requestObj: model.GetParagraphTabStopsOnlineRequest): Promise<model.WordsIncomingMessage<model.TabStopsResponse>>;
    /**
     * Get assymetric public key.
     * @param requestObj contains request parameters
     */
    getPublicKey(requestObj: model.GetPublicKeyRequest): Promise<model.WordsIncomingMessage<model.PublicKeyResponse>>;
    /**
     * Reads range text from the document.
     * @param requestObj contains request parameters
     */
    getRangeText(requestObj: model.GetRangeTextRequest): Promise<model.WordsIncomingMessage<model.RangeTextResponse>>;
    /**
     * Reads range text from the document.
     * @param requestObj contains request parameters
     */
    getRangeTextOnline(requestObj: model.GetRangeTextOnlineRequest): Promise<model.WordsIncomingMessage<model.RangeTextResponse>>;
    /**
     * Reads a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRun(requestObj: model.GetRunRequest): Promise<model.WordsIncomingMessage<model.RunResponse>>;
    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunFont(requestObj: model.GetRunFontRequest): Promise<model.WordsIncomingMessage<model.FontResponse>>;
    /**
     * Reads the font properties of a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunFontOnline(requestObj: model.GetRunFontOnlineRequest): Promise<model.WordsIncomingMessage<model.FontResponse>>;
    /**
     * Reads a Run object from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunOnline(requestObj: model.GetRunOnlineRequest): Promise<model.WordsIncomingMessage<model.RunResponse>>;
    /**
     * Reads Run objects from the paragraph.
     * @param requestObj contains request parameters
     */
    getRuns(requestObj: model.GetRunsRequest): Promise<model.WordsIncomingMessage<model.RunsResponse>>;
    /**
     * Reads Run objects from the paragraph.
     * @param requestObj contains request parameters
     */
    getRunsOnline(requestObj: model.GetRunsOnlineRequest): Promise<model.WordsIncomingMessage<model.RunsResponse>>;
    /**
     * Reads a section from the document.
     * @param requestObj contains request parameters
     */
    getSection(requestObj: model.GetSectionRequest): Promise<model.WordsIncomingMessage<model.SectionResponse>>;
    /**
     * Reads a section from the document.
     * @param requestObj contains request parameters
     */
    getSectionOnline(requestObj: model.GetSectionOnlineRequest): Promise<model.WordsIncomingMessage<model.SectionResponse>>;
    /**
     * Reads the page setup of a section from the document.
     * @param requestObj contains request parameters
     */
    getSectionPageSetup(requestObj: model.GetSectionPageSetupRequest): Promise<model.WordsIncomingMessage<model.SectionPageSetupResponse>>;
    /**
     * Reads the page setup of a section from the document.
     * @param requestObj contains request parameters
     */
    getSectionPageSetupOnline(requestObj: model.GetSectionPageSetupOnlineRequest): Promise<model.WordsIncomingMessage<model.SectionPageSetupResponse>>;
    /**
     * Reads sections from the document.
     * @param requestObj contains request parameters
     */
    getSections(requestObj: model.GetSectionsRequest): Promise<model.WordsIncomingMessage<model.SectionLinkCollectionResponse>>;
    /**
     * Reads sections from the document.
     * @param requestObj contains request parameters
     */
    getSectionsOnline(requestObj: model.GetSectionsOnlineRequest): Promise<model.WordsIncomingMessage<model.SectionLinkCollectionResponse>>;
    /**
     * Gets signatures from the document.
     * @param requestObj contains request parameters
     */
    getSignatures(requestObj: model.GetSignaturesRequest): Promise<model.WordsIncomingMessage<model.SignatureCollectionResponse>>;
    /**
     * Gets signatures from the document.
     * @param requestObj contains request parameters
     */
    getSignaturesOnline(requestObj: model.GetSignaturesOnlineRequest): Promise<model.WordsIncomingMessage<model.SignatureCollectionResponse>>;
    /**
     * Reads a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTag(requestObj: model.GetStructuredDocumentTagRequest): Promise<model.WordsIncomingMessage<model.StructuredDocumentTagResponse>>;
    /**
     * Reads a StructuredDocumentTag (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTagOnline(requestObj: model.GetStructuredDocumentTagOnlineRequest): Promise<model.WordsIncomingMessage<model.StructuredDocumentTagResponse>>;
    /**
     * Reads StructuredDocumentTags (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTags(requestObj: model.GetStructuredDocumentTagsRequest): Promise<model.WordsIncomingMessage<model.StructuredDocumentTagsResponse>>;
    /**
     * Reads StructuredDocumentTags (SDT) from the document node.
     * @param requestObj contains request parameters
     */
    getStructuredDocumentTagsOnline(requestObj: model.GetStructuredDocumentTagsOnlineRequest): Promise<model.WordsIncomingMessage<model.StructuredDocumentTagsResponse>>;
    /**
     * Reads a style from the document.
     * @param requestObj contains request parameters
     */
    getStyle(requestObj: model.GetStyleRequest): Promise<model.WordsIncomingMessage<model.StyleResponse>>;
    /**
     * Reads a style from the document node.
     * @param requestObj contains request parameters
     */
    getStyleFromDocumentElement(requestObj: model.GetStyleFromDocumentElementRequest): Promise<model.WordsIncomingMessage<model.StyleResponse>>;
    /**
     * Reads a style from the document node.
     * @param requestObj contains request parameters
     */
    getStyleFromDocumentElementOnline(requestObj: model.GetStyleFromDocumentElementOnlineRequest): Promise<model.WordsIncomingMessage<model.StyleResponse>>;
    /**
     * Reads a style from the document.
     * @param requestObj contains request parameters
     */
    getStyleOnline(requestObj: model.GetStyleOnlineRequest): Promise<model.WordsIncomingMessage<model.StyleResponse>>;
    /**
     * Reads styles from the document.
     * @param requestObj contains request parameters
     */
    getStyles(requestObj: model.GetStylesRequest): Promise<model.WordsIncomingMessage<model.StylesResponse>>;
    /**
     * Reads styles from the document.
     * @param requestObj contains request parameters
     */
    getStylesOnline(requestObj: model.GetStylesOnlineRequest): Promise<model.WordsIncomingMessage<model.StylesResponse>>;
    /**
     * Reads a table from the document node.
     * @param requestObj contains request parameters
     */
    getTable(requestObj: model.GetTableRequest): Promise<model.WordsIncomingMessage<model.TableResponse>>;
    /**
     * Reads a cell from the table row.
     * @param requestObj contains request parameters
     */
    getTableCell(requestObj: model.GetTableCellRequest): Promise<model.WordsIncomingMessage<model.TableCellResponse>>;
    /**
     * Reads the formatting properties of a table cell.
     * @param requestObj contains request parameters
     */
    getTableCellFormat(requestObj: model.GetTableCellFormatRequest): Promise<model.WordsIncomingMessage<model.TableCellFormatResponse>>;
    /**
     * Reads the formatting properties of a table cell.
     * @param requestObj contains request parameters
     */
    getTableCellFormatOnline(requestObj: model.GetTableCellFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.TableCellFormatResponse>>;
    /**
     * Reads a cell from the table row.
     * @param requestObj contains request parameters
     */
    getTableCellOnline(requestObj: model.GetTableCellOnlineRequest): Promise<model.WordsIncomingMessage<model.TableCellResponse>>;
    /**
     * Reads a table from the document node.
     * @param requestObj contains request parameters
     */
    getTableOnline(requestObj: model.GetTableOnlineRequest): Promise<model.WordsIncomingMessage<model.TableResponse>>;
    /**
     * Reads properties of a table from the document node.
     * @param requestObj contains request parameters
     */
    getTableProperties(requestObj: model.GetTablePropertiesRequest): Promise<model.WordsIncomingMessage<model.TablePropertiesResponse>>;
    /**
     * Reads properties of a table from the document node.
     * @param requestObj contains request parameters
     */
    getTablePropertiesOnline(requestObj: model.GetTablePropertiesOnlineRequest): Promise<model.WordsIncomingMessage<model.TablePropertiesResponse>>;
    /**
     * Reads a row from the table.
     * @param requestObj contains request parameters
     */
    getTableRow(requestObj: model.GetTableRowRequest): Promise<model.WordsIncomingMessage<model.TableRowResponse>>;
    /**
     * Reads the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    getTableRowFormat(requestObj: model.GetTableRowFormatRequest): Promise<model.WordsIncomingMessage<model.TableRowFormatResponse>>;
    /**
     * Reads the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    getTableRowFormatOnline(requestObj: model.GetTableRowFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.TableRowFormatResponse>>;
    /**
     * Reads a row from the table.
     * @param requestObj contains request parameters
     */
    getTableRowOnline(requestObj: model.GetTableRowOnlineRequest): Promise<model.WordsIncomingMessage<model.TableRowResponse>>;
    /**
     * Reads tables from the document node.
     * @param requestObj contains request parameters
     */
    getTables(requestObj: model.GetTablesRequest): Promise<model.WordsIncomingMessage<model.TableLinkCollectionResponse>>;
    /**
     * Reads tables from the document node.
     * @param requestObj contains request parameters
     */
    getTablesOnline(requestObj: model.GetTablesOnlineRequest): Promise<model.WordsIncomingMessage<model.TableLinkCollectionResponse>>;
    /**
     * Inserts a new bookmark to the document.
     * @param requestObj contains request parameters
     */
    insertBookmark(requestObj: model.InsertBookmarkRequest): Promise<model.WordsIncomingMessage<model.BookmarkResponse>>;
    /**
     * Inserts a new bookmark to the document.
     * @param requestObj contains request parameters
     */
    insertBookmarkOnline(requestObj: model.InsertBookmarkOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertBookmarkOnlineResponse>>;
    /**
     * Inserts a new comment to the document.
     * @param requestObj contains request parameters
     */
    insertComment(requestObj: model.InsertCommentRequest): Promise<model.WordsIncomingMessage<model.CommentResponse>>;
    /**
     * Inserts a new comment to the document.
     * @param requestObj contains request parameters
     */
    insertCommentOnline(requestObj: model.InsertCommentOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertCommentOnlineResponse>>;
    /**
     * Inserts a new custom xml part to the document.
     * @param requestObj contains request parameters
     */
    insertCustomXmlPart(requestObj: model.InsertCustomXmlPartRequest): Promise<model.WordsIncomingMessage<model.CustomXmlPartResponse>>;
    /**
     * Inserts a new custom xml part to the document.
     * @param requestObj contains request parameters
     */
    insertCustomXmlPartOnline(requestObj: model.InsertCustomXmlPartOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertCustomXmlPartOnlineResponse>>;
    /**
     * Inserts a new DrawingObject to the document node.
     * @param requestObj contains request parameters
     */
    insertDrawingObject(requestObj: model.InsertDrawingObjectRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Inserts a new DrawingObject to the document node.
     * @param requestObj contains request parameters
     */
    insertDrawingObjectOnline(requestObj: model.InsertDrawingObjectOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertDrawingObjectOnlineResponse>>;
    /**
     * Inserts a new field to the document node.
     * @param requestObj contains request parameters
     */
    insertField(requestObj: model.InsertFieldRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Inserts a new field to the document node.
     * @param requestObj contains request parameters
     */
    insertFieldOnline(requestObj: model.InsertFieldOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertFieldOnlineResponse>>;
    /**
     * Inserts a new footnote to the document node.
     * @param requestObj contains request parameters
     */
    insertFootnote(requestObj: model.InsertFootnoteRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Inserts a new footnote to the document node.
     * @param requestObj contains request parameters
     */
    insertFootnoteOnline(requestObj: model.InsertFootnoteOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertFootnoteOnlineResponse>>;
    /**
     * Inserts a new form field to the document node.
     * @param requestObj contains request parameters
     */
    insertFormField(requestObj: model.InsertFormFieldRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Inserts a new form field to the document node.
     * @param requestObj contains request parameters
     */
    insertFormFieldOnline(requestObj: model.InsertFormFieldOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertFormFieldOnlineResponse>>;
    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param requestObj contains request parameters
     */
    insertHeaderFooter(requestObj: model.InsertHeaderFooterRequest): Promise<model.WordsIncomingMessage<model.HeaderFooterResponse>>;
    /**
     * Inserts a new HeaderFooter object to the document section.
     * @param requestObj contains request parameters
     */
    insertHeaderFooterOnline(requestObj: model.InsertHeaderFooterOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertHeaderFooterOnlineResponse>>;
    /**
     * Inserts a new list to the document.
     * @param requestObj contains request parameters
     */
    insertList(requestObj: model.InsertListRequest): Promise<model.WordsIncomingMessage<model.ListResponse>>;
    /**
     * Inserts a new list to the document.
     * @param requestObj contains request parameters
     */
    insertListOnline(requestObj: model.InsertListOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertListOnlineResponse>>;
    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param requestObj contains request parameters
     */
    insertOrUpdateParagraphTabStop(requestObj: model.InsertOrUpdateParagraphTabStopRequest): Promise<model.WordsIncomingMessage<model.TabStopsResponse>>;
    /**
     * Inserts a new or updates an existing paragraph tab stop in the document node.
     * @param requestObj contains request parameters
     */
    insertOrUpdateParagraphTabStopOnline(requestObj: model.InsertOrUpdateParagraphTabStopOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertOrUpdateParagraphTabStopOnlineResponse>>;
    /**
     * Inserts page numbers to the document.
     * @param requestObj contains request parameters
     */
    insertPageNumbers(requestObj: model.InsertPageNumbersRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Inserts page numbers to the document.
     * @param requestObj contains request parameters
     */
    insertPageNumbersOnline(requestObj: model.InsertPageNumbersOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertPageNumbersOnlineResponse>>;
    /**
     * Inserts a new paragraph to the document node.
     * @param requestObj contains request parameters
     */
    insertParagraph(requestObj: model.InsertParagraphRequest): Promise<model.WordsIncomingMessage<model.ParagraphResponse>>;
    /**
     * Inserts a new paragraph to the document node.
     * @param requestObj contains request parameters
     */
    insertParagraphOnline(requestObj: model.InsertParagraphOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertParagraphOnlineResponse>>;
    /**
     * Inserts a new Run object to the paragraph.
     * @param requestObj contains request parameters
     */
    insertRun(requestObj: model.InsertRunRequest): Promise<model.WordsIncomingMessage<model.RunResponse>>;
    /**
     * Inserts a new Run object to the paragraph.
     * @param requestObj contains request parameters
     */
    insertRunOnline(requestObj: model.InsertRunOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertRunOnlineResponse>>;
    /**
     * Inserts a section to the document.
     * @param requestObj contains request parameters
     */
    insertSection(requestObj: model.InsertSectionRequest): Promise<http.IncomingMessage>;
    /**
     * Inserts a section to the document.
     * @param requestObj contains request parameters
     */
    insertSectionOnline(requestObj: model.InsertSectionOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Inserts a new StructuredDocumentTag (SDT) to the document node.
     * @param requestObj contains request parameters
     */
    insertStructuredDocumentTag(requestObj: model.InsertStructuredDocumentTagRequest): Promise<model.WordsIncomingMessage<model.StructuredDocumentTagResponse>>;
    /**
     * Inserts a new StructuredDocumentTag (SDT) to the document node.
     * @param requestObj contains request parameters
     */
    insertStructuredDocumentTagOnline(requestObj: model.InsertStructuredDocumentTagOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertStructuredDocumentTagOnlineResponse>>;
    /**
     * Inserts a new style to the document.
     * @param requestObj contains request parameters
     */
    insertStyle(requestObj: model.InsertStyleRequest): Promise<model.WordsIncomingMessage<model.StyleResponse>>;
    /**
     * Inserts a new style to the document.
     * @param requestObj contains request parameters
     */
    insertStyleOnline(requestObj: model.InsertStyleOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertStyleOnlineResponse>>;
    /**
     * Inserts a new table to the document node.
     * @param requestObj contains request parameters
     */
    insertTable(requestObj: model.InsertTableRequest): Promise<model.WordsIncomingMessage<model.TableResponse>>;
    /**
     * Inserts a new cell to the table row.
     * @param requestObj contains request parameters
     */
    insertTableCell(requestObj: model.InsertTableCellRequest): Promise<model.WordsIncomingMessage<model.TableCellResponse>>;
    /**
     * Inserts a new cell to the table row.
     * @param requestObj contains request parameters
     */
    insertTableCellOnline(requestObj: model.InsertTableCellOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertTableCellOnlineResponse>>;
    /**
     * Inserts a new table to the document node.
     * @param requestObj contains request parameters
     */
    insertTableOnline(requestObj: model.InsertTableOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertTableOnlineResponse>>;
    /**
     * Inserts a new row to the table.
     * @param requestObj contains request parameters
     */
    insertTableRow(requestObj: model.InsertTableRowRequest): Promise<model.WordsIncomingMessage<model.TableRowResponse>>;
    /**
     * Inserts a new row to the table.
     * @param requestObj contains request parameters
     */
    insertTableRowOnline(requestObj: model.InsertTableRowOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertTableRowOnlineResponse>>;
    /**
     * Insert a watermark to the document.
     * @param requestObj contains request parameters
     */
    insertWatermark(requestObj: model.InsertWatermarkRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Inserts a new watermark image to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkImage(requestObj: model.InsertWatermarkImageRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Inserts a new watermark image to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkImageOnline(requestObj: model.InsertWatermarkImageOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertWatermarkImageOnlineResponse>>;
    /**
     * Insert a watermark to the document.
     * @param requestObj contains request parameters
     */
    insertWatermarkOnline(requestObj: model.InsertWatermarkOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertWatermarkOnlineResponse>>;
    /**
     * Inserts a new watermark text to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkText(requestObj: model.InsertWatermarkTextRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Inserts a new watermark text to the document.
     * @deprecated This operation is deprecated and is used for backward compatibility only. Please use InsertWatermark instead.
     * @param requestObj contains request parameters
     */
    insertWatermarkTextOnline(requestObj: model.InsertWatermarkTextOnlineRequest): Promise<model.WordsIncomingMessage<model.InsertWatermarkTextOnlineResponse>>;
    /**
     * Links headers / footers of the section to the previous one.
     * @param requestObj contains request parameters
     */
    linkHeaderFootersToPrevious(requestObj: model.LinkHeaderFootersToPreviousRequest): Promise<http.IncomingMessage>;
    /**
     * Downloads a document from the Web using URL and saves it to cloud storage in the specified format.
     * @param requestObj contains request parameters
     */
    loadWebDocument(requestObj: model.LoadWebDocumentRequest): Promise<model.WordsIncomingMessage<model.SaveResponse>>;
    /**
     * Merge the section with the next one.
     * @param requestObj contains request parameters
     */
    mergeWithNext(requestObj: model.MergeWithNextRequest): Promise<http.IncomingMessage>;
    /**
     * Merge the section with the next one.
     * @param requestObj contains request parameters
     */
    mergeWithNextOnline(requestObj: model.MergeWithNextOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Move file.
     * @param requestObj contains request parameters
     */
    moveFile(requestObj: model.MoveFileRequest): Promise<http.IncomingMessage>;
    /**
     * Move folder.
     * @param requestObj contains request parameters
     */
    moveFolder(requestObj: model.MoveFolderRequest): Promise<http.IncomingMessage>;
    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param requestObj contains request parameters
     */
    optimizeDocument(requestObj: model.OptimizeDocumentRequest): Promise<http.IncomingMessage>;
    /**
     * Applies document content optimization options, specific to a particular versions of Microsoft Word.
     * @param requestObj contains request parameters
     */
    optimizeDocumentOnline(requestObj: model.OptimizeDocumentOnlineRequest): Promise<model.WordsIncomingMessage<Map<string, Buffer>>>;
    /**
     * Changes the document protection. The previous protection will be overwritten if it exist.
     * @param requestObj contains request parameters
     */
    protectDocument(requestObj: model.ProtectDocumentRequest): Promise<model.WordsIncomingMessage<model.ProtectionDataResponse>>;
    /**
     * Changes the document protection. The previous protection will be overwritten if it exist.
     * @param requestObj contains request parameters
     */
    protectDocumentOnline(requestObj: model.ProtectDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.ProtectDocumentOnlineResponse>>;
    /**
     * Rejects all revisions in the document.
     * @param requestObj contains request parameters
     */
    rejectAllRevisions(requestObj: model.RejectAllRevisionsRequest): Promise<model.WordsIncomingMessage<model.RevisionsModificationResponse>>;
    /**
     * Rejects all revisions in the document.
     * @param requestObj contains request parameters
     */
    rejectAllRevisionsOnline(requestObj: model.RejectAllRevisionsOnlineRequest): Promise<model.WordsIncomingMessage<model.RejectAllRevisionsOnlineResponse>>;
    /**
     * Removes all signatures of the document.
     * @param requestObj contains request parameters
     */
    removeAllSignatures(requestObj: model.RemoveAllSignaturesRequest): Promise<model.WordsIncomingMessage<model.SignatureCollectionResponse>>;
    /**
     * Removes all signatures of the document.
     * @param requestObj contains request parameters
     */
    removeAllSignaturesOnline(requestObj: model.RemoveAllSignaturesOnlineRequest): Promise<model.WordsIncomingMessage<model.RemoveAllSignaturesOnlineResponse>>;
    /**
     * Removes a range from the document.
     * @param requestObj contains request parameters
     */
    removeRange(requestObj: model.RemoveRangeRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Removes a range from the document.
     * @param requestObj contains request parameters
     */
    removeRangeOnline(requestObj: model.RemoveRangeOnlineRequest): Promise<model.WordsIncomingMessage<model.RemoveRangeOnlineResponse>>;
    /**
     * Renders a DrawingObject to the specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObject(requestObj: model.RenderDrawingObjectRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders a DrawingObject to the specified format.
     * @param requestObj contains request parameters
     */
    renderDrawingObjectOnline(requestObj: model.RenderDrawingObjectOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders an OfficeMath object to the specified format.
     * @param requestObj contains request parameters
     */
    renderMathObject(requestObj: model.RenderMathObjectRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders an OfficeMath object to the specified format.
     * @param requestObj contains request parameters
     */
    renderMathObjectOnline(requestObj: model.RenderMathObjectOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders a page to the specified format.
     * @param requestObj contains request parameters
     */
    renderPage(requestObj: model.RenderPageRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders a page to the specified format.
     * @param requestObj contains request parameters
     */
    renderPageOnline(requestObj: model.RenderPageOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders a paragraph to the specified format.
     * @param requestObj contains request parameters
     */
    renderParagraph(requestObj: model.RenderParagraphRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders a paragraph to the specified format.
     * @param requestObj contains request parameters
     */
    renderParagraphOnline(requestObj: model.RenderParagraphOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders a table to the specified format.
     * @param requestObj contains request parameters
     */
    renderTable(requestObj: model.RenderTableRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Renders a table to the specified format.
     * @param requestObj contains request parameters
     */
    renderTableOnline(requestObj: model.RenderTableOnlineRequest): Promise<model.WordsIncomingMessage<Buffer>>;
    /**
     * Replaces text in the document.
     * @param requestObj contains request parameters
     */
    replaceText(requestObj: model.ReplaceTextRequest): Promise<model.WordsIncomingMessage<model.ReplaceTextResponse>>;
    /**
     * Replaces text in the document.
     * @param requestObj contains request parameters
     */
    replaceTextOnline(requestObj: model.ReplaceTextOnlineRequest): Promise<model.WordsIncomingMessage<model.ReplaceTextOnlineResponse>>;
    /**
     * Replaces a range with text in the document.
     * @param requestObj contains request parameters
     */
    replaceWithText(requestObj: model.ReplaceWithTextRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Replaces a range with text in the document.
     * @param requestObj contains request parameters
     */
    replaceWithTextOnline(requestObj: model.ReplaceWithTextOnlineRequest): Promise<model.WordsIncomingMessage<model.ReplaceWithTextOnlineResponse>>;
    /**
     * Clears the font cache.
     * @param requestObj contains request parameters
     */
    resetCache(requestObj: model.ResetCacheRequest): Promise<http.IncomingMessage>;
    /**
     * Converts a document in cloud storage to the specified format.
     * @param requestObj contains request parameters
     */
    saveAs(requestObj: model.SaveAsRequest): Promise<model.WordsIncomingMessage<model.SaveResponse>>;
    /**
     * Converts a document in cloud storage to the specified format.
     * @param requestObj contains request parameters
     */
    saveAsOnline(requestObj: model.SaveAsOnlineRequest): Promise<model.WordsIncomingMessage<model.SaveAsOnlineResponse>>;
    /**
     * Saves a range as a new document.
     * @param requestObj contains request parameters
     */
    saveAsRange(requestObj: model.SaveAsRangeRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Saves a range as a new document.
     * @param requestObj contains request parameters
     */
    saveAsRangeOnline(requestObj: model.SaveAsRangeOnlineRequest): Promise<model.WordsIncomingMessage<model.SaveAsRangeOnlineResponse>>;
    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @deprecated This operation will be removed in the future.
     * @param requestObj contains request parameters
     */
    saveAsTiff(requestObj: model.SaveAsTiffRequest): Promise<model.WordsIncomingMessage<model.SaveResponse>>;
    /**
     * Converts a document in cloud storage to TIFF format using detailed conversion settings.
     * @deprecated This operation will be removed in the future.
     * @param requestObj contains request parameters
     */
    saveAsTiffOnline(requestObj: model.SaveAsTiffOnlineRequest): Promise<model.WordsIncomingMessage<model.SaveAsTiffOnlineResponse>>;
    /**
     * Searches text, specified by the regular expression, in the document.
     * @param requestObj contains request parameters
     */
    search(requestObj: model.SearchRequest): Promise<model.WordsIncomingMessage<model.SearchResponse>>;
    /**
     * Searches text, specified by the regular expression, in the document.
     * @param requestObj contains request parameters
     */
    searchOnline(requestObj: model.SearchOnlineRequest): Promise<model.WordsIncomingMessage<model.SearchResponse>>;
    /**
     * Signs the document with given certificate.
     * @param requestObj contains request parameters
     */
    signDocument(requestObj: model.SignDocumentRequest): Promise<model.WordsIncomingMessage<model.SignatureCollectionResponse>>;
    /**
     * Signs the document with given certificate.
     * @param requestObj contains request parameters
     */
    signDocumentOnline(requestObj: model.SignDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.SignDocumentOnlineResponse>>;
    /**
     * Splits a document into parts and saves them in the specified format.
     * @param requestObj contains request parameters
     */
    splitDocument(requestObj: model.SplitDocumentRequest): Promise<model.WordsIncomingMessage<model.SplitDocumentResponse>>;
    /**
     * Splits a document into parts and saves them in the specified format.
     * @param requestObj contains request parameters
     */
    splitDocumentOnline(requestObj: model.SplitDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.SplitDocumentOnlineResponse>>;
    /**
     * Translate a node id to a node path.
     * @param requestObj contains request parameters
     */
    translateNodeId(requestObj: model.TranslateNodeIdRequest): Promise<model.WordsIncomingMessage<model.TranslateNodeIdResponse>>;
    /**
     * Translate a node id to a node path.
     * @param requestObj contains request parameters
     */
    translateNodeIdOnline(requestObj: model.TranslateNodeIdOnlineRequest): Promise<model.WordsIncomingMessage<model.TranslateNodeIdResponse>>;
    /**
     * Removes protection from the document.
     * @param requestObj contains request parameters
     */
    unprotectDocument(requestObj: model.UnprotectDocumentRequest): Promise<model.WordsIncomingMessage<model.ProtectionDataResponse>>;
    /**
     * Removes protection from the document.
     * @param requestObj contains request parameters
     */
    unprotectDocumentOnline(requestObj: model.UnprotectDocumentOnlineRequest): Promise<model.WordsIncomingMessage<model.UnprotectDocumentOnlineResponse>>;
    /**
     * Updates a bookmark in the document.
     * @param requestObj contains request parameters
     */
    updateBookmark(requestObj: model.UpdateBookmarkRequest): Promise<model.WordsIncomingMessage<model.BookmarkResponse>>;
    /**
     * Updates a bookmark in the document.
     * @param requestObj contains request parameters
     */
    updateBookmarkOnline(requestObj: model.UpdateBookmarkOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateBookmarkOnlineResponse>>;
    /**
     * Updates a border in the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    updateBorder(requestObj: model.UpdateBorderRequest): Promise<model.WordsIncomingMessage<model.BorderResponse>>;
    /**
     * Updates a border in the document node.
     * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
     * @param requestObj contains request parameters
     */
    updateBorderOnline(requestObj: model.UpdateBorderOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateBorderOnlineResponse>>;
    /**
     * Updates a comment in the document.
     * @param requestObj contains request parameters
     */
    updateComment(requestObj: model.UpdateCommentRequest): Promise<model.WordsIncomingMessage<model.CommentResponse>>;
    /**
     * Updates a comment in the document.
     * @param requestObj contains request parameters
     */
    updateCommentOnline(requestObj: model.UpdateCommentOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateCommentOnlineResponse>>;
    /**
     * Updates the custom xml part in the document.
     * @param requestObj contains request parameters
     */
    updateCustomXmlPart(requestObj: model.UpdateCustomXmlPartRequest): Promise<model.WordsIncomingMessage<model.CustomXmlPartResponse>>;
    /**
     * Updates the custom xml part in the document.
     * @param requestObj contains request parameters
     */
    updateCustomXmlPartOnline(requestObj: model.UpdateCustomXmlPartOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateCustomXmlPartOnlineResponse>>;
    /**
     * Updates a DrawingObject in the document node.
     * @param requestObj contains request parameters
     */
    updateDrawingObject(requestObj: model.UpdateDrawingObjectRequest): Promise<model.WordsIncomingMessage<model.DrawingObjectResponse>>;
    /**
     * Updates a DrawingObject in the document node.
     * @param requestObj contains request parameters
     */
    updateDrawingObjectOnline(requestObj: model.UpdateDrawingObjectOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateDrawingObjectOnlineResponse>>;
    /**
     * Updates a field in the document node.
     * @param requestObj contains request parameters
     */
    updateField(requestObj: model.UpdateFieldRequest): Promise<model.WordsIncomingMessage<model.FieldResponse>>;
    /**
     * Updates a field in the document node.
     * @param requestObj contains request parameters
     */
    updateFieldOnline(requestObj: model.UpdateFieldOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateFieldOnlineResponse>>;
    /**
     * Reevaluates field values in the document.
     * @param requestObj contains request parameters
     */
    updateFields(requestObj: model.UpdateFieldsRequest): Promise<model.WordsIncomingMessage<model.DocumentResponse>>;
    /**
     * Reevaluates field values in the document.
     * @param requestObj contains request parameters
     */
    updateFieldsOnline(requestObj: model.UpdateFieldsOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateFieldsOnlineResponse>>;
    /**
     * Updates a footnote in the document node.
     * @param requestObj contains request parameters
     */
    updateFootnote(requestObj: model.UpdateFootnoteRequest): Promise<model.WordsIncomingMessage<model.FootnoteResponse>>;
    /**
     * Updates a footnote in the document node.
     * @param requestObj contains request parameters
     */
    updateFootnoteOnline(requestObj: model.UpdateFootnoteOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateFootnoteOnlineResponse>>;
    /**
     * Updates a form field in the document node.
     * @param requestObj contains request parameters
     */
    updateFormField(requestObj: model.UpdateFormFieldRequest): Promise<model.WordsIncomingMessage<model.FormFieldResponse>>;
    /**
     * Updates a form field in the document node.
     * @param requestObj contains request parameters
     */
    updateFormFieldOnline(requestObj: model.UpdateFormFieldOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateFormFieldOnlineResponse>>;
    /**
     * Updates a list in the document.
     * @param requestObj contains request parameters
     */
    updateList(requestObj: model.UpdateListRequest): Promise<model.WordsIncomingMessage<model.ListResponse>>;
    /**
     * Updates the level of a List element in the document.
     * @param requestObj contains request parameters
     */
    updateListLevel(requestObj: model.UpdateListLevelRequest): Promise<model.WordsIncomingMessage<model.ListResponse>>;
    /**
     * Updates the level of a List element in the document.
     * @param requestObj contains request parameters
     */
    updateListLevelOnline(requestObj: model.UpdateListLevelOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateListLevelOnlineResponse>>;
    /**
     * Updates a list in the document.
     * @param requestObj contains request parameters
     */
    updateListOnline(requestObj: model.UpdateListOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateListOnlineResponse>>;
    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphFormat(requestObj: model.UpdateParagraphFormatRequest): Promise<model.WordsIncomingMessage<model.ParagraphFormatResponse>>;
    /**
     * Updates the formatting properties of a paragraph in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphFormatOnline(requestObj: model.UpdateParagraphFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateParagraphFormatOnlineResponse>>;
    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphListFormat(requestObj: model.UpdateParagraphListFormatRequest): Promise<model.WordsIncomingMessage<model.ParagraphListFormatResponse>>;
    /**
     * Updates the formatting properties of a paragraph list in the document node.
     * @param requestObj contains request parameters
     */
    updateParagraphListFormatOnline(requestObj: model.UpdateParagraphListFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateParagraphListFormatOnlineResponse>>;
    /**
     * Updates a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRun(requestObj: model.UpdateRunRequest): Promise<model.WordsIncomingMessage<model.RunResponse>>;
    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRunFont(requestObj: model.UpdateRunFontRequest): Promise<model.WordsIncomingMessage<model.FontResponse>>;
    /**
     * Updates the font properties of a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRunFontOnline(requestObj: model.UpdateRunFontOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateRunFontOnlineResponse>>;
    /**
     * Updates a Run object in the paragraph.
     * @param requestObj contains request parameters
     */
    updateRunOnline(requestObj: model.UpdateRunOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateRunOnlineResponse>>;
    /**
     * Updates the page setup of a section in the document.
     * @param requestObj contains request parameters
     */
    updateSectionPageSetup(requestObj: model.UpdateSectionPageSetupRequest): Promise<model.WordsIncomingMessage<model.SectionPageSetupResponse>>;
    /**
     * Updates the page setup of a section in the document.
     * @param requestObj contains request parameters
     */
    updateSectionPageSetupOnline(requestObj: model.UpdateSectionPageSetupOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateSectionPageSetupOnlineResponse>>;
    /**
     * Updates a StructuredDocumentTag (SDT) in the document node.
     * @param requestObj contains request parameters
     */
    updateStructuredDocumentTag(requestObj: model.UpdateStructuredDocumentTagRequest): Promise<model.WordsIncomingMessage<model.StructuredDocumentTagResponse>>;
    /**
     * Updates a StructuredDocumentTag (SDT) in the document node.
     * @param requestObj contains request parameters
     */
    updateStructuredDocumentTagOnline(requestObj: model.UpdateStructuredDocumentTagOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateStructuredDocumentTagOnlineResponse>>;
    /**
     * Updates a style in the document.
     * @param requestObj contains request parameters
     */
    updateStyle(requestObj: model.UpdateStyleRequest): Promise<model.WordsIncomingMessage<model.StyleResponse>>;
    /**
     * Updates a style in the document.
     * @param requestObj contains request parameters
     */
    updateStyleOnline(requestObj: model.UpdateStyleOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateStyleOnlineResponse>>;
    /**
     * Updates the formatting properties of a cell in the table row.
     * @param requestObj contains request parameters
     */
    updateTableCellFormat(requestObj: model.UpdateTableCellFormatRequest): Promise<model.WordsIncomingMessage<model.TableCellFormatResponse>>;
    /**
     * Updates the formatting properties of a cell in the table row.
     * @param requestObj contains request parameters
     */
    updateTableCellFormatOnline(requestObj: model.UpdateTableCellFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateTableCellFormatOnlineResponse>>;
    /**
     * Updates properties of a table in the document node.
     * @param requestObj contains request parameters
     */
    updateTableProperties(requestObj: model.UpdateTablePropertiesRequest): Promise<model.WordsIncomingMessage<model.TablePropertiesResponse>>;
    /**
     * Updates properties of a table in the document node.
     * @param requestObj contains request parameters
     */
    updateTablePropertiesOnline(requestObj: model.UpdateTablePropertiesOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateTablePropertiesOnlineResponse>>;
    /**
     * Updates the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    updateTableRowFormat(requestObj: model.UpdateTableRowFormatRequest): Promise<model.WordsIncomingMessage<model.TableRowFormatResponse>>;
    /**
     * Updates the formatting properties of a table row.
     * @param requestObj contains request parameters
     */
    updateTableRowFormatOnline(requestObj: model.UpdateTableRowFormatOnlineRequest): Promise<model.WordsIncomingMessage<model.UpdateTableRowFormatOnlineResponse>>;
    /**
     * Upload file.
     * @param requestObj contains request parameters
     */
    uploadFile(requestObj: model.UploadFileRequest): Promise<model.WordsIncomingMessage<model.FilesUploadResult>>;
    /**
     * Batch request.
     * @param requests contains requests parameters
     */
    batch(...requests: BatchPartRequest[]): Promise<model.WordsIncomingMessage<any[]>>;
    /**
     * Batch request withoit returning of intermediate results.
     * @param requests contains requests parameters
     */
    batchWithoutIntermediateResults(...requests: BatchPartRequest[]): Promise<model.WordsIncomingMessage<any[]>>;
    /**
     * Batch request.
     * @param displayIntermediateResults display intermediate results or not
     * @param requests contains requests parameters
     */
    private _batchInternal;
}
