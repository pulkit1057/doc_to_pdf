"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="pdfSaveOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PdfSaveOptionsData = exports.importsMapPdfSaveOptionsData = void 0;
const downsampleOptionsData_1 = require("./downsampleOptionsData");
const fixedPageSaveOptionsData_1 = require("./fixedPageSaveOptionsData");
const outlineOptionsData_1 = require("./outlineOptionsData");
const pdfDigitalSignatureDetailsData_1 = require("./pdfDigitalSignatureDetailsData");
const pdfEncryptionDetailsData_1 = require("./pdfEncryptionDetailsData");
exports.importsMapPdfSaveOptionsData = {
    DownsampleOptionsData: downsampleOptionsData_1.DownsampleOptionsData,
    FixedPageSaveOptionsData: fixedPageSaveOptionsData_1.FixedPageSaveOptionsData,
    OutlineOptionsData: outlineOptionsData_1.OutlineOptionsData,
    PdfDigitalSignatureDetailsData: pdfDigitalSignatureDetailsData_1.PdfDigitalSignatureDetailsData,
    PdfEncryptionDetailsData: pdfEncryptionDetailsData_1.PdfEncryptionDetailsData,
};
/**
 * Container class for pdf save options.
 */
class PdfSaveOptionsData extends fixedPageSaveOptionsData_1.FixedPageSaveOptionsData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PdfSaveOptionsData.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        this.saveFormat = 'pdf';
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a, _b, _c, _d;
        super.validate();
        (_a = this.digitalSignatureDetails) === null || _a === void 0 ? void 0 : _a.validate();
        (_b = this.downsampleOptions) === null || _b === void 0 ? void 0 : _b.validate();
        (_c = this.encryptionDetails) === null || _c === void 0 ? void 0 : _c.validate();
        (_d = this.outlineOptions) === null || _d === void 0 ? void 0 : _d.validate();
    }
}
exports.PdfSaveOptionsData = PdfSaveOptionsData;
/**
 * Attribute type map
 */
PdfSaveOptionsData.attributeTypeMap = [
    {
        name: "cacheBackgroundGraphics",
        baseName: "CacheBackgroundGraphics",
        type: "boolean",
    },
    {
        name: "compliance",
        baseName: "Compliance",
        type: "PdfSaveOptionsData.ComplianceEnum",
    },
    {
        name: "createNoteHyperlinks",
        baseName: "CreateNoteHyperlinks",
        type: "boolean",
    },
    {
        name: "customPropertiesExport",
        baseName: "CustomPropertiesExport",
        type: "PdfSaveOptionsData.CustomPropertiesExportEnum",
    },
    {
        name: "digitalSignatureDetails",
        baseName: "DigitalSignatureDetails",
        type: "PdfDigitalSignatureDetailsData",
    },
    {
        name: "displayDocTitle",
        baseName: "DisplayDocTitle",
        type: "boolean",
    },
    {
        name: "downsampleOptions",
        baseName: "DownsampleOptions",
        type: "DownsampleOptionsData",
    },
    {
        name: "embedAttachments",
        baseName: "EmbedAttachments",
        type: "boolean",
    },
    {
        name: "embedFullFonts",
        baseName: "EmbedFullFonts",
        type: "boolean",
    },
    {
        name: "encryptionDetails",
        baseName: "EncryptionDetails",
        type: "PdfEncryptionDetailsData",
    },
    {
        name: "exportDocumentStructure",
        baseName: "ExportDocumentStructure",
        type: "boolean",
    },
    {
        name: "exportLanguageToSpanTag",
        baseName: "ExportLanguageToSpanTag",
        type: "boolean",
    },
    {
        name: "fontEmbeddingMode",
        baseName: "FontEmbeddingMode",
        type: "PdfSaveOptionsData.FontEmbeddingModeEnum",
    },
    {
        name: "headerFooterBookmarksExportMode",
        baseName: "HeaderFooterBookmarksExportMode",
        type: "PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum",
    },
    {
        name: "imageColorSpaceExportMode",
        baseName: "ImageColorSpaceExportMode",
        type: "PdfSaveOptionsData.ImageColorSpaceExportModeEnum",
    },
    {
        name: "imageCompression",
        baseName: "ImageCompression",
        type: "string",
    },
    {
        name: "interpolateImages",
        baseName: "InterpolateImages",
        type: "boolean",
    },
    {
        name: "openHyperlinksInNewWindow",
        baseName: "OpenHyperlinksInNewWindow",
        type: "boolean",
    },
    {
        name: "outlineOptions",
        baseName: "OutlineOptions",
        type: "OutlineOptionsData",
    },
    {
        name: "pageMode",
        baseName: "PageMode",
        type: "PdfSaveOptionsData.PageModeEnum",
    },
    {
        name: "preblendImages",
        baseName: "PreblendImages",
        type: "boolean",
    },
    {
        name: "preserveFormFields",
        baseName: "PreserveFormFields",
        type: "boolean",
    },
    {
        name: "textCompression",
        baseName: "TextCompression",
        type: "PdfSaveOptionsData.TextCompressionEnum",
    },
    {
        name: "useBookFoldPrintingSettings",
        baseName: "UseBookFoldPrintingSettings",
        type: "boolean",
    },
    {
        name: "useCoreFonts",
        baseName: "UseCoreFonts",
        type: "boolean",
    },
    {
        name: "useSdtTagAsFormFieldName",
        baseName: "UseSdtTagAsFormFieldName",
        type: "boolean",
    },
    {
        name: "zoomBehavior",
        baseName: "ZoomBehavior",
        type: "PdfSaveOptionsData.ZoomBehaviorEnum",
    },
    {
        name: "zoomFactor",
        baseName: "ZoomFactor",
        type: "number",
    }
];
/**
 * Enums for PdfSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (PdfSaveOptionsData) {
    let ComplianceEnum;
    (function (ComplianceEnum) {
        ComplianceEnum[ComplianceEnum["Pdf17"] = 'Pdf17'] = "Pdf17";
        ComplianceEnum[ComplianceEnum["Pdf20"] = 'Pdf20'] = "Pdf20";
        ComplianceEnum[ComplianceEnum["PdfA1a"] = 'PdfA1a'] = "PdfA1a";
        ComplianceEnum[ComplianceEnum["PdfA1b"] = 'PdfA1b'] = "PdfA1b";
        ComplianceEnum[ComplianceEnum["PdfA2a"] = 'PdfA2a'] = "PdfA2a";
        ComplianceEnum[ComplianceEnum["PdfA2u"] = 'PdfA2u'] = "PdfA2u";
        ComplianceEnum[ComplianceEnum["PdfA4"] = 'PdfA4'] = "PdfA4";
        ComplianceEnum[ComplianceEnum["PdfA4Ua2"] = 'PdfA4Ua2'] = "PdfA4Ua2";
        ComplianceEnum[ComplianceEnum["PdfUa1"] = 'PdfUa1'] = "PdfUa1";
        ComplianceEnum[ComplianceEnum["PdfUa2"] = 'PdfUa2'] = "PdfUa2";
    })(ComplianceEnum = PdfSaveOptionsData.ComplianceEnum || (PdfSaveOptionsData.ComplianceEnum = {}));
    let CustomPropertiesExportEnum;
    (function (CustomPropertiesExportEnum) {
        CustomPropertiesExportEnum[CustomPropertiesExportEnum["None"] = 'None'] = "None";
        CustomPropertiesExportEnum[CustomPropertiesExportEnum["Standard"] = 'Standard'] = "Standard";
        CustomPropertiesExportEnum[CustomPropertiesExportEnum["Metadata"] = 'Metadata'] = "Metadata";
    })(CustomPropertiesExportEnum = PdfSaveOptionsData.CustomPropertiesExportEnum || (PdfSaveOptionsData.CustomPropertiesExportEnum = {}));
    let FontEmbeddingModeEnum;
    (function (FontEmbeddingModeEnum) {
        FontEmbeddingModeEnum[FontEmbeddingModeEnum["EmbedAll"] = 'EmbedAll'] = "EmbedAll";
        FontEmbeddingModeEnum[FontEmbeddingModeEnum["EmbedNonstandard"] = 'EmbedNonstandard'] = "EmbedNonstandard";
        FontEmbeddingModeEnum[FontEmbeddingModeEnum["EmbedNone"] = 'EmbedNone'] = "EmbedNone";
    })(FontEmbeddingModeEnum = PdfSaveOptionsData.FontEmbeddingModeEnum || (PdfSaveOptionsData.FontEmbeddingModeEnum = {}));
    let HeaderFooterBookmarksExportModeEnum;
    (function (HeaderFooterBookmarksExportModeEnum) {
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["None"] = 'None'] = "None";
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["First"] = 'First'] = "First";
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["All"] = 'All'] = "All";
    })(HeaderFooterBookmarksExportModeEnum = PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum || (PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum = {}));
    let ImageColorSpaceExportModeEnum;
    (function (ImageColorSpaceExportModeEnum) {
        ImageColorSpaceExportModeEnum[ImageColorSpaceExportModeEnum["Auto"] = 'Auto'] = "Auto";
        ImageColorSpaceExportModeEnum[ImageColorSpaceExportModeEnum["SimpleCmyk"] = 'SimpleCmyk'] = "SimpleCmyk";
    })(ImageColorSpaceExportModeEnum = PdfSaveOptionsData.ImageColorSpaceExportModeEnum || (PdfSaveOptionsData.ImageColorSpaceExportModeEnum = {}));
    let PageModeEnum;
    (function (PageModeEnum) {
        PageModeEnum[PageModeEnum["UseNone"] = 'UseNone'] = "UseNone";
        PageModeEnum[PageModeEnum["UseOutlines"] = 'UseOutlines'] = "UseOutlines";
        PageModeEnum[PageModeEnum["UseThumbs"] = 'UseThumbs'] = "UseThumbs";
        PageModeEnum[PageModeEnum["FullScreen"] = 'FullScreen'] = "FullScreen";
        PageModeEnum[PageModeEnum["UseOC"] = 'UseOC'] = "UseOC";
        PageModeEnum[PageModeEnum["UseAttachments"] = 'UseAttachments'] = "UseAttachments";
    })(PageModeEnum = PdfSaveOptionsData.PageModeEnum || (PdfSaveOptionsData.PageModeEnum = {}));
    let TextCompressionEnum;
    (function (TextCompressionEnum) {
        TextCompressionEnum[TextCompressionEnum["None"] = 'None'] = "None";
        TextCompressionEnum[TextCompressionEnum["Flate"] = 'Flate'] = "Flate";
    })(TextCompressionEnum = PdfSaveOptionsData.TextCompressionEnum || (PdfSaveOptionsData.TextCompressionEnum = {}));
    let ZoomBehaviorEnum;
    (function (ZoomBehaviorEnum) {
        ZoomBehaviorEnum[ZoomBehaviorEnum["None"] = 'None'] = "None";
        ZoomBehaviorEnum[ZoomBehaviorEnum["ZoomFactor"] = 'ZoomFactor'] = "ZoomFactor";
        ZoomBehaviorEnum[ZoomBehaviorEnum["FitPage"] = 'FitPage'] = "FitPage";
        ZoomBehaviorEnum[ZoomBehaviorEnum["FitWidth"] = 'FitWidth'] = "FitWidth";
        ZoomBehaviorEnum[ZoomBehaviorEnum["FitHeight"] = 'FitHeight'] = "FitHeight";
        ZoomBehaviorEnum[ZoomBehaviorEnum["FitBox"] = 'FitBox'] = "FitBox";
    })(ZoomBehaviorEnum = PdfSaveOptionsData.ZoomBehaviorEnum || (PdfSaveOptionsData.ZoomBehaviorEnum = {}));
})(PdfSaveOptionsData = exports.PdfSaveOptionsData || (exports.PdfSaveOptionsData = {}));
// tslint:enable:quotemark
