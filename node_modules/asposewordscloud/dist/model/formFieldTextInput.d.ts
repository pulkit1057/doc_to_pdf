import { AttributeInfo } from '../internal/attributeInfo';
import { FormField } from './formField';
export declare const importsMapFormFieldTextInput: {
    FormField: typeof FormField;
};
/**
 * FormField text input element.
 */
export declare class FormFieldTextInput extends FormField {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets text formatting for the text form field.
     * If the text form field contains regular text, then valid format strings are "", "UPPERCASE", "LOWERCASE", "FIRST CAPITAL" and "TITLE CASE". The strings are case-insensitive.If the text form field contains a number or a date/time value, then valid format strings are number or date and time format strings.
     */
    textInputFormat: string;
    /**
     * Gets or sets the type of the text form field.
     */
    textInputType: FormFieldTextInput.TextInputTypeEnum;
    /**
     * Gets or sets the default string or a calculation expression of the text form field.
     * The meaning of this property depends on the value of the TextInputType property.When TextInputType is Regular or Number, this string specifies the default string for the text form field. This string is the content that Microsoft Word will display in the document when the form field is empty.When TextInputType is Calculated, then this string holds the expression to be calculated. The expression needs to be a formula valid according to Microsoft Word formula field requirements. When you set a new expression using this property, Aspose.Words calculates the formula result automatically and inserts it into the form field.
     */
    textInputDefault: string;
    /**
     * Gets or sets the maximum length for the text field. Zero when the length is not limited.
     */
    maxLength: number;
    constructor(init?: Partial<FormFieldTextInput>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for FormFieldTextInput
 */
export declare namespace FormFieldTextInput {
    enum TextInputTypeEnum {
        Regular,
        Number,
        Date,
        CurrentDate,
        CurrentTime,
        Calculated
    }
}
