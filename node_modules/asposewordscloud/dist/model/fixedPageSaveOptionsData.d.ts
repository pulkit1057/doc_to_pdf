import { AttributeInfo } from '../internal/attributeInfo';
import { MetafileRenderingOptionsData } from './metafileRenderingOptionsData';
import { SaveOptionsData } from './saveOptionsData';
export declare const importsMapFixedPageSaveOptionsData: {
    MetafileRenderingOptionsData: typeof MetafileRenderingOptionsData;
    SaveOptionsData: typeof SaveOptionsData;
};
/**
 * Contains common options that can be specified when saving a document into fixed page formats (PDF, XPS, images etc).
 */
export declare abstract class FixedPageSaveOptionsData extends SaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the value determining how colors are rendered.
     * { Normal | Grayscale}.
     * The default value is Normal.
     * This property is used when the document is exported to fixed page formats.
     */
    colorMode: FixedPageSaveOptionsData.ColorModeEnum;
    /**
     * Gets or sets the quality of the JPEG images inside PDF document.
     */
    jpegQuality: number;
    /**
     * Gets or sets the metafile rendering options.
     */
    metafileRenderingOptions: MetafileRenderingOptionsData;
    /**
     * Gets or sets the symbol set, that is used to represent numbers while rendering to fixed page formats.
     */
    numeralFormat: FixedPageSaveOptionsData.NumeralFormatEnum;
    /**
     * Gets or sets a value indicating whether it is required to optimize output of XPS.
     * If this flag is set redundant nested canvases and empty canvases are removed, also neighbor glyphs with the same formatting are concatenated.
     * Note: The accuracy of the content display may be affected if this property is set to true.. The default value is false.
     */
    optimizeOutput: boolean;
    /**
     * Gets or sets the number of pages to render.
     */
    pageCount: number;
    /**
     * Gets or sets the 0-based index of the first page to render.
     */
    pageIndex: number;
    constructor(init?: Partial<FixedPageSaveOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for FixedPageSaveOptionsData
 */
export declare namespace FixedPageSaveOptionsData {
    enum ColorModeEnum {
        Normal,
        Grayscale
    }
    enum NumeralFormatEnum {
        European,
        ArabicIndic,
        EasternArabicIndic,
        Context,
        System
    }
}
