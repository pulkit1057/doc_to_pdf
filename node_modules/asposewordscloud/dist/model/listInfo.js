"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="listInfo.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListInfo = exports.importsMapListInfo = void 0;
const linkElement_1 = require("./linkElement");
const listLevels_1 = require("./listLevels");
const style_1 = require("./style");
exports.importsMapListInfo = {
    LinkElement: linkElement_1.LinkElement,
    ListLevels: listLevels_1.ListLevels,
    Style: style_1.Style,
};
/**
 * DTO container with a single document list.
 */
class ListInfo extends linkElement_1.LinkElement {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ListInfo.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a, _b;
        super.validate();
        if (this.listId === null || this.listId === undefined) {
            throw new Error('Property ListId in ListInfo is required.');
        }
        if (this.isMultiLevel === null || this.isMultiLevel === undefined) {
            throw new Error('Property IsMultiLevel in ListInfo is required.');
        }
        if (this.isRestartAtEachSection === null || this.isRestartAtEachSection === undefined) {
            throw new Error('Property IsRestartAtEachSection in ListInfo is required.');
        }
        if (this.isListStyleDefinition === null || this.isListStyleDefinition === undefined) {
            throw new Error('Property IsListStyleDefinition in ListInfo is required.');
        }
        if (this.isListStyleReference === null || this.isListStyleReference === undefined) {
            throw new Error('Property IsListStyleReference in ListInfo is required.');
        }
        (_a = this.style) === null || _a === void 0 ? void 0 : _a.validate();
        (_b = this.listLevels) === null || _b === void 0 ? void 0 : _b.validate();
    }
}
exports.ListInfo = ListInfo;
/**
 * Attribute type map
 */
ListInfo.attributeTypeMap = [
    {
        name: "listId",
        baseName: "ListId",
        type: "number",
    },
    {
        name: "isMultiLevel",
        baseName: "IsMultiLevel",
        type: "boolean",
    },
    {
        name: "isRestartAtEachSection",
        baseName: "IsRestartAtEachSection",
        type: "boolean",
    },
    {
        name: "isListStyleDefinition",
        baseName: "IsListStyleDefinition",
        type: "boolean",
    },
    {
        name: "isListStyleReference",
        baseName: "IsListStyleReference",
        type: "boolean",
    },
    {
        name: "style",
        baseName: "Style",
        type: "Style",
    },
    {
        name: "listLevels",
        baseName: "ListLevels",
        type: "ListLevels",
    }
];
