"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="markdownSaveOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkdownSaveOptionsData = exports.importsMapMarkdownSaveOptionsData = void 0;
const txtSaveOptionsBaseData_1 = require("./txtSaveOptionsBaseData");
exports.importsMapMarkdownSaveOptionsData = {
    TxtSaveOptionsBaseData: txtSaveOptionsBaseData_1.TxtSaveOptionsBaseData,
};
/**
 * Container class for markdown save options.
 */
class MarkdownSaveOptionsData extends txtSaveOptionsBaseData_1.TxtSaveOptionsBaseData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(MarkdownSaveOptionsData.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        this.saveFormat = 'md';
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        super.validate();
    }
}
exports.MarkdownSaveOptionsData = MarkdownSaveOptionsData;
/**
 * Attribute type map
 */
MarkdownSaveOptionsData.attributeTypeMap = [
    {
        name: "tableContentAlignment",
        baseName: "TableContentAlignment",
        type: "MarkdownSaveOptionsData.TableContentAlignmentEnum",
    }
];
/**
 * Enums for MarkdownSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (MarkdownSaveOptionsData) {
    let TableContentAlignmentEnum;
    (function (TableContentAlignmentEnum) {
        TableContentAlignmentEnum[TableContentAlignmentEnum["Auto"] = 'Auto'] = "Auto";
        TableContentAlignmentEnum[TableContentAlignmentEnum["Left"] = 'Left'] = "Left";
        TableContentAlignmentEnum[TableContentAlignmentEnum["Center"] = 'Center'] = "Center";
        TableContentAlignmentEnum[TableContentAlignmentEnum["Right"] = 'Right'] = "Right";
    })(TableContentAlignmentEnum = MarkdownSaveOptionsData.TableContentAlignmentEnum || (MarkdownSaveOptionsData.TableContentAlignmentEnum = {}));
})(MarkdownSaveOptionsData = exports.MarkdownSaveOptionsData || (exports.MarkdownSaveOptionsData = {}));
// tslint:enable:quotemark
