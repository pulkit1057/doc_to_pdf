"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="structuredDocumentTagInsert.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructuredDocumentTagInsert = exports.importsMapStructuredDocumentTagInsert = void 0;
const position_1 = require("./position");
const structuredDocumentTagBase_1 = require("./structuredDocumentTagBase");
exports.importsMapStructuredDocumentTagInsert = {
    Position: position_1.Position,
    StructuredDocumentTagBase: structuredDocumentTagBase_1.StructuredDocumentTagBase,
};
/**
 * DTO container with a StructuredDocumentTag.
 */
class StructuredDocumentTagInsert extends structuredDocumentTagBase_1.StructuredDocumentTagBase {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(StructuredDocumentTagInsert.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        super.validate();
        if (this.level === null || this.level === undefined) {
            throw new Error('Property Level in StructuredDocumentTagInsert is required.');
        }
        if (this.sdtType === null || this.sdtType === undefined) {
            throw new Error('Property SdtType in StructuredDocumentTagInsert is required.');
        }
        (_a = this.position) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.StructuredDocumentTagInsert = StructuredDocumentTagInsert;
/**
 * Attribute type map
 */
StructuredDocumentTagInsert.attributeTypeMap = [
    {
        name: "level",
        baseName: "Level",
        type: "StructuredDocumentTagInsert.LevelEnum",
    },
    {
        name: "sdtType",
        baseName: "SdtType",
        type: "StructuredDocumentTagInsert.SdtTypeEnum",
    },
    {
        name: "position",
        baseName: "Position",
        type: "Position",
    }
];
/**
 * Enums for StructuredDocumentTagInsert
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (StructuredDocumentTagInsert) {
    let LevelEnum;
    (function (LevelEnum) {
        LevelEnum[LevelEnum["Unknown"] = 'Unknown'] = "Unknown";
        LevelEnum[LevelEnum["Inline"] = 'Inline'] = "Inline";
        LevelEnum[LevelEnum["Block"] = 'Block'] = "Block";
        LevelEnum[LevelEnum["Row"] = 'Row'] = "Row";
        LevelEnum[LevelEnum["Cell"] = 'Cell'] = "Cell";
    })(LevelEnum = StructuredDocumentTagInsert.LevelEnum || (StructuredDocumentTagInsert.LevelEnum = {}));
    let SdtTypeEnum;
    (function (SdtTypeEnum) {
        SdtTypeEnum[SdtTypeEnum["None"] = 'None'] = "None";
        SdtTypeEnum[SdtTypeEnum["Bibliography"] = 'Bibliography'] = "Bibliography";
        SdtTypeEnum[SdtTypeEnum["Citation"] = 'Citation'] = "Citation";
        SdtTypeEnum[SdtTypeEnum["Equation"] = 'Equation'] = "Equation";
        SdtTypeEnum[SdtTypeEnum["DropDownList"] = 'DropDownList'] = "DropDownList";
        SdtTypeEnum[SdtTypeEnum["ComboBox"] = 'ComboBox'] = "ComboBox";
        SdtTypeEnum[SdtTypeEnum["Date"] = 'Date'] = "Date";
        SdtTypeEnum[SdtTypeEnum["BuildingBlockGallery"] = 'BuildingBlockGallery'] = "BuildingBlockGallery";
        SdtTypeEnum[SdtTypeEnum["DocPartObj"] = 'DocPartObj'] = "DocPartObj";
        SdtTypeEnum[SdtTypeEnum["Group"] = 'Group'] = "Group";
        SdtTypeEnum[SdtTypeEnum["Picture"] = 'Picture'] = "Picture";
        SdtTypeEnum[SdtTypeEnum["RichText"] = 'RichText'] = "RichText";
        SdtTypeEnum[SdtTypeEnum["PlainText"] = 'PlainText'] = "PlainText";
        SdtTypeEnum[SdtTypeEnum["Checkbox"] = 'Checkbox'] = "Checkbox";
        SdtTypeEnum[SdtTypeEnum["RepeatingSection"] = 'RepeatingSection'] = "RepeatingSection";
        SdtTypeEnum[SdtTypeEnum["RepeatingSectionItem"] = 'RepeatingSectionItem'] = "RepeatingSectionItem";
        SdtTypeEnum[SdtTypeEnum["EntityPicker"] = 'EntityPicker'] = "EntityPicker";
    })(SdtTypeEnum = StructuredDocumentTagInsert.SdtTypeEnum || (StructuredDocumentTagInsert.SdtTypeEnum = {}));
})(StructuredDocumentTagInsert = exports.StructuredDocumentTagInsert || (exports.StructuredDocumentTagInsert = {}));
// tslint:enable:quotemark
