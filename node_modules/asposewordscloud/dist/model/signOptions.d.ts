import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
export declare const importsMapSignOptions: {};
/**
 * Container class for digital signature options.
 */
export declare class SignOptions implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets comments on the digital signature. Default value is empty string.
     */
    comments: string;
    /**
     * Gets or sets the password to decrypt source document. Default value is empty string.
     */
    decryptionPassword: string;
    /**
     * Gets or sets the class Guid of the signature cryptography provider. Default value is Empty (all zeroes) Guid.
     */
    providerId: string;
    /**
     * Gets or sets user defined signature line Guid. Default value is Empty (all zeroes) Guid.
     */
    signatureLineId: string;
    /**
     * Gets or sets the image that will be shown in associated SignatureLine. Default value is empty string.
     */
    signatureLineImageFilename: string;
    /**
     * Gets or sets the date of signing. Default value is current time (Now).
     */
    signTime: Date;
    constructor(init?: Partial<SignOptions>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
