import { AttributeInfo } from '../internal/attributeInfo';
import { SaveOptionsData } from './saveOptionsData';
export declare const importsMapHtmlSaveOptionsData: {
    SaveOptionsData: typeof SaveOptionsData;
};
/**
 * Container class for html save options.
 */
export declare class HtmlSaveOptionsData extends SaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets a value indicating whether negative left and right indents of paragraphs are allowed (not normalized).
     */
    allowNegativeIndent: boolean;
    /**
     * Gets or sets the prefix which is added to all CSS class names. The default value is an empty string and generated CSS class names have no common prefix.
     * If this value is not empty, all CSS classes generated by Aspose.Words will start with the specified prefix.This might be useful, for example, if you add custom CSS to generated documents and want to prevent class name conflicts.
     * If the value is not null or empty, it must be a valid CSS identifier.
     */
    cssClassNamePrefix: string;
    /**
     * Gets or sets the name of the CSS file written when the document is exported to HTML.
     */
    cssStyleSheetFileName: string;
    /**
     * Gets or sets the option that controls how the CSS styles are exported.
     */
    cssStyleSheetType: HtmlSaveOptionsData.CssStyleSheetTypeEnum;
    /**
     * Gets or sets the option that controls how the document should be split when saving.
     */
    documentSplitCriteria: HtmlSaveOptionsData.DocumentSplitCriteriaEnum;
    /**
     * Gets or sets the maximum level of headings at which to split the document.
     */
    documentSplitHeadingLevel: number;
    /**
     * Gets or sets the character encoding to use when exporting.
     */
    encoding: string;
    /**
     * Gets or sets a value indicating whether to export built-in and custom document properties.
     */
    exportDocumentProperties: boolean;
    /**
     * Gets or sets the flag, that controls how drop-down form fields are saved to HTML.
     * The default value is false.
     * When set to true, exports drop-down form fields as normal text.
     * When false, exports drop-down form fields as SELECT element in HTML.
     */
    exportDropDownFormFieldAsText: boolean;
    /**
     * Gets or sets a value indicating whether font resources should be exported.
     */
    exportFontResources: boolean;
    /**
     * Gets or sets a value indicating whether fonts resources should be embedded to HTML in Base64 encoding. The default value is false.
     */
    exportFontsAsBase64: boolean;
    /**
     * Gets or sets the option that controls how headers and footers are exported.
     */
    exportHeadersFootersMode: HtmlSaveOptionsData.ExportHeadersFootersModeEnum;
    /**
     * Gets or sets a value indicating whether images are saved in Base64 format.
     */
    exportImagesAsBase64: boolean;
    /**
     * Gets or sets a value indicating whether language information is exported.
     */
    exportLanguageInformation: boolean;
    /**
     * Gets or sets the option that controls how list labels are exported.
     */
    exportListLabels: HtmlSaveOptionsData.ExportListLabelsEnum;
    /**
     * Gets or sets a value indicating whether the original URL should be used as the URL of the linked images.
     * The default value is false.
     * If value is set to true - ResourceFolder value is used as the URL of linked images and linked images are not loaded into document's folder or ImagesFolder.If value is set to false - linked images are loaded into document's folder or ImagesFolder and URL of each linked image is constructed depending on document's folder, ImagesFolder and ImagesFolderAlias properties.
     */
    exportOriginalUrlForLinkedImages: boolean;
    /**
     * Gets or sets a value indicating whether page margins are exported to HTML, MHTML or EPUB.
     * The default value is false.
     * Aspose.Words does not show area of page margins by default. If any elements are completely or partially clipped by the document edge the displayed area can be extended with this option.
     */
    exportPageMargins: boolean;
    /**
     * Gets or sets a value indicating whether page setup is exported.
     */
    exportPageSetup: boolean;
    /**
     * Gets or sets a value indicating whether font sizes should be output in relative units when saving.
     */
    exportRelativeFontSize: boolean;
    /**
     * Gets or sets a value indicating whether to write the roundtrip information when saving to HTML. The default value is true.
     * Saving of the roundtrip information allows to restore document properties such as tab stops, comments, headers and footers during the HTML documents loading back into a Document object.When true, the roundtrip information is exported as -aw-* CSS properties of the corresponding HTML elements.When false, causes no roundtrip information to be output into produced files.
     */
    exportRoundtripInformation: boolean;
    /**
     * Gets or sets the flag, that controls how text input form fields are saved.
     */
    exportTextInputFormFieldAsText: boolean;
    /**
     * Gets or sets a value indicating whether to write page numbers to table of contents when saving.
     */
    exportTocPageNumbers: boolean;
    /**
     * Gets or sets a value indicating whether to write the DOCTYPE declaration when saving.
     */
    exportXhtmlTransitional: boolean;
    /**
     * Gets or sets the option that controls which font resources need subsetting when saving.
     */
    fontResourcesSubsettingSizeThreshold: number;
    /**
     * Gets or sets the physical folder where fonts are saved when exporting a document.
     */
    fontsFolder: string;
    /**
     * Gets or sets the name of the folder used to construct font URIs.
     */
    fontsFolderAlias: string;
    /**
     * Gets or sets the version of HTML standard, that should be used when saving the document to HTML or MHTML.
     * Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
     */
    htmlVersion: HtmlSaveOptionsData.HtmlVersionEnum;
    /**
     * Gets or sets the output resolution for images when exporting.
     */
    imageResolution: number;
    /**
     * Gets or sets the physical folder where images are saved when exporting a document.
     */
    imagesFolder: string;
    /**
     * Gets or sets the name of the folder used to construct image URIs.
     */
    imagesFolderAlias: string;
    /**
     * Gets or sets the options, that controls in what format metafiles are saved when exporting to HTML, MHTML, or EPUB.
     * The default value is Aspose.Words.Saving.HtmlMetafileFormat.Png, meaning that metafiles are rendered to raster PNG images.
     * Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF images into PNG files when exporting to HTML.Other options are to convert metafiles to SVG images or to export them as is without conversion.
     * Some image transforms, in particular image cropping, will not be applied to metafile images if they are exported to HTML without conversion.
     */
    metafileFormat: HtmlSaveOptionsData.MetafileFormatEnum;
    /**
     * Gets or sets the option that controls how OfficeMath objects are exported to HTML, MHTML or EPUB. The default value is HtmlOfficeMathOutputMode.Image.
     */
    officeMathOutputMode: HtmlSaveOptionsData.OfficeMathOutputModeEnum;
    /**
     * Gets or sets a value indicating whether to use pretty formats output.
     */
    prettyFormat: boolean;
    /**
     * Gets or sets the flag that indicates whether backslash characters should be replaced with yen signs.
     * Default value is false.
     * By default, Aspose.Words mimics MS Word's behavior and doesn't replace backslash characters with yen signs in
     * generated HTML documents. However, previous versions of Aspose.Words performed such replacements in certain
     * scenarios. This flag enables backward compatibility with previous versions of Aspose.Words.
     */
    replaceBackslashWithYenSign: boolean;
    /**
     * Gets or sets a value indicating whether font family names used in the document are resolved and substituted according to FontSettings when being written into HTML-based formats.
     * The default value is false.
     */
    resolveFontNames: boolean;
    /**
     * Gets or sets the physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. The default value is an empty string.
     */
    resourceFolder: string;
    /**
     * Gets or sets the name of the folder used to construct URIs of all resources written into HTML document. The default value is an empty string.
     */
    resourceFolderAlias: string;
    /**
     * Gets or sets a value indicating whether images are scaled by Aspose.Words to the bounding shape size when exporting.
     */
    scaleImageToShapeSize: boolean;
    /**
     * Gets or sets the option that controls how table, row and cell widths are exported.
     */
    tableWidthOutputMode: HtmlSaveOptionsData.TableWidthOutputModeEnum;
    constructor(init?: Partial<HtmlSaveOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for HtmlSaveOptionsData
 */
export declare namespace HtmlSaveOptionsData {
    enum CssStyleSheetTypeEnum {
        Inline,
        Embedded,
        External
    }
    enum DocumentSplitCriteriaEnum {
        None,
        PageBreak,
        ColumnBreak,
        SectionBreak,
        HeadingParagraph
    }
    enum ExportHeadersFootersModeEnum {
        None,
        PerSection,
        FirstSectionHeaderLastSectionFooter,
        FirstPageHeaderFooterPerSection
    }
    enum ExportListLabelsEnum {
        Auto,
        AsInlineText,
        ByHtmlTags
    }
    enum HtmlVersionEnum {
        Xhtml,
        Html5
    }
    enum MetafileFormatEnum {
        Png,
        Svg,
        EmfOrWmf
    }
    enum OfficeMathOutputModeEnum {
        Image,
        MathML,
        Text
    }
    enum TableWidthOutputModeEnum {
        All,
        RelativeOnly,
        None
    }
}
