"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="compareData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompareData = exports.importsMapCompareData = void 0;
const compareOptions_1 = require("./compareOptions");
const fileReference_1 = require("./fileReference");
exports.importsMapCompareData = {
    CompareOptions: compareOptions_1.CompareOptions,
    FileReference: fileReference_1.FileReference,
};
/**
 * Container class for compare documents.
 */
class CompareData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return CompareData.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
        if (this.fileReference) {
            this.fileReference.collectFilesContent(_resultFilesContent);
        }
    }
    validate() {
        var _a, _b;
        if (this.author === null || this.author === undefined) {
            throw new Error('Property Author in CompareData is required.');
        }
        if (this.fileReference === null || this.fileReference === undefined) {
            throw new Error('Property FileReference in CompareData is required.');
        }
        (_a = this.compareOptions) === null || _a === void 0 ? void 0 : _a.validate();
        (_b = this.fileReference) === null || _b === void 0 ? void 0 : _b.validate();
    }
}
exports.CompareData = CompareData;
/**
 * Attribute type map
 */
CompareData.attributeTypeMap = [
    {
        name: "author",
        baseName: "Author",
        type: "string",
    },
    {
        name: "compareOptions",
        baseName: "CompareOptions",
        type: "CompareOptions",
    },
    {
        name: "comparingWithDocument",
        baseName: "ComparingWithDocument",
        type: "string",
    },
    {
        name: "dateTime",
        baseName: "DateTime",
        type: "Date",
    },
    {
        name: "fileReference",
        baseName: "FileReference",
        type: "FileReference",
    },
    {
        name: "resultDocumentFormat",
        baseName: "ResultDocumentFormat",
        type: "string",
    }
];
