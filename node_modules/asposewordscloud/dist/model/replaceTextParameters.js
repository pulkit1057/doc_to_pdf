"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="replaceTextParameters.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplaceTextParameters = exports.importsMapReplaceTextParameters = void 0;
exports.importsMapReplaceTextParameters = {};
/**
 * Class for document replace text request building.
 */
class ReplaceTextParameters {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return ReplaceTextParameters.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        if (this.isMatchCase === null || this.isMatchCase === undefined) {
            throw new Error('Property IsMatchCase in ReplaceTextParameters is required.');
        }
        if (this.isMatchWholeWord === null || this.isMatchWholeWord === undefined) {
            throw new Error('Property IsMatchWholeWord in ReplaceTextParameters is required.');
        }
        if (this.isOldValueRegex === null || this.isOldValueRegex === undefined) {
            throw new Error('Property IsOldValueRegex in ReplaceTextParameters is required.');
        }
        if (this.newValue === null || this.newValue === undefined) {
            throw new Error('Property NewValue in ReplaceTextParameters is required.');
        }
        if (this.oldValue === null || this.oldValue === undefined) {
            throw new Error('Property OldValue in ReplaceTextParameters is required.');
        }
    }
}
exports.ReplaceTextParameters = ReplaceTextParameters;
/**
 * Attribute type map
 */
ReplaceTextParameters.attributeTypeMap = [
    {
        name: "isMatchCase",
        baseName: "IsMatchCase",
        type: "boolean",
    },
    {
        name: "isMatchWholeWord",
        baseName: "IsMatchWholeWord",
        type: "boolean",
    },
    {
        name: "isOldValueRegex",
        baseName: "IsOldValueRegex",
        type: "boolean",
    },
    {
        name: "newValue",
        baseName: "NewValue",
        type: "string",
    },
    {
        name: "oldValue",
        baseName: "OldValue",
        type: "string",
    }
];
