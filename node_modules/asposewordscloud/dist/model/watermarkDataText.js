"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="watermarkDataText.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatermarkDataText = exports.importsMapWatermarkDataText = void 0;
const watermarkDataBase_1 = require("./watermarkDataBase");
const xmlColor_1 = require("./xmlColor");
exports.importsMapWatermarkDataText = {
    WatermarkDataBase: watermarkDataBase_1.WatermarkDataBase,
    XmlColor: xmlColor_1.XmlColor,
};
/**
 * Class for insert watermark text request building.
 */
class WatermarkDataText extends watermarkDataBase_1.WatermarkDataBase {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(WatermarkDataText.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        super.validate();
        if (this.text === null || this.text === undefined) {
            throw new Error('Property Text in WatermarkDataText is required.');
        }
        (_a = this.color) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.WatermarkDataText = WatermarkDataText;
/**
 * Attribute type map
 */
WatermarkDataText.attributeTypeMap = [
    {
        name: "color",
        baseName: "Color",
        type: "XmlColor",
    },
    {
        name: "fontFamily",
        baseName: "FontFamily",
        type: "string",
    },
    {
        name: "fontSize",
        baseName: "FontSize",
        type: "number",
    },
    {
        name: "isSemitrasparent",
        baseName: "IsSemitrasparent",
        type: "boolean",
    },
    {
        name: "layout",
        baseName: "Layout",
        type: "WatermarkDataText.LayoutEnum",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Enums for WatermarkDataText
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (WatermarkDataText) {
    let LayoutEnum;
    (function (LayoutEnum) {
        LayoutEnum[LayoutEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        LayoutEnum[LayoutEnum["Diagonal"] = 'Diagonal'] = "Diagonal";
    })(LayoutEnum = WatermarkDataText.LayoutEnum || (WatermarkDataText.LayoutEnum = {}));
})(WatermarkDataText = exports.WatermarkDataText || (exports.WatermarkDataText = {}));
// tslint:enable:quotemark
