"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="footnote.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Footnote = exports.importsMapFootnote = void 0;
const documentPosition_1 = require("./documentPosition");
const footnoteLink_1 = require("./footnoteLink");
const storyChildNodes_1 = require("./storyChildNodes");
exports.importsMapFootnote = {
    DocumentPosition: documentPosition_1.DocumentPosition,
    FootnoteLink: footnoteLink_1.FootnoteLink,
    StoryChildNodes: storyChildNodes_1.StoryChildNodes,
};
/**
 * DTO container with a footnote.
 */
class Footnote extends footnoteLink_1.FootnoteLink {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Footnote.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a, _b;
        super.validate();
        (_a = this.position) === null || _a === void 0 ? void 0 : _a.validate();
        (_b = this.content) === null || _b === void 0 ? void 0 : _b.validate();
    }
}
exports.Footnote = Footnote;
/**
 * Attribute type map
 */
Footnote.attributeTypeMap = [
    {
        name: "position",
        baseName: "Position",
        type: "DocumentPosition",
    },
    {
        name: "footnoteType",
        baseName: "FootnoteType",
        type: "Footnote.FootnoteTypeEnum",
    },
    {
        name: "referenceMark",
        baseName: "ReferenceMark",
        type: "string",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    },
    {
        name: "content",
        baseName: "Content",
        type: "StoryChildNodes",
    }
];
/**
 * Enums for Footnote
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (Footnote) {
    let FootnoteTypeEnum;
    (function (FootnoteTypeEnum) {
        FootnoteTypeEnum[FootnoteTypeEnum["Footnote"] = 'Footnote'] = "Footnote";
        FootnoteTypeEnum[FootnoteTypeEnum["Endnote"] = 'Endnote'] = "Endnote";
    })(FootnoteTypeEnum = Footnote.FootnoteTypeEnum || (Footnote.FootnoteTypeEnum = {}));
})(Footnote = exports.Footnote || (exports.Footnote = {}));
// tslint:enable:quotemark
