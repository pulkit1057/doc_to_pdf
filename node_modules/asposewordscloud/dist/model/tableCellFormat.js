"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="tableCellFormat.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableCellFormat = exports.importsMapTableCellFormat = void 0;
const linkElement_1 = require("./linkElement");
const preferredWidth_1 = require("./preferredWidth");
exports.importsMapTableCellFormat = {
    LinkElement: linkElement_1.LinkElement,
    PreferredWidth: preferredWidth_1.PreferredWidth,
};
/**
 * DTO container with all formatting for a table row.
 */
class TableCellFormat extends linkElement_1.LinkElement {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(TableCellFormat.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        super.validate();
        (_a = this.preferredWidth) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.TableCellFormat = TableCellFormat;
/**
 * Attribute type map
 */
TableCellFormat.attributeTypeMap = [
    {
        name: "bottomPadding",
        baseName: "BottomPadding",
        type: "number",
    },
    {
        name: "fitText",
        baseName: "FitText",
        type: "boolean",
    },
    {
        name: "horizontalMerge",
        baseName: "HorizontalMerge",
        type: "TableCellFormat.HorizontalMergeEnum",
    },
    {
        name: "leftPadding",
        baseName: "LeftPadding",
        type: "number",
    },
    {
        name: "orientation",
        baseName: "Orientation",
        type: "TableCellFormat.OrientationEnum",
    },
    {
        name: "preferredWidth",
        baseName: "PreferredWidth",
        type: "PreferredWidth",
    },
    {
        name: "rightPadding",
        baseName: "RightPadding",
        type: "number",
    },
    {
        name: "topPadding",
        baseName: "TopPadding",
        type: "number",
    },
    {
        name: "verticalAlignment",
        baseName: "VerticalAlignment",
        type: "TableCellFormat.VerticalAlignmentEnum",
    },
    {
        name: "verticalMerge",
        baseName: "VerticalMerge",
        type: "TableCellFormat.VerticalMergeEnum",
    },
    {
        name: "width",
        baseName: "Width",
        type: "number",
    },
    {
        name: "wrapText",
        baseName: "WrapText",
        type: "boolean",
    }
];
/**
 * Enums for TableCellFormat
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (TableCellFormat) {
    let HorizontalMergeEnum;
    (function (HorizontalMergeEnum) {
        HorizontalMergeEnum[HorizontalMergeEnum["None"] = 'None'] = "None";
        HorizontalMergeEnum[HorizontalMergeEnum["First"] = 'First'] = "First";
        HorizontalMergeEnum[HorizontalMergeEnum["Previous"] = 'Previous'] = "Previous";
    })(HorizontalMergeEnum = TableCellFormat.HorizontalMergeEnum || (TableCellFormat.HorizontalMergeEnum = {}));
    let OrientationEnum;
    (function (OrientationEnum) {
        OrientationEnum[OrientationEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        OrientationEnum[OrientationEnum["Downward"] = 'Downward'] = "Downward";
        OrientationEnum[OrientationEnum["Upward"] = 'Upward'] = "Upward";
        OrientationEnum[OrientationEnum["HorizontalRotatedFarEast"] = 'HorizontalRotatedFarEast'] = "HorizontalRotatedFarEast";
        OrientationEnum[OrientationEnum["VerticalFarEast"] = 'VerticalFarEast'] = "VerticalFarEast";
        OrientationEnum[OrientationEnum["VerticalRotatedFarEast"] = 'VerticalRotatedFarEast'] = "VerticalRotatedFarEast";
    })(OrientationEnum = TableCellFormat.OrientationEnum || (TableCellFormat.OrientationEnum = {}));
    let VerticalAlignmentEnum;
    (function (VerticalAlignmentEnum) {
        VerticalAlignmentEnum[VerticalAlignmentEnum["Top"] = 'Top'] = "Top";
        VerticalAlignmentEnum[VerticalAlignmentEnum["Center"] = 'Center'] = "Center";
        VerticalAlignmentEnum[VerticalAlignmentEnum["Bottom"] = 'Bottom'] = "Bottom";
    })(VerticalAlignmentEnum = TableCellFormat.VerticalAlignmentEnum || (TableCellFormat.VerticalAlignmentEnum = {}));
    let VerticalMergeEnum;
    (function (VerticalMergeEnum) {
        VerticalMergeEnum[VerticalMergeEnum["None"] = 'None'] = "None";
        VerticalMergeEnum[VerticalMergeEnum["First"] = 'First'] = "First";
        VerticalMergeEnum[VerticalMergeEnum["Previous"] = 'Previous'] = "Previous";
    })(VerticalMergeEnum = TableCellFormat.VerticalMergeEnum || (TableCellFormat.VerticalMergeEnum = {}));
})(TableCellFormat = exports.TableCellFormat || (exports.TableCellFormat = {}));
// tslint:enable:quotemark
