import { AttributeInfo } from '../internal/attributeInfo';
import { TxtSaveOptionsBaseData } from './txtSaveOptionsBaseData';
export declare const importsMapTextSaveOptionsData: {
    TxtSaveOptionsBaseData: typeof TxtSaveOptionsBaseData;
};
/**
 * Container class for text save options.
 */
export declare class TextSaveOptionsData extends TxtSaveOptionsBaseData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets a value indicating whether to add bi-directional marks before each BiDi run when exporting in plain text format.
     * The default value is true.
     */
    addBidiMarks: boolean;
    /**
     * Gets or sets an integer value that specifies the maximum number of characters per one line.
     * The default value is 0, that means no limit.
     */
    maxCharactersPerLine: number;
    /**
     * Gets or sets a value indicating whether the program should attempt to preserve layout of tables when saving in the plain text format.
     */
    preserveTableLayout: boolean;
    /**
     * Gets or sets a value indicating whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.
     */
    simplifyListLabels: boolean;
    constructor(init?: Partial<TextSaveOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
