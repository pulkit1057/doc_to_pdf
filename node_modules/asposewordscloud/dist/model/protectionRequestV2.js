"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="protectionRequestV2.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtectionRequestV2 = exports.importsMapProtectionRequestV2 = void 0;
const protectionRequestBase_1 = require("./protectionRequestBase");
exports.importsMapProtectionRequestV2 = {
    ProtectionRequestBase: protectionRequestBase_1.ProtectionRequestBase,
};
/**
 * Request on changing of protection.
 */
class ProtectionRequestV2 extends protectionRequestBase_1.ProtectionRequestBase {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ProtectionRequestV2.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        super.validate();
        if (this.protectionPassword === null || this.protectionPassword === undefined) {
            throw new Error('Property ProtectionPassword in ProtectionRequestV2 is required.');
        }
        if (this.protectionType === null || this.protectionType === undefined) {
            throw new Error('Property ProtectionType in ProtectionRequestV2 is required.');
        }
    }
}
exports.ProtectionRequestV2 = ProtectionRequestV2;
/**
 * Attribute type map
 */
ProtectionRequestV2.attributeTypeMap = [
    {
        name: "protectionPassword",
        baseName: "ProtectionPassword",
        type: "string",
    },
    {
        name: "protectionType",
        baseName: "ProtectionType",
        type: "ProtectionRequestV2.ProtectionTypeEnum",
    }
];
/**
 * Enums for ProtectionRequestV2
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (ProtectionRequestV2) {
    let ProtectionTypeEnum;
    (function (ProtectionTypeEnum) {
        ProtectionTypeEnum[ProtectionTypeEnum["AllowOnlyRevisions"] = 'AllowOnlyRevisions'] = "AllowOnlyRevisions";
        ProtectionTypeEnum[ProtectionTypeEnum["AllowOnlyComments"] = 'AllowOnlyComments'] = "AllowOnlyComments";
        ProtectionTypeEnum[ProtectionTypeEnum["AllowOnlyFormFields"] = 'AllowOnlyFormFields'] = "AllowOnlyFormFields";
        ProtectionTypeEnum[ProtectionTypeEnum["ReadOnly"] = 'ReadOnly'] = "ReadOnly";
        ProtectionTypeEnum[ProtectionTypeEnum["NoProtection"] = 'NoProtection'] = "NoProtection";
    })(ProtectionTypeEnum = ProtectionRequestV2.ProtectionTypeEnum || (ProtectionRequestV2.ProtectionTypeEnum = {}));
})(ProtectionRequestV2 = exports.ProtectionRequestV2 || (exports.ProtectionRequestV2 = {}));
// tslint:enable:quotemark
