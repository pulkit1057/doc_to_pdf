"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="documentEntryList.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentEntryList = exports.importsMapDocumentEntryList = void 0;
const baseEntryList_1 = require("./baseEntryList");
const documentEntry_1 = require("./documentEntry");
exports.importsMapDocumentEntryList = {
    BaseEntryList: baseEntryList_1.BaseEntryList,
    DocumentEntry: documentEntry_1.DocumentEntry,
};
/**
 * Represents a list of documents which will be appended to the original resource document.
 */
class DocumentEntryList extends baseEntryList_1.BaseEntryList {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentEntryList.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
        super.collectFilesContent(_resultFilesContent);
        if (this.documentEntries) {
            for (let element of this.documentEntries) {
                element.collectFilesContent(_resultFilesContent);
            }
        }
    }
    validate() {
        super.validate();
        if (this.documentEntries === null || this.documentEntries === undefined) {
            throw new Error('Property DocumentEntries in DocumentEntryList is required.');
        }
        if (this.documentEntries !== null && this.documentEntries !== undefined) {
            for (let elementDocumentEntries of this.documentEntries) {
                elementDocumentEntries === null || elementDocumentEntries === void 0 ? void 0 : elementDocumentEntries.validate();
            }
        }
    }
}
exports.DocumentEntryList = DocumentEntryList;
/**
 * Attribute type map
 */
DocumentEntryList.attributeTypeMap = [
    {
        name: "appendAllEntriesToOneSection",
        baseName: "AppendAllEntriesToOneSection",
        type: "boolean",
    },
    {
        name: "applyBaseDocumentHeadersAndFootersToAppendingDocuments",
        baseName: "ApplyBaseDocumentHeadersAndFootersToAppendingDocuments",
        type: "boolean",
    },
    {
        name: "documentEntries",
        baseName: "DocumentEntries",
        type: "Array<DocumentEntry>",
    }
];
