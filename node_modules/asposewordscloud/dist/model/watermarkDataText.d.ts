import { AttributeInfo } from '../internal/attributeInfo';
import { WatermarkDataBase } from './watermarkDataBase';
import { XmlColor } from './xmlColor';
export declare const importsMapWatermarkDataText: {
    WatermarkDataBase: typeof WatermarkDataBase;
    XmlColor: typeof XmlColor;
};
/**
 * Class for insert watermark text request building.
 */
export declare class WatermarkDataText extends WatermarkDataBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets font color. The default value is System.Drawing.Color.Silver.
     */
    color: XmlColor;
    /**
     * Gets or sets font family name. The default value is "Calibri".
     */
    fontFamily: string;
    /**
     * Gets or sets a font size. The default value is 0 - auto.
     * Valid values range from 0 to 65.5 inclusive. Auto font size means that the watermark will be scaled to its max width and max height relative to the page margins.
     */
    fontSize: number;
    /**
     * Gets or sets a boolean value which is responsible for opacity of the watermark. The default value is true.
     */
    isSemitrasparent: boolean;
    /**
     * Gets or sets layout of the watermark. The default value is Aspose.Words.WatermarkLayout.Diagonal.
     */
    layout: WatermarkDataText.LayoutEnum;
    /**
     * Gets or sets the watermark text.
     */
    text: string;
    constructor(init?: Partial<WatermarkDataText>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for WatermarkDataText
 */
export declare namespace WatermarkDataText {
    enum LayoutEnum {
        Horizontal,
        Diagonal
    }
}
