"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="saveOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveOptionsData = exports.importsMapSaveOptionsData = void 0;
const timeZoneInfoData_1 = require("./timeZoneInfoData");
exports.importsMapSaveOptionsData = {
    TimeZoneInfoData: timeZoneInfoData_1.TimeZoneInfoData,
};
/**
 * base container class for save options data.
 */
class SaveOptionsData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SaveOptionsData.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        if (this.fileName === null || this.fileName === undefined) {
            throw new Error('Property FileName in SaveOptionsData is required.');
        }
        (_a = this.customTimeZoneInfoData) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.SaveOptionsData = SaveOptionsData;
/**
 * Attribute type map
 */
SaveOptionsData.attributeTypeMap = [
    {
        name: "allowEmbeddingPostScriptFonts",
        baseName: "AllowEmbeddingPostScriptFonts",
        type: "boolean",
    },
    {
        name: "customTimeZoneInfoData",
        baseName: "CustomTimeZoneInfoData",
        type: "TimeZoneInfoData",
    },
    {
        name: "dml3DEffectsRenderingMode",
        baseName: "Dml3DEffectsRenderingMode",
        type: "SaveOptionsData.Dml3DEffectsRenderingModeEnum",
    },
    {
        name: "dmlEffectsRenderingMode",
        baseName: "DmlEffectsRenderingMode",
        type: "SaveOptionsData.DmlEffectsRenderingModeEnum",
    },
    {
        name: "dmlRenderingMode",
        baseName: "DmlRenderingMode",
        type: "SaveOptionsData.DmlRenderingModeEnum",
    },
    {
        name: "fileName",
        baseName: "FileName",
        type: "string",
    },
    {
        name: "imlRenderingMode",
        baseName: "ImlRenderingMode",
        type: "SaveOptionsData.ImlRenderingModeEnum",
    },
    {
        name: "updateCreatedTimeProperty",
        baseName: "UpdateCreatedTimeProperty",
        type: "boolean",
    },
    {
        name: "updateFields",
        baseName: "UpdateFields",
        type: "boolean",
    },
    {
        name: "updateLastPrintedProperty",
        baseName: "UpdateLastPrintedProperty",
        type: "boolean",
    },
    {
        name: "updateLastSavedTimeProperty",
        baseName: "UpdateLastSavedTimeProperty",
        type: "boolean",
    },
    {
        name: "zipOutput",
        baseName: "ZipOutput",
        type: "boolean",
    },
    {
        name: "saveFormat",
        baseName: "SaveFormat",
        type: "string",
    }
];
/**
 * Enums for SaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (SaveOptionsData) {
    let Dml3DEffectsRenderingModeEnum;
    (function (Dml3DEffectsRenderingModeEnum) {
        Dml3DEffectsRenderingModeEnum[Dml3DEffectsRenderingModeEnum["Basic"] = 'Basic'] = "Basic";
        Dml3DEffectsRenderingModeEnum[Dml3DEffectsRenderingModeEnum["Advanced"] = 'Advanced'] = "Advanced";
    })(Dml3DEffectsRenderingModeEnum = SaveOptionsData.Dml3DEffectsRenderingModeEnum || (SaveOptionsData.Dml3DEffectsRenderingModeEnum = {}));
    let DmlEffectsRenderingModeEnum;
    (function (DmlEffectsRenderingModeEnum) {
        DmlEffectsRenderingModeEnum[DmlEffectsRenderingModeEnum["Simplified"] = 'Simplified'] = "Simplified";
        DmlEffectsRenderingModeEnum[DmlEffectsRenderingModeEnum["None"] = 'None'] = "None";
        DmlEffectsRenderingModeEnum[DmlEffectsRenderingModeEnum["Fine"] = 'Fine'] = "Fine";
    })(DmlEffectsRenderingModeEnum = SaveOptionsData.DmlEffectsRenderingModeEnum || (SaveOptionsData.DmlEffectsRenderingModeEnum = {}));
    let DmlRenderingModeEnum;
    (function (DmlRenderingModeEnum) {
        DmlRenderingModeEnum[DmlRenderingModeEnum["Fallback"] = 'Fallback'] = "Fallback";
        DmlRenderingModeEnum[DmlRenderingModeEnum["DrawingML"] = 'DrawingML'] = "DrawingML";
    })(DmlRenderingModeEnum = SaveOptionsData.DmlRenderingModeEnum || (SaveOptionsData.DmlRenderingModeEnum = {}));
    let ImlRenderingModeEnum;
    (function (ImlRenderingModeEnum) {
        ImlRenderingModeEnum[ImlRenderingModeEnum["Fallback"] = 'Fallback'] = "Fallback";
        ImlRenderingModeEnum[ImlRenderingModeEnum["InkML"] = 'InkML'] = "InkML";
    })(ImlRenderingModeEnum = SaveOptionsData.ImlRenderingModeEnum || (SaveOptionsData.ImlRenderingModeEnum = {}));
})(SaveOptionsData = exports.SaveOptionsData || (exports.SaveOptionsData = {}));
// tslint:enable:quotemark
