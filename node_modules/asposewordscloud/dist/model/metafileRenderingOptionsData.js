"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="metafileRenderingOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetafileRenderingOptionsData = exports.importsMapMetafileRenderingOptionsData = void 0;
exports.importsMapMetafileRenderingOptionsData = {};
/**
 * Container class for options of metafile rendering.
 */
class MetafileRenderingOptionsData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return MetafileRenderingOptionsData.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
    }
}
exports.MetafileRenderingOptionsData = MetafileRenderingOptionsData;
/**
 * Attribute type map
 */
MetafileRenderingOptionsData.attributeTypeMap = [
    {
        name: "emfPlusDualRenderingMode",
        baseName: "EmfPlusDualRenderingMode",
        type: "MetafileRenderingOptionsData.EmfPlusDualRenderingModeEnum",
    },
    {
        name: "emulateRasterOperations",
        baseName: "EmulateRasterOperations",
        type: "boolean",
    },
    {
        name: "emulateRenderingToSizeOnPage",
        baseName: "EmulateRenderingToSizeOnPage",
        type: "boolean",
    },
    {
        name: "emulateRenderingToSizeOnPageResolution",
        baseName: "EmulateRenderingToSizeOnPageResolution",
        type: "number",
    },
    {
        name: "renderingMode",
        baseName: "RenderingMode",
        type: "MetafileRenderingOptionsData.RenderingModeEnum",
    },
    {
        name: "useEmfEmbeddedToWmf",
        baseName: "UseEmfEmbeddedToWmf",
        type: "boolean",
    }
];
/**
 * Enums for MetafileRenderingOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (MetafileRenderingOptionsData) {
    let EmfPlusDualRenderingModeEnum;
    (function (EmfPlusDualRenderingModeEnum) {
        EmfPlusDualRenderingModeEnum[EmfPlusDualRenderingModeEnum["EmfPlusWithFallback"] = 'EmfPlusWithFallback'] = "EmfPlusWithFallback";
        EmfPlusDualRenderingModeEnum[EmfPlusDualRenderingModeEnum["EmfPlus"] = 'EmfPlus'] = "EmfPlus";
        EmfPlusDualRenderingModeEnum[EmfPlusDualRenderingModeEnum["Emf"] = 'Emf'] = "Emf";
    })(EmfPlusDualRenderingModeEnum = MetafileRenderingOptionsData.EmfPlusDualRenderingModeEnum || (MetafileRenderingOptionsData.EmfPlusDualRenderingModeEnum = {}));
    let RenderingModeEnum;
    (function (RenderingModeEnum) {
        RenderingModeEnum[RenderingModeEnum["VectorWithFallback"] = 'VectorWithFallback'] = "VectorWithFallback";
        RenderingModeEnum[RenderingModeEnum["Vector"] = 'Vector'] = "Vector";
        RenderingModeEnum[RenderingModeEnum["Bitmap"] = 'Bitmap'] = "Bitmap";
    })(RenderingModeEnum = MetafileRenderingOptionsData.RenderingModeEnum || (MetafileRenderingOptionsData.RenderingModeEnum = {}));
})(MetafileRenderingOptionsData = exports.MetafileRenderingOptionsData || (exports.MetafileRenderingOptionsData = {}));
// tslint:enable:quotemark
