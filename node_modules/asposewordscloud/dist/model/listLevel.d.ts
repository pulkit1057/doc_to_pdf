import { AttributeInfo } from '../internal/attributeInfo';
import { Font } from './font';
import { LinkElement } from './linkElement';
import { Style } from './style';
export declare const importsMapListLevel: {
    Font: typeof Font;
    LinkElement: typeof LinkElement;
    Style: typeof Style;
};
/**
 * DTO container with a document list level.
 */
export declare class ListLevel extends LinkElement {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the starting number for this list level.
     * Default value is 1.
     */
    startAt: number;
    /**
     * Gets or sets the number style for this list level.
     */
    numberStyle: ListLevel.NumberStyleEnum;
    /**
     * Gets or sets the number format for the list level.
     * Among normal text characters, the string can contain placeholder characters \\x0000 to \\x0008 representing the numbers from the corresponding list levels. For example, the string "\\x0000.\\x0001)" will generate a list label that looks something like "1.5)". The number "1" is the current number from the 1st list level, the number "5" is the current number from the 2nd list level. Null is not allowed, but an empty string meaning no number is valid.
     */
    numberFormat: string;
    /**
     * Gets or sets the justification of the actual number of the list item.
     * The list label is justified relative to the Aspose.Words.Lists.ListLevel.NumberPosition property.
     */
    alignment: ListLevel.AlignmentEnum;
    /**
     * Gets or sets a value indicating whether the level turns all inherited numbers to Arabic, false if it preserves their number style.
     */
    isLegal: boolean;
    /**
     * Gets or sets the list level, that must appear before the specified list level restarts numbering.
     * The value of -1 means the numbering will continue.
     */
    restartAfterLevel: number;
    /**
     * Gets or sets the character inserted after the number for the list level.
     */
    trailingCharacter: ListLevel.TrailingCharacterEnum;
    /**
     * Gets or sets character formatting used for the list label.
     */
    font: Font;
    /**
     * Gets or sets the tab position (in points) for the list level.
     * Has effect only when Aspose.Words.Lists.ListLevel.TrailingCharacter is a tab.
     * Aspose.Words.Lists.ListLevel.NumberPosition Aspose.Words.Lists.ListLevel.TextPosition.
     */
    tabPosition: number;
    /**
     * Gets or sets the position (in points) of the number or bullet for the list level.
     * Aspose.Words.Lists.ListLevel.NumberPosition corresponds to LeftIndent plus FirstLineIndent of the paragraph. Aspose.Words.Lists.ListLevel.TextPosition Aspose.Words.Lists.ListLevel.TabPosition.
     */
    numberPosition: number;
    /**
     * Gets or sets the position (in points) for the second line of wrapping text for the list level.
     * Aspose.Words.Lists.ListLevel.TextPosition corresponds to LeftIndent of the paragraph.
     * Aspose.Words.Lists.ListLevel.NumberPosition Aspose.Words.Lists.ListLevel.TabPosition.
     */
    textPosition: number;
    /**
     * Gets or sets the paragraph style that is linked to this list level.
     * This property is null when the list level is not linked to a paragraph style.
     * This property can be set to null.
     */
    linkedStyle: Style;
    constructor(init?: Partial<ListLevel>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for ListLevel
 */
export declare namespace ListLevel {
    enum NumberStyleEnum {
        Arabic,
        UppercaseRoman,
        LowercaseRoman,
        UppercaseLetter,
        LowercaseLetter,
        Ordinal,
        Number,
        OrdinalText,
        Hex,
        ChicagoManual,
        Kanji,
        KanjiDigit,
        AiueoHalfWidth,
        IrohaHalfWidth,
        ArabicFullWidth,
        ArabicHalfWidth,
        KanjiTraditional,
        KanjiTraditional2,
        NumberInCircle,
        DecimalFullWidth,
        Aiueo,
        Iroha,
        LeadingZero,
        Bullet,
        Ganada,
        Chosung,
        GB1,
        GB2,
        GB3,
        GB4,
        Zodiac1,
        Zodiac2,
        Zodiac3,
        TradChinNum1,
        TradChinNum2,
        TradChinNum3,
        TradChinNum4,
        SimpChinNum1,
        SimpChinNum2,
        SimpChinNum3,
        SimpChinNum4,
        HanjaRead,
        HanjaReadDigit,
        Hangul,
        Hanja,
        Hebrew1,
        Arabic1,
        Hebrew2,
        Arabic2,
        HindiLetter1,
        HindiLetter2,
        HindiArabic,
        HindiCardinalText,
        ThaiLetter,
        ThaiArabic,
        ThaiCardinalText,
        VietCardinalText,
        NumberInDash,
        LowercaseRussian,
        UppercaseRussian,
        None,
        Custom
    }
    enum AlignmentEnum {
        Left,
        Center,
        Right
    }
    enum TrailingCharacterEnum {
        Tab,
        Space,
        Nothing
    }
}
