import { AttributeInfo } from '../internal/attributeInfo';
import { Position } from './position';
import { StructuredDocumentTagBase } from './structuredDocumentTagBase';
export declare const importsMapStructuredDocumentTagInsert: {
    Position: typeof Position;
    StructuredDocumentTagBase: typeof StructuredDocumentTagBase;
};
/**
 * DTO container with a StructuredDocumentTag.
 */
export declare class StructuredDocumentTagInsert extends StructuredDocumentTagBase {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the level at which this SDT occurs in the document tree.
     */
    level: StructuredDocumentTagInsert.LevelEnum;
    /**
     * Gets or sets type of this Structured document tag.
     */
    sdtType: StructuredDocumentTagInsert.SdtTypeEnum;
    /**
     * Gets or sets the position of the node that will be used to determine the placement of a new node.
     */
    position: Position;
    constructor(init?: Partial<StructuredDocumentTagInsert>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for StructuredDocumentTagInsert
 */
export declare namespace StructuredDocumentTagInsert {
    enum LevelEnum {
        Unknown,
        Inline,
        Block,
        Row,
        Cell
    }
    enum SdtTypeEnum {
        None,
        Bibliography,
        Citation,
        Equation,
        DropDownList,
        ComboBox,
        Date,
        BuildingBlockGallery,
        DocPartObj,
        Group,
        Picture,
        RichText,
        PlainText,
        Checkbox,
        RepeatingSection,
        RepeatingSectionItem,
        EntityPicker
    }
}
