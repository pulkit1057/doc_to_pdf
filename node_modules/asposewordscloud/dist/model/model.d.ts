/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import http = require("http");
import { Readable } from "stream";
import { IncomingMessage } from 'http';
import request = require("request");
import { Configuration } from "../internal/configuration";
import { Encryptor, FileReference } from '../api';
import * as importedApiError from './apiError';
import * as importedAvailableFontsResponse from './availableFontsResponse';
import * as importedAzw3SaveOptionsData from './azw3SaveOptionsData';
import * as importedBaseEntryList from './baseEntryList';
import * as importedBmpSaveOptionsData from './bmpSaveOptionsData';
import * as importedBookmark from './bookmark';
import * as importedBookmarkData from './bookmarkData';
import * as importedBookmarkInsert from './bookmarkInsert';
import * as importedBookmarkResponse from './bookmarkResponse';
import * as importedBookmarks from './bookmarks';
import * as importedBookmarksOutlineLevelData from './bookmarksOutlineLevelData';
import * as importedBookmarksResponse from './bookmarksResponse';
import * as importedBorder from './border';
import * as importedBorderResponse from './borderResponse';
import * as importedBordersCollection from './bordersCollection';
import * as importedBordersResponse from './bordersResponse';
import * as importedClassificationResponse from './classificationResponse';
import * as importedClassificationResult from './classificationResult';
import * as importedComment from './comment';
import * as importedCommentInsert from './commentInsert';
import * as importedCommentLink from './commentLink';
import * as importedCommentResponse from './commentResponse';
import * as importedCommentsCollection from './commentsCollection';
import * as importedCommentsResponse from './commentsResponse';
import * as importedCommentUpdate from './commentUpdate';
import * as importedCompareData from './compareData';
import * as importedCompareOptions from './compareOptions';
import * as importedCompressOptions from './compressOptions';
import * as importedCompressResponse from './compressResponse';
import * as importedCsvDataLoadOptions from './csvDataLoadOptions';
import * as importedCustomXmlPart from './customXmlPart';
import * as importedCustomXmlPartInsert from './customXmlPartInsert';
import * as importedCustomXmlPartLink from './customXmlPartLink';
import * as importedCustomXmlPartResponse from './customXmlPartResponse';
import * as importedCustomXmlPartsCollection from './customXmlPartsCollection';
import * as importedCustomXmlPartsResponse from './customXmlPartsResponse';
import * as importedCustomXmlPartUpdate from './customXmlPartUpdate';
import * as importedDigitalSignatureDetails from './digitalSignatureDetails';
import * as importedDocmSaveOptionsData from './docmSaveOptionsData';
import * as importedDocSaveOptionsData from './docSaveOptionsData';
import * as importedDocument from './document';
import * as importedDocumentEntry from './documentEntry';
import * as importedDocumentEntryList from './documentEntryList';
import * as importedDocumentPosition from './documentPosition';
import * as importedDocumentProperties from './documentProperties';
import * as importedDocumentPropertiesResponse from './documentPropertiesResponse';
import * as importedDocumentProperty from './documentProperty';
import * as importedDocumentPropertyCreateOrUpdate from './documentPropertyCreateOrUpdate';
import * as importedDocumentPropertyResponse from './documentPropertyResponse';
import * as importedDocumentResponse from './documentResponse';
import * as importedDocumentStatData from './documentStatData';
import * as importedDocxSaveOptionsData from './docxSaveOptionsData';
import * as importedDotmSaveOptionsData from './dotmSaveOptionsData';
import * as importedDotSaveOptionsData from './dotSaveOptionsData';
import * as importedDotxSaveOptionsData from './dotxSaveOptionsData';
import * as importedDownsampleOptionsData from './downsampleOptionsData';
import * as importedDrawingObject from './drawingObject';
import * as importedDrawingObjectCollection from './drawingObjectCollection';
import * as importedDrawingObjectInsert from './drawingObjectInsert';
import * as importedDrawingObjectLink from './drawingObjectLink';
import * as importedDrawingObjectResponse from './drawingObjectResponse';
import * as importedDrawingObjectsResponse from './drawingObjectsResponse';
import * as importedDrawingObjectUpdate from './drawingObjectUpdate';
import * as importedEmfSaveOptionsData from './emfSaveOptionsData';
import * as importedEpsSaveOptionsData from './epsSaveOptionsData';
import * as importedEpubSaveOptionsData from './epubSaveOptionsData';
import * as importedError from './error';
import * as importedErrorDetails from './errorDetails';
import * as importedField from './field';
import * as importedFieldCollection from './fieldCollection';
import * as importedFieldInsert from './fieldInsert';
import * as importedFieldLink from './fieldLink';
import * as importedFieldNames from './fieldNames';
import * as importedFieldNamesResponse from './fieldNamesResponse';
import * as importedFieldOptions from './fieldOptions';
import * as importedFieldResponse from './fieldResponse';
import * as importedFieldsResponse from './fieldsResponse';
import * as importedFieldUpdate from './fieldUpdate';
import * as importedFileLink from './fileLink';
import * as importedFilesList from './filesList';
import * as importedFilesUploadResult from './filesUploadResult';
import * as importedFixedPageSaveOptionsData from './fixedPageSaveOptionsData';
import * as importedFlatOpcMacroSaveOptionsData from './flatOpcMacroSaveOptionsData';
import * as importedFlatOpcSaveOptionsData from './flatOpcSaveOptionsData';
import * as importedFlatOpcTemplateMacroSaveOptionsData from './flatOpcTemplateMacroSaveOptionsData';
import * as importedFlatOpcTemplateSaveOptionsData from './flatOpcTemplateSaveOptionsData';
import * as importedFont from './font';
import * as importedFontInfo from './fontInfo';
import * as importedFontResponse from './fontResponse';
import * as importedFootnote from './footnote';
import * as importedFootnoteBase from './footnoteBase';
import * as importedFootnoteCollection from './footnoteCollection';
import * as importedFootnoteInsert from './footnoteInsert';
import * as importedFootnoteLink from './footnoteLink';
import * as importedFootnoteResponse from './footnoteResponse';
import * as importedFootnotesResponse from './footnotesResponse';
import * as importedFootnotesStatData from './footnotesStatData';
import * as importedFootnoteUpdate from './footnoteUpdate';
import * as importedFormField from './formField';
import * as importedFormFieldCheckbox from './formFieldCheckbox';
import * as importedFormFieldCollection from './formFieldCollection';
import * as importedFormFieldDropDown from './formFieldDropDown';
import * as importedFormFieldResponse from './formFieldResponse';
import * as importedFormFieldsResponse from './formFieldsResponse';
import * as importedFormFieldTextInput from './formFieldTextInput';
import * as importedGifSaveOptionsData from './gifSaveOptionsData';
import * as importedHeaderFooter from './headerFooter';
import * as importedHeaderFooterLink from './headerFooterLink';
import * as importedHeaderFooterLinkCollection from './headerFooterLinkCollection';
import * as importedHeaderFooterResponse from './headerFooterResponse';
import * as importedHeaderFootersResponse from './headerFootersResponse';
import * as importedHtmlFixedSaveOptionsData from './htmlFixedSaveOptionsData';
import * as importedHtmlSaveOptionsData from './htmlSaveOptionsData';
import * as importedHyperlink from './hyperlink';
import * as importedHyperlinkResponse from './hyperlinkResponse';
import * as importedHyperlinks from './hyperlinks';
import * as importedHyperlinksResponse from './hyperlinksResponse';
import * as importedImageEntry from './imageEntry';
import * as importedImageEntryList from './imageEntryList';
import * as importedImageSaveOptionsData from './imageSaveOptionsData';
import * as importedInfoAdditionalItem from './infoAdditionalItem';
import * as importedInfoResponse from './infoResponse';
import * as importedJpegSaveOptionsData from './jpegSaveOptionsData';
import * as importedJsonDataLoadOptions from './jsonDataLoadOptions';
import * as importedLink from './link';
import * as importedLinkElement from './linkElement';
import * as importedListFormat from './listFormat';
import * as importedListFormatUpdate from './listFormatUpdate';
import * as importedListInfo from './listInfo';
import * as importedListInsert from './listInsert';
import * as importedListLevel from './listLevel';
import * as importedListLevels from './listLevels';
import * as importedListLevelUpdate from './listLevelUpdate';
import * as importedListResponse from './listResponse';
import * as importedLists from './lists';
import * as importedListsResponse from './listsResponse';
import * as importedListUpdate from './listUpdate';
import * as importedLoadWebDocumentData from './loadWebDocumentData';
import * as importedMarkdownSaveOptionsData from './markdownSaveOptionsData';
import * as importedMetafileRenderingOptionsData from './metafileRenderingOptionsData';
import * as importedMhtmlSaveOptionsData from './mhtmlSaveOptionsData';
import * as importedModificationOperationResult from './modificationOperationResult';
import * as importedNodeLink from './nodeLink';
import * as importedOdtSaveOptionsData from './odtSaveOptionsData';
import * as importedOfficeMathLink from './officeMathLink';
import * as importedOfficeMathObject from './officeMathObject';
import * as importedOfficeMathObjectResponse from './officeMathObjectResponse';
import * as importedOfficeMathObjectsCollection from './officeMathObjectsCollection';
import * as importedOfficeMathObjectsResponse from './officeMathObjectsResponse';
import * as importedOoxmlSaveOptionsData from './ooxmlSaveOptionsData';
import * as importedOpenXpsSaveOptionsData from './openXpsSaveOptionsData';
import * as importedOptimizationOptions from './optimizationOptions';
import * as importedOttSaveOptionsData from './ottSaveOptionsData';
import * as importedOutlineOptionsData from './outlineOptionsData';
import * as importedPageNumber from './pageNumber';
import * as importedPageSetup from './pageSetup';
import * as importedPageStatData from './pageStatData';
import * as importedParagraph from './paragraph';
import * as importedParagraphFormat from './paragraphFormat';
import * as importedParagraphFormatBase from './paragraphFormatBase';
import * as importedParagraphFormatResponse from './paragraphFormatResponse';
import * as importedParagraphFormatUpdate from './paragraphFormatUpdate';
import * as importedParagraphInsert from './paragraphInsert';
import * as importedParagraphLink from './paragraphLink';
import * as importedParagraphLinkCollection from './paragraphLinkCollection';
import * as importedParagraphLinkCollectionResponse from './paragraphLinkCollectionResponse';
import * as importedParagraphListFormatResponse from './paragraphListFormatResponse';
import * as importedParagraphResponse from './paragraphResponse';
import * as importedPclSaveOptionsData from './pclSaveOptionsData';
import * as importedPdfDigitalSignatureDetailsData from './pdfDigitalSignatureDetailsData';
import * as importedPdfEncryptionDetailsData from './pdfEncryptionDetailsData';
import * as importedPdfPermissions from './pdfPermissions';
import * as importedPdfSaveOptionsData from './pdfSaveOptionsData';
import * as importedPngSaveOptionsData from './pngSaveOptionsData';
import * as importedPositionAfterNode from './positionAfterNode';
import * as importedPositionBeforeNode from './positionBeforeNode';
import * as importedPositionInsideNode from './positionInsideNode';
import * as importedPreferredWidth from './preferredWidth';
import * as importedProtectionData from './protectionData';
import * as importedProtectionDataResponse from './protectionDataResponse';
import * as importedProtectionRequest from './protectionRequest';
import * as importedProtectionRequestBase from './protectionRequestBase';
import * as importedProtectionRequestV2 from './protectionRequestV2';
import * as importedPsSaveOptionsData from './psSaveOptionsData';
import * as importedPublicKeyResponse from './publicKeyResponse';
import * as importedRangeDocument from './rangeDocument';
import * as importedRangeTextResponse from './rangeTextResponse';
import * as importedReplaceRange from './replaceRange';
import * as importedReplaceTextParameters from './replaceTextParameters';
import * as importedReplaceTextResponse from './replaceTextResponse';
import * as importedReportBuildOptions from './reportBuildOptions';
import * as importedReportEngineSettings from './reportEngineSettings';
import * as importedRevision from './revision';
import * as importedRevisionCollection from './revisionCollection';
import * as importedRevisionsModificationResponse from './revisionsModificationResponse';
import * as importedRevisionsResponse from './revisionsResponse';
import * as importedRtfSaveOptionsData from './rtfSaveOptionsData';
import * as importedRun from './run';
import * as importedRunInsert from './runInsert';
import * as importedRunLink from './runLink';
import * as importedRunResponse from './runResponse';
import * as importedRuns from './runs';
import * as importedRunsResponse from './runsResponse';
import * as importedRunUpdate from './runUpdate';
import * as importedSaveOptionsData from './saveOptionsData';
import * as importedSaveResponse from './saveResponse';
import * as importedSaveResult from './saveResult';
import * as importedSearchResponse from './searchResponse';
import * as importedSearchResult from './searchResult';
import * as importedSearchResultsCollection from './searchResultsCollection';
import * as importedSection from './section';
import * as importedSectionLink from './sectionLink';
import * as importedSectionLinkCollection from './sectionLinkCollection';
import * as importedSectionLinkCollectionResponse from './sectionLinkCollectionResponse';
import * as importedSectionPageSetupResponse from './sectionPageSetupResponse';
import * as importedSectionResponse from './sectionResponse';
import * as importedShading from './shading';
import * as importedSignature from './signature';
import * as importedSignatureCollectionResponse from './signatureCollectionResponse';
import * as importedSignOptions from './signOptions';
import * as importedSplitDocumentResponse from './splitDocumentResponse';
import * as importedSplitDocumentResult from './splitDocumentResult';
import * as importedStatDataResponse from './statDataResponse';
import * as importedStorageFile from './storageFile';
import * as importedStoryChildNodes from './storyChildNodes';
import * as importedStructuredDocumentTag from './structuredDocumentTag';
import * as importedStructuredDocumentTagBase from './structuredDocumentTagBase';
import * as importedStructuredDocumentTagCollection from './structuredDocumentTagCollection';
import * as importedStructuredDocumentTagInsert from './structuredDocumentTagInsert';
import * as importedStructuredDocumentTagListItem from './structuredDocumentTagListItem';
import * as importedStructuredDocumentTagResponse from './structuredDocumentTagResponse';
import * as importedStructuredDocumentTagsResponse from './structuredDocumentTagsResponse';
import * as importedStructuredDocumentTagUpdate from './structuredDocumentTagUpdate';
import * as importedStyle from './style';
import * as importedStyleApply from './styleApply';
import * as importedStyleCopy from './styleCopy';
import * as importedStyleInsert from './styleInsert';
import * as importedStyleResponse from './styleResponse';
import * as importedStylesResponse from './stylesResponse';
import * as importedStyleUpdate from './styleUpdate';
import * as importedSvgSaveOptionsData from './svgSaveOptionsData';
import * as importedTable from './table';
import * as importedTableCell from './tableCell';
import * as importedTableCellFormat from './tableCellFormat';
import * as importedTableCellFormatResponse from './tableCellFormatResponse';
import * as importedTableCellInsert from './tableCellInsert';
import * as importedTableCellResponse from './tableCellResponse';
import * as importedTableInsert from './tableInsert';
import * as importedTableLink from './tableLink';
import * as importedTableLinkCollection from './tableLinkCollection';
import * as importedTableLinkCollectionResponse from './tableLinkCollectionResponse';
import * as importedTableProperties from './tableProperties';
import * as importedTablePropertiesResponse from './tablePropertiesResponse';
import * as importedTableResponse from './tableResponse';
import * as importedTableRow from './tableRow';
import * as importedTableRowFormat from './tableRowFormat';
import * as importedTableRowFormatResponse from './tableRowFormatResponse';
import * as importedTableRowInsert from './tableRowInsert';
import * as importedTableRowResponse from './tableRowResponse';
import * as importedTabStop from './tabStop';
import * as importedTabStopBase from './tabStopBase';
import * as importedTabStopInsert from './tabStopInsert';
import * as importedTabStopsResponse from './tabStopsResponse';
import * as importedTextSaveOptionsData from './textSaveOptionsData';
import * as importedTiffSaveOptionsData from './tiffSaveOptionsData';
import * as importedTimeZoneInfoData from './timeZoneInfoData';
import * as importedTranslateNodeIdResponse from './translateNodeIdResponse';
import * as importedTxtSaveOptionsBaseData from './txtSaveOptionsBaseData';
import * as importedUserInformation from './userInformation';
import * as importedWatermarkDataBase from './watermarkDataBase';
import * as importedWatermarkDataImage from './watermarkDataImage';
import * as importedWatermarkDataText from './watermarkDataText';
import * as importedWatermarkText from './watermarkText';
import * as importedWordMLSaveOptionsData from './wordMLSaveOptionsData';
import * as importedWordsApiErrorResponse from './wordsApiErrorResponse';
import * as importedWordsApiLink from './wordsApiLink';
import * as importedWordsResponse from './wordsResponse';
import * as importedXamlFixedSaveOptionsData from './xamlFixedSaveOptionsData';
import * as importedXamlFlowPackSaveOptionsData from './xamlFlowPackSaveOptionsData';
import * as importedXamlFlowSaveOptionsData from './xamlFlowSaveOptionsData';
import * as importedXmlColor from './xmlColor';
import * as importedXmlDataLoadOptions from './xmlDataLoadOptions';
import * as importedXpsSaveOptionsData from './xpsSaveOptionsData';
export { AttributeInfo } from '../internal/attributeInfo';
export * from './apiError';
export * from './availableFontsResponse';
export * from './azw3SaveOptionsData';
export * from './baseEntry';
export * from './baseEntryList';
export * from './bmpSaveOptionsData';
export * from './bookmark';
export * from './bookmarkData';
export * from './bookmarkInsert';
export * from './bookmarkResponse';
export * from './bookmarks';
export * from './bookmarksOutlineLevelData';
export * from './bookmarksResponse';
export * from './border';
export * from './borderResponse';
export * from './bordersCollection';
export * from './bordersResponse';
export * from './classificationResponse';
export * from './classificationResult';
export * from './comment';
export * from './commentBase';
export * from './commentInsert';
export * from './commentLink';
export * from './commentResponse';
export * from './commentsCollection';
export * from './commentsResponse';
export * from './commentUpdate';
export * from './compareData';
export * from './compareOptions';
export * from './compressOptions';
export * from './compressResponse';
export * from './csvDataLoadOptions';
export * from './customXmlPart';
export * from './customXmlPartInsert';
export * from './customXmlPartLink';
export * from './customXmlPartResponse';
export * from './customXmlPartsCollection';
export * from './customXmlPartsResponse';
export * from './customXmlPartUpdate';
export * from './digitalSignatureDetails';
export * from './docmSaveOptionsData';
export * from './docSaveOptionsData';
export * from './document';
export * from './documentEntry';
export * from './documentEntryList';
export * from './documentPosition';
export * from './documentProperties';
export * from './documentPropertiesResponse';
export * from './documentProperty';
export * from './documentPropertyCreateOrUpdate';
export * from './documentPropertyResponse';
export * from './documentResponse';
export * from './documentStatData';
export * from './docxSaveOptionsData';
export * from './dotmSaveOptionsData';
export * from './dotSaveOptionsData';
export * from './dotxSaveOptionsData';
export * from './downsampleOptionsData';
export * from './drawingObject';
export * from './drawingObjectCollection';
export * from './drawingObjectInsert';
export * from './drawingObjectLink';
export * from './drawingObjectResponse';
export * from './drawingObjectsResponse';
export * from './drawingObjectUpdate';
export * from './emfSaveOptionsData';
export * from './epsSaveOptionsData';
export * from './epubSaveOptionsData';
export * from './error';
export * from './errorDetails';
export * from './field';
export * from './fieldBase';
export * from './fieldCollection';
export * from './fieldInsert';
export * from './fieldLink';
export * from './fieldNames';
export * from './fieldNamesResponse';
export * from './fieldOptions';
export * from './fieldResponse';
export * from './fieldsResponse';
export * from './fieldUpdate';
export * from './fileLink';
export * from './fileReference';
export * from './filesList';
export * from './filesUploadResult';
export * from './fixedPageSaveOptionsData';
export * from './flatOpcMacroSaveOptionsData';
export * from './flatOpcSaveOptionsData';
export * from './flatOpcTemplateMacroSaveOptionsData';
export * from './flatOpcTemplateSaveOptionsData';
export * from './font';
export * from './fontInfo';
export * from './fontResponse';
export * from './footnote';
export * from './footnoteBase';
export * from './footnoteCollection';
export * from './footnoteInsert';
export * from './footnoteLink';
export * from './footnoteResponse';
export * from './footnotesResponse';
export * from './footnotesStatData';
export * from './footnoteUpdate';
export * from './formField';
export * from './formFieldCheckbox';
export * from './formFieldCollection';
export * from './formFieldDropDown';
export * from './formFieldResponse';
export * from './formFieldsResponse';
export * from './formFieldTextInput';
export * from './gifSaveOptionsData';
export * from './headerFooter';
export * from './headerFooterLink';
export * from './headerFooterLinkCollection';
export * from './headerFooterResponse';
export * from './headerFootersResponse';
export * from './htmlFixedSaveOptionsData';
export * from './htmlSaveOptionsData';
export * from './hyperlink';
export * from './hyperlinkResponse';
export * from './hyperlinks';
export * from './hyperlinksResponse';
export * from './imageEntry';
export * from './imageEntryList';
export * from './imageSaveOptionsData';
export * from './infoAdditionalItem';
export * from './infoResponse';
export * from './jpegSaveOptionsData';
export * from './jsonDataLoadOptions';
export * from './link';
export * from './linkElement';
export * from './listFormat';
export * from './listFormatUpdate';
export * from './listInfo';
export * from './listInsert';
export * from './listLevel';
export * from './listLevels';
export * from './listLevelUpdate';
export * from './listResponse';
export * from './lists';
export * from './listsResponse';
export * from './listUpdate';
export * from './loadWebDocumentData';
export * from './markdownSaveOptionsData';
export * from './metafileRenderingOptionsData';
export * from './mhtmlSaveOptionsData';
export * from './modificationOperationResult';
export * from './nodeLink';
export * from './odtSaveOptionsData';
export * from './officeMathLink';
export * from './officeMathObject';
export * from './officeMathObjectResponse';
export * from './officeMathObjectsCollection';
export * from './officeMathObjectsResponse';
export * from './ooxmlSaveOptionsData';
export * from './openXpsSaveOptionsData';
export * from './optimizationOptions';
export * from './ottSaveOptionsData';
export * from './outlineOptionsData';
export * from './pageNumber';
export * from './pageSetup';
export * from './pageStatData';
export * from './paragraph';
export * from './paragraphFormat';
export * from './paragraphFormatBase';
export * from './paragraphFormatResponse';
export * from './paragraphFormatUpdate';
export * from './paragraphInsert';
export * from './paragraphLink';
export * from './paragraphLinkCollection';
export * from './paragraphLinkCollectionResponse';
export * from './paragraphListFormatResponse';
export * from './paragraphResponse';
export * from './pclSaveOptionsData';
export * from './pdfDigitalSignatureDetailsData';
export * from './pdfEncryptionDetailsData';
export * from './pdfPermissions';
export * from './pdfSaveOptionsData';
export * from './pngSaveOptionsData';
export * from './position';
export * from './positionAfterNode';
export * from './positionBeforeNode';
export * from './positionInsideNode';
export * from './preferredWidth';
export * from './protectionData';
export * from './protectionDataResponse';
export * from './protectionRequest';
export * from './protectionRequestBase';
export * from './protectionRequestV2';
export * from './psSaveOptionsData';
export * from './publicKeyResponse';
export * from './rangeDocument';
export * from './rangeTextResponse';
export * from './replaceRange';
export * from './replaceTextParameters';
export * from './replaceTextResponse';
export * from './reportBuildOptions';
export * from './reportEngineSettings';
export * from './revision';
export * from './revisionCollection';
export * from './revisionsModificationResponse';
export * from './revisionsResponse';
export * from './rtfSaveOptionsData';
export * from './run';
export * from './runBase';
export * from './runInsert';
export * from './runLink';
export * from './runResponse';
export * from './runs';
export * from './runsResponse';
export * from './runUpdate';
export * from './saveOptionsData';
export * from './saveResponse';
export * from './saveResult';
export * from './searchResponse';
export * from './searchResult';
export * from './searchResultsCollection';
export * from './section';
export * from './sectionLink';
export * from './sectionLinkCollection';
export * from './sectionLinkCollectionResponse';
export * from './sectionPageSetupResponse';
export * from './sectionResponse';
export * from './shading';
export * from './signature';
export * from './signatureCollectionResponse';
export * from './signOptions';
export * from './splitDocumentResponse';
export * from './splitDocumentResult';
export * from './statDataResponse';
export * from './storageFile';
export * from './storyChildNodes';
export * from './structuredDocumentTag';
export * from './structuredDocumentTagBase';
export * from './structuredDocumentTagCollection';
export * from './structuredDocumentTagInsert';
export * from './structuredDocumentTagListItem';
export * from './structuredDocumentTagResponse';
export * from './structuredDocumentTagsResponse';
export * from './structuredDocumentTagUpdate';
export * from './style';
export * from './styleApply';
export * from './styleCopy';
export * from './styleInsert';
export * from './styleResponse';
export * from './stylesResponse';
export * from './styleUpdate';
export * from './svgSaveOptionsData';
export * from './table';
export * from './tableCell';
export * from './tableCellFormat';
export * from './tableCellFormatResponse';
export * from './tableCellInsert';
export * from './tableCellResponse';
export * from './tableInsert';
export * from './tableLink';
export * from './tableLinkCollection';
export * from './tableLinkCollectionResponse';
export * from './tableProperties';
export * from './tablePropertiesResponse';
export * from './tableResponse';
export * from './tableRow';
export * from './tableRowFormat';
export * from './tableRowFormatResponse';
export * from './tableRowInsert';
export * from './tableRowResponse';
export * from './tabStop';
export * from './tabStopBase';
export * from './tabStopInsert';
export * from './tabStopsResponse';
export * from './textSaveOptionsData';
export * from './tiffSaveOptionsData';
export * from './timeZoneInfoData';
export * from './translateNodeIdResponse';
export * from './txtSaveOptionsBaseData';
export * from './userInformation';
export * from './watermarkDataBase';
export * from './watermarkDataImage';
export * from './watermarkDataText';
export * from './watermarkText';
export * from './wordMLSaveOptionsData';
export * from './wordsApiErrorResponse';
export * from './wordsApiLink';
export * from './wordsResponse';
export * from './xamlFixedSaveOptionsData';
export * from './xamlFlowPackSaveOptionsData';
export * from './xamlFlowSaveOptionsData';
export * from './xmlColor';
export * from './xmlDataLoadOptions';
export * from './xpsSaveOptionsData';
/**
 * WordsIncomingMessage
 */
export declare class WordsIncomingMessage<T> {
    /**
     * Gets or sets raw response
     */
    response: IncomingMessage;
    /**
     * Get or set parsed response
     */
    body: T;
}
declare const enumsMap: {
    "Border.BorderTypeEnum": typeof importedBorder.Border.BorderTypeEnum;
    "Border.LineStyleEnum": typeof importedBorder.Border.LineStyleEnum;
    "CompareOptions.TargetEnum": typeof importedCompareOptions.CompareOptions.TargetEnum;
    "Document.SourceFormatEnum": typeof importedDocument.Document.SourceFormatEnum;
    "DocumentEntry.ImportFormatModeEnum": typeof importedDocumentEntry.DocumentEntry.ImportFormatModeEnum;
    "DrawingObject.RelativeHorizontalPositionEnum": typeof importedDrawingObject.DrawingObject.RelativeHorizontalPositionEnum;
    "DrawingObject.RelativeVerticalPositionEnum": typeof importedDrawingObject.DrawingObject.RelativeVerticalPositionEnum;
    "DrawingObject.WrapTypeEnum": typeof importedDrawingObject.DrawingObject.WrapTypeEnum;
    "DrawingObjectInsert.RelativeHorizontalPositionEnum": typeof importedDrawingObjectInsert.DrawingObjectInsert.RelativeHorizontalPositionEnum;
    "DrawingObjectInsert.RelativeVerticalPositionEnum": typeof importedDrawingObjectInsert.DrawingObjectInsert.RelativeVerticalPositionEnum;
    "DrawingObjectInsert.WrapTypeEnum": typeof importedDrawingObjectInsert.DrawingObjectInsert.WrapTypeEnum;
    "DrawingObjectUpdate.RelativeHorizontalPositionEnum": typeof importedDrawingObjectUpdate.DrawingObjectUpdate.RelativeHorizontalPositionEnum;
    "DrawingObjectUpdate.RelativeVerticalPositionEnum": typeof importedDrawingObjectUpdate.DrawingObjectUpdate.RelativeVerticalPositionEnum;
    "DrawingObjectUpdate.WrapTypeEnum": typeof importedDrawingObjectUpdate.DrawingObjectUpdate.WrapTypeEnum;
    "FieldOptions.FieldIndexFormatEnum": typeof importedFieldOptions.FieldOptions.FieldIndexFormatEnum;
    "FieldOptions.FieldUpdateCultureSourceEnum": typeof importedFieldOptions.FieldOptions.FieldUpdateCultureSourceEnum;
    "FileReference.SourceEnum": typeof FileReference.SourceEnum;
    "FixedPageSaveOptionsData.ColorModeEnum": typeof importedFixedPageSaveOptionsData.FixedPageSaveOptionsData.ColorModeEnum;
    "FixedPageSaveOptionsData.NumeralFormatEnum": typeof importedFixedPageSaveOptionsData.FixedPageSaveOptionsData.NumeralFormatEnum;
    "Font.StyleIdentifierEnum": typeof importedFont.Font.StyleIdentifierEnum;
    "Font.TextEffectEnum": typeof importedFont.Font.TextEffectEnum;
    "Font.UnderlineEnum": typeof importedFont.Font.UnderlineEnum;
    "Footnote.FootnoteTypeEnum": typeof importedFootnote.Footnote.FootnoteTypeEnum;
    "FootnoteBase.FootnoteTypeEnum": typeof importedFootnoteBase.FootnoteBase.FootnoteTypeEnum;
    "FormFieldTextInput.TextInputTypeEnum": typeof importedFormFieldTextInput.FormFieldTextInput.TextInputTypeEnum;
    "HeaderFooterLink.TypeEnum": typeof importedHeaderFooterLink.HeaderFooterLink.TypeEnum;
    "HtmlFixedSaveOptionsData.FontFormatEnum": typeof importedHtmlFixedSaveOptionsData.HtmlFixedSaveOptionsData.FontFormatEnum;
    "HtmlFixedSaveOptionsData.PageHorizontalAlignmentEnum": typeof importedHtmlFixedSaveOptionsData.HtmlFixedSaveOptionsData.PageHorizontalAlignmentEnum;
    "HtmlSaveOptionsData.CssStyleSheetTypeEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.CssStyleSheetTypeEnum;
    "HtmlSaveOptionsData.DocumentSplitCriteriaEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.DocumentSplitCriteriaEnum;
    "HtmlSaveOptionsData.ExportHeadersFootersModeEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.ExportHeadersFootersModeEnum;
    "HtmlSaveOptionsData.ExportListLabelsEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.ExportListLabelsEnum;
    "HtmlSaveOptionsData.HtmlVersionEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.HtmlVersionEnum;
    "HtmlSaveOptionsData.MetafileFormatEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.MetafileFormatEnum;
    "HtmlSaveOptionsData.OfficeMathOutputModeEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.OfficeMathOutputModeEnum;
    "HtmlSaveOptionsData.TableWidthOutputModeEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.TableWidthOutputModeEnum;
    "ImageSaveOptionsData.ImageColorModeEnum": typeof importedImageSaveOptionsData.ImageSaveOptionsData.ImageColorModeEnum;
    "ImageSaveOptionsData.PixelFormatEnum": typeof importedImageSaveOptionsData.ImageSaveOptionsData.PixelFormatEnum;
    "JsonDataLoadOptions.SimpleValueParseModeEnum": typeof importedJsonDataLoadOptions.JsonDataLoadOptions.SimpleValueParseModeEnum;
    "ListInsert.TemplateEnum": typeof importedListInsert.ListInsert.TemplateEnum;
    "ListLevel.NumberStyleEnum": typeof importedListLevel.ListLevel.NumberStyleEnum;
    "ListLevel.AlignmentEnum": typeof importedListLevel.ListLevel.AlignmentEnum;
    "ListLevel.TrailingCharacterEnum": typeof importedListLevel.ListLevel.TrailingCharacterEnum;
    "ListLevelUpdate.NumberStyleEnum": typeof importedListLevelUpdate.ListLevelUpdate.NumberStyleEnum;
    "ListLevelUpdate.AlignmentEnum": typeof importedListLevelUpdate.ListLevelUpdate.AlignmentEnum;
    "ListLevelUpdate.TrailingCharacterEnum": typeof importedListLevelUpdate.ListLevelUpdate.TrailingCharacterEnum;
    "MarkdownSaveOptionsData.TableContentAlignmentEnum": typeof importedMarkdownSaveOptionsData.MarkdownSaveOptionsData.TableContentAlignmentEnum;
    "MetafileRenderingOptionsData.EmfPlusDualRenderingModeEnum": typeof importedMetafileRenderingOptionsData.MetafileRenderingOptionsData.EmfPlusDualRenderingModeEnum;
    "MetafileRenderingOptionsData.RenderingModeEnum": typeof importedMetafileRenderingOptionsData.MetafileRenderingOptionsData.RenderingModeEnum;
    "OdtSaveOptionsData.MeasureUnitEnum": typeof importedOdtSaveOptionsData.OdtSaveOptionsData.MeasureUnitEnum;
    "OfficeMathObject.DisplayTypeEnum": typeof importedOfficeMathObject.OfficeMathObject.DisplayTypeEnum;
    "OfficeMathObject.JustificationEnum": typeof importedOfficeMathObject.OfficeMathObject.JustificationEnum;
    "OfficeMathObject.MathObjectTypeEnum": typeof importedOfficeMathObject.OfficeMathObject.MathObjectTypeEnum;
    "OoxmlSaveOptionsData.ComplianceEnum": typeof importedOoxmlSaveOptionsData.OoxmlSaveOptionsData.ComplianceEnum;
    "OoxmlSaveOptionsData.CompressionLevelEnum": typeof importedOoxmlSaveOptionsData.OoxmlSaveOptionsData.CompressionLevelEnum;
    "OptimizationOptions.MsWordVersionEnum": typeof importedOptimizationOptions.OptimizationOptions.MsWordVersionEnum;
    "PageSetup.BorderAppliesToEnum": typeof importedPageSetup.PageSetup.BorderAppliesToEnum;
    "PageSetup.BorderDistanceFromEnum": typeof importedPageSetup.PageSetup.BorderDistanceFromEnum;
    "PageSetup.LineNumberRestartModeEnum": typeof importedPageSetup.PageSetup.LineNumberRestartModeEnum;
    "PageSetup.OrientationEnum": typeof importedPageSetup.PageSetup.OrientationEnum;
    "PageSetup.PageNumberStyleEnum": typeof importedPageSetup.PageSetup.PageNumberStyleEnum;
    "PageSetup.PaperSizeEnum": typeof importedPageSetup.PageSetup.PaperSizeEnum;
    "PageSetup.SectionStartEnum": typeof importedPageSetup.PageSetup.SectionStartEnum;
    "PageSetup.VerticalAlignmentEnum": typeof importedPageSetup.PageSetup.VerticalAlignmentEnum;
    "ParagraphFormatBase.AlignmentEnum": typeof importedParagraphFormatBase.ParagraphFormatBase.AlignmentEnum;
    "ParagraphFormatBase.DropCapPositionEnum": typeof importedParagraphFormatBase.ParagraphFormatBase.DropCapPositionEnum;
    "ParagraphFormatBase.LineSpacingRuleEnum": typeof importedParagraphFormatBase.ParagraphFormatBase.LineSpacingRuleEnum;
    "ParagraphFormatBase.OutlineLevelEnum": typeof importedParagraphFormatBase.ParagraphFormatBase.OutlineLevelEnum;
    "ParagraphFormatBase.StyleIdentifierEnum": typeof importedParagraphFormatBase.ParagraphFormatBase.StyleIdentifierEnum;
    "PdfDigitalSignatureDetailsData.HashAlgorithmEnum": typeof importedPdfDigitalSignatureDetailsData.PdfDigitalSignatureDetailsData.HashAlgorithmEnum;
    PdfPermissions: typeof importedPdfPermissions.PdfPermissions;
    "PdfSaveOptionsData.ComplianceEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.ComplianceEnum;
    "PdfSaveOptionsData.CustomPropertiesExportEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.CustomPropertiesExportEnum;
    "PdfSaveOptionsData.FontEmbeddingModeEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.FontEmbeddingModeEnum;
    "PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum;
    "PdfSaveOptionsData.ImageColorSpaceExportModeEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.ImageColorSpaceExportModeEnum;
    "PdfSaveOptionsData.PageModeEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.PageModeEnum;
    "PdfSaveOptionsData.TextCompressionEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.TextCompressionEnum;
    "PdfSaveOptionsData.ZoomBehaviorEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.ZoomBehaviorEnum;
    "PreferredWidth.TypeEnum": typeof importedPreferredWidth.PreferredWidth.TypeEnum;
    "ProtectionData.ProtectionTypeEnum": typeof importedProtectionData.ProtectionData.ProtectionTypeEnum;
    "ProtectionRequestV2.ProtectionTypeEnum": typeof importedProtectionRequestV2.ProtectionRequestV2.ProtectionTypeEnum;
    "ReplaceRange.TextTypeEnum": typeof importedReplaceRange.ReplaceRange.TextTypeEnum;
    ReportBuildOptions: typeof importedReportBuildOptions.ReportBuildOptions;
    "ReportEngineSettings.DataSourceTypeEnum": typeof importedReportEngineSettings.ReportEngineSettings.DataSourceTypeEnum;
    "SaveOptionsData.Dml3DEffectsRenderingModeEnum": typeof importedSaveOptionsData.SaveOptionsData.Dml3DEffectsRenderingModeEnum;
    "SaveOptionsData.DmlEffectsRenderingModeEnum": typeof importedSaveOptionsData.SaveOptionsData.DmlEffectsRenderingModeEnum;
    "SaveOptionsData.DmlRenderingModeEnum": typeof importedSaveOptionsData.SaveOptionsData.DmlRenderingModeEnum;
    "SaveOptionsData.ImlRenderingModeEnum": typeof importedSaveOptionsData.SaveOptionsData.ImlRenderingModeEnum;
    "Shading.TextureEnum": typeof importedShading.Shading.TextureEnum;
    "StructuredDocumentTag.LevelEnum": typeof importedStructuredDocumentTag.StructuredDocumentTag.LevelEnum;
    "StructuredDocumentTag.SdtTypeEnum": typeof importedStructuredDocumentTag.StructuredDocumentTag.SdtTypeEnum;
    "StructuredDocumentTagBase.AppearanceEnum": typeof importedStructuredDocumentTagBase.StructuredDocumentTagBase.AppearanceEnum;
    "StructuredDocumentTagBase.DateStorageFormatEnum": typeof importedStructuredDocumentTagBase.StructuredDocumentTagBase.DateStorageFormatEnum;
    "StructuredDocumentTagBase.CalendarTypeEnum": typeof importedStructuredDocumentTagBase.StructuredDocumentTagBase.CalendarTypeEnum;
    "StructuredDocumentTagInsert.LevelEnum": typeof importedStructuredDocumentTagInsert.StructuredDocumentTagInsert.LevelEnum;
    "StructuredDocumentTagInsert.SdtTypeEnum": typeof importedStructuredDocumentTagInsert.StructuredDocumentTagInsert.SdtTypeEnum;
    "Style.TypeEnum": typeof importedStyle.Style.TypeEnum;
    "Style.StyleIdentifierEnum": typeof importedStyle.Style.StyleIdentifierEnum;
    "StyleInsert.StyleTypeEnum": typeof importedStyleInsert.StyleInsert.StyleTypeEnum;
    "SvgSaveOptionsData.TextOutputModeEnum": typeof importedSvgSaveOptionsData.SvgSaveOptionsData.TextOutputModeEnum;
    "TableCellFormat.HorizontalMergeEnum": typeof importedTableCellFormat.TableCellFormat.HorizontalMergeEnum;
    "TableCellFormat.OrientationEnum": typeof importedTableCellFormat.TableCellFormat.OrientationEnum;
    "TableCellFormat.VerticalAlignmentEnum": typeof importedTableCellFormat.TableCellFormat.VerticalAlignmentEnum;
    "TableCellFormat.VerticalMergeEnum": typeof importedTableCellFormat.TableCellFormat.VerticalMergeEnum;
    "TableProperties.AlignmentEnum": typeof importedTableProperties.TableProperties.AlignmentEnum;
    "TableProperties.StyleIdentifierEnum": typeof importedTableProperties.TableProperties.StyleIdentifierEnum;
    "TableProperties.StyleOptionsEnum": typeof importedTableProperties.TableProperties.StyleOptionsEnum;
    "TableProperties.TextWrappingEnum": typeof importedTableProperties.TableProperties.TextWrappingEnum;
    "TableRowFormat.HeightRuleEnum": typeof importedTableRowFormat.TableRowFormat.HeightRuleEnum;
    "TabStopBase.AlignmentEnum": typeof importedTabStopBase.TabStopBase.AlignmentEnum;
    "TabStopBase.LeaderEnum": typeof importedTabStopBase.TabStopBase.LeaderEnum;
    "TiffSaveOptionsData.TiffBinarizationMethodEnum": typeof importedTiffSaveOptionsData.TiffSaveOptionsData.TiffBinarizationMethodEnum;
    "TiffSaveOptionsData.TiffCompressionEnum": typeof importedTiffSaveOptionsData.TiffSaveOptionsData.TiffCompressionEnum;
    "TxtSaveOptionsBaseData.ExportHeadersFootersModeEnum": typeof importedTxtSaveOptionsBaseData.TxtSaveOptionsBaseData.ExportHeadersFootersModeEnum;
    "WatermarkDataText.LayoutEnum": typeof importedWatermarkDataText.WatermarkDataText.LayoutEnum;
};
declare const typeMap: {
    FileReference: typeof FileReference;
    ApiError: typeof importedApiError.ApiError;
    AvailableFontsResponse: typeof importedAvailableFontsResponse.AvailableFontsResponse;
    Azw3SaveOptionsData: typeof importedAzw3SaveOptionsData.Azw3SaveOptionsData;
    BmpSaveOptionsData: typeof importedBmpSaveOptionsData.BmpSaveOptionsData;
    Bookmark: typeof importedBookmark.Bookmark;
    BookmarkData: typeof importedBookmarkData.BookmarkData;
    BookmarkInsert: typeof importedBookmarkInsert.BookmarkInsert;
    BookmarkResponse: typeof importedBookmarkResponse.BookmarkResponse;
    Bookmarks: typeof importedBookmarks.Bookmarks;
    BookmarksOutlineLevelData: typeof importedBookmarksOutlineLevelData.BookmarksOutlineLevelData;
    BookmarksResponse: typeof importedBookmarksResponse.BookmarksResponse;
    Border: typeof importedBorder.Border;
    BorderResponse: typeof importedBorderResponse.BorderResponse;
    BordersCollection: typeof importedBordersCollection.BordersCollection;
    BordersResponse: typeof importedBordersResponse.BordersResponse;
    ClassificationResponse: typeof importedClassificationResponse.ClassificationResponse;
    ClassificationResult: typeof importedClassificationResult.ClassificationResult;
    Comment: typeof importedComment.Comment;
    CommentInsert: typeof importedCommentInsert.CommentInsert;
    CommentLink: typeof importedCommentLink.CommentLink;
    CommentResponse: typeof importedCommentResponse.CommentResponse;
    CommentsCollection: typeof importedCommentsCollection.CommentsCollection;
    CommentsResponse: typeof importedCommentsResponse.CommentsResponse;
    CommentUpdate: typeof importedCommentUpdate.CommentUpdate;
    CompareData: typeof importedCompareData.CompareData;
    CompareOptions: typeof importedCompareOptions.CompareOptions;
    CompressOptions: typeof importedCompressOptions.CompressOptions;
    CompressResponse: typeof importedCompressResponse.CompressResponse;
    CsvDataLoadOptions: typeof importedCsvDataLoadOptions.CsvDataLoadOptions;
    CustomXmlPart: typeof importedCustomXmlPart.CustomXmlPart;
    CustomXmlPartInsert: typeof importedCustomXmlPartInsert.CustomXmlPartInsert;
    CustomXmlPartLink: typeof importedCustomXmlPartLink.CustomXmlPartLink;
    CustomXmlPartResponse: typeof importedCustomXmlPartResponse.CustomXmlPartResponse;
    CustomXmlPartsCollection: typeof importedCustomXmlPartsCollection.CustomXmlPartsCollection;
    CustomXmlPartsResponse: typeof importedCustomXmlPartsResponse.CustomXmlPartsResponse;
    CustomXmlPartUpdate: typeof importedCustomXmlPartUpdate.CustomXmlPartUpdate;
    DigitalSignatureDetails: typeof importedDigitalSignatureDetails.DigitalSignatureDetails;
    DocmSaveOptionsData: typeof importedDocmSaveOptionsData.DocmSaveOptionsData;
    DocSaveOptionsData: typeof importedDocSaveOptionsData.DocSaveOptionsData;
    Document: typeof importedDocument.Document;
    DocumentEntry: typeof importedDocumentEntry.DocumentEntry;
    DocumentEntryList: typeof importedDocumentEntryList.DocumentEntryList;
    DocumentPosition: typeof importedDocumentPosition.DocumentPosition;
    DocumentProperties: typeof importedDocumentProperties.DocumentProperties;
    DocumentPropertiesResponse: typeof importedDocumentPropertiesResponse.DocumentPropertiesResponse;
    DocumentProperty: typeof importedDocumentProperty.DocumentProperty;
    DocumentPropertyCreateOrUpdate: typeof importedDocumentPropertyCreateOrUpdate.DocumentPropertyCreateOrUpdate;
    DocumentPropertyResponse: typeof importedDocumentPropertyResponse.DocumentPropertyResponse;
    DocumentResponse: typeof importedDocumentResponse.DocumentResponse;
    DocumentStatData: typeof importedDocumentStatData.DocumentStatData;
    DocxSaveOptionsData: typeof importedDocxSaveOptionsData.DocxSaveOptionsData;
    DotmSaveOptionsData: typeof importedDotmSaveOptionsData.DotmSaveOptionsData;
    DotSaveOptionsData: typeof importedDotSaveOptionsData.DotSaveOptionsData;
    DotxSaveOptionsData: typeof importedDotxSaveOptionsData.DotxSaveOptionsData;
    DownsampleOptionsData: typeof importedDownsampleOptionsData.DownsampleOptionsData;
    DrawingObject: typeof importedDrawingObject.DrawingObject;
    DrawingObjectCollection: typeof importedDrawingObjectCollection.DrawingObjectCollection;
    DrawingObjectInsert: typeof importedDrawingObjectInsert.DrawingObjectInsert;
    DrawingObjectLink: typeof importedDrawingObjectLink.DrawingObjectLink;
    DrawingObjectResponse: typeof importedDrawingObjectResponse.DrawingObjectResponse;
    DrawingObjectsResponse: typeof importedDrawingObjectsResponse.DrawingObjectsResponse;
    DrawingObjectUpdate: typeof importedDrawingObjectUpdate.DrawingObjectUpdate;
    EmfSaveOptionsData: typeof importedEmfSaveOptionsData.EmfSaveOptionsData;
    EpsSaveOptionsData: typeof importedEpsSaveOptionsData.EpsSaveOptionsData;
    EpubSaveOptionsData: typeof importedEpubSaveOptionsData.EpubSaveOptionsData;
    Error: typeof importedError.Error;
    ErrorDetails: typeof importedErrorDetails.ErrorDetails;
    Field: typeof importedField.Field;
    FieldCollection: typeof importedFieldCollection.FieldCollection;
    FieldInsert: typeof importedFieldInsert.FieldInsert;
    FieldLink: typeof importedFieldLink.FieldLink;
    FieldNames: typeof importedFieldNames.FieldNames;
    FieldNamesResponse: typeof importedFieldNamesResponse.FieldNamesResponse;
    FieldOptions: typeof importedFieldOptions.FieldOptions;
    FieldResponse: typeof importedFieldResponse.FieldResponse;
    FieldsResponse: typeof importedFieldsResponse.FieldsResponse;
    FieldUpdate: typeof importedFieldUpdate.FieldUpdate;
    FileLink: typeof importedFileLink.FileLink;
    FilesList: typeof importedFilesList.FilesList;
    FilesUploadResult: typeof importedFilesUploadResult.FilesUploadResult;
    FlatOpcMacroSaveOptionsData: typeof importedFlatOpcMacroSaveOptionsData.FlatOpcMacroSaveOptionsData;
    FlatOpcSaveOptionsData: typeof importedFlatOpcSaveOptionsData.FlatOpcSaveOptionsData;
    FlatOpcTemplateMacroSaveOptionsData: typeof importedFlatOpcTemplateMacroSaveOptionsData.FlatOpcTemplateMacroSaveOptionsData;
    FlatOpcTemplateSaveOptionsData: typeof importedFlatOpcTemplateSaveOptionsData.FlatOpcTemplateSaveOptionsData;
    Font: typeof importedFont.Font;
    FontInfo: typeof importedFontInfo.FontInfo;
    FontResponse: typeof importedFontResponse.FontResponse;
    Footnote: typeof importedFootnote.Footnote;
    FootnoteCollection: typeof importedFootnoteCollection.FootnoteCollection;
    FootnoteInsert: typeof importedFootnoteInsert.FootnoteInsert;
    FootnoteLink: typeof importedFootnoteLink.FootnoteLink;
    FootnoteResponse: typeof importedFootnoteResponse.FootnoteResponse;
    FootnotesResponse: typeof importedFootnotesResponse.FootnotesResponse;
    FootnotesStatData: typeof importedFootnotesStatData.FootnotesStatData;
    FootnoteUpdate: typeof importedFootnoteUpdate.FootnoteUpdate;
    FormFieldCheckbox: typeof importedFormFieldCheckbox.FormFieldCheckbox;
    FormFieldCollection: typeof importedFormFieldCollection.FormFieldCollection;
    FormFieldDropDown: typeof importedFormFieldDropDown.FormFieldDropDown;
    FormFieldResponse: typeof importedFormFieldResponse.FormFieldResponse;
    FormFieldsResponse: typeof importedFormFieldsResponse.FormFieldsResponse;
    FormFieldTextInput: typeof importedFormFieldTextInput.FormFieldTextInput;
    GifSaveOptionsData: typeof importedGifSaveOptionsData.GifSaveOptionsData;
    HeaderFooter: typeof importedHeaderFooter.HeaderFooter;
    HeaderFooterLink: typeof importedHeaderFooterLink.HeaderFooterLink;
    HeaderFooterLinkCollection: typeof importedHeaderFooterLinkCollection.HeaderFooterLinkCollection;
    HeaderFooterResponse: typeof importedHeaderFooterResponse.HeaderFooterResponse;
    HeaderFootersResponse: typeof importedHeaderFootersResponse.HeaderFootersResponse;
    HtmlFixedSaveOptionsData: typeof importedHtmlFixedSaveOptionsData.HtmlFixedSaveOptionsData;
    HtmlSaveOptionsData: typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData;
    Hyperlink: typeof importedHyperlink.Hyperlink;
    HyperlinkResponse: typeof importedHyperlinkResponse.HyperlinkResponse;
    Hyperlinks: typeof importedHyperlinks.Hyperlinks;
    HyperlinksResponse: typeof importedHyperlinksResponse.HyperlinksResponse;
    ImageEntry: typeof importedImageEntry.ImageEntry;
    ImageEntryList: typeof importedImageEntryList.ImageEntryList;
    InfoAdditionalItem: typeof importedInfoAdditionalItem.InfoAdditionalItem;
    InfoResponse: typeof importedInfoResponse.InfoResponse;
    JpegSaveOptionsData: typeof importedJpegSaveOptionsData.JpegSaveOptionsData;
    JsonDataLoadOptions: typeof importedJsonDataLoadOptions.JsonDataLoadOptions;
    Link: typeof importedLink.Link;
    LinkElement: typeof importedLinkElement.LinkElement;
    ListFormat: typeof importedListFormat.ListFormat;
    ListFormatUpdate: typeof importedListFormatUpdate.ListFormatUpdate;
    ListInfo: typeof importedListInfo.ListInfo;
    ListInsert: typeof importedListInsert.ListInsert;
    ListLevel: typeof importedListLevel.ListLevel;
    ListLevels: typeof importedListLevels.ListLevels;
    ListLevelUpdate: typeof importedListLevelUpdate.ListLevelUpdate;
    ListResponse: typeof importedListResponse.ListResponse;
    Lists: typeof importedLists.Lists;
    ListsResponse: typeof importedListsResponse.ListsResponse;
    ListUpdate: typeof importedListUpdate.ListUpdate;
    LoadWebDocumentData: typeof importedLoadWebDocumentData.LoadWebDocumentData;
    MarkdownSaveOptionsData: typeof importedMarkdownSaveOptionsData.MarkdownSaveOptionsData;
    MetafileRenderingOptionsData: typeof importedMetafileRenderingOptionsData.MetafileRenderingOptionsData;
    MhtmlSaveOptionsData: typeof importedMhtmlSaveOptionsData.MhtmlSaveOptionsData;
    ModificationOperationResult: typeof importedModificationOperationResult.ModificationOperationResult;
    NodeLink: typeof importedNodeLink.NodeLink;
    OdtSaveOptionsData: typeof importedOdtSaveOptionsData.OdtSaveOptionsData;
    OfficeMathLink: typeof importedOfficeMathLink.OfficeMathLink;
    OfficeMathObject: typeof importedOfficeMathObject.OfficeMathObject;
    OfficeMathObjectResponse: typeof importedOfficeMathObjectResponse.OfficeMathObjectResponse;
    OfficeMathObjectsCollection: typeof importedOfficeMathObjectsCollection.OfficeMathObjectsCollection;
    OfficeMathObjectsResponse: typeof importedOfficeMathObjectsResponse.OfficeMathObjectsResponse;
    OpenXpsSaveOptionsData: typeof importedOpenXpsSaveOptionsData.OpenXpsSaveOptionsData;
    OptimizationOptions: typeof importedOptimizationOptions.OptimizationOptions;
    OttSaveOptionsData: typeof importedOttSaveOptionsData.OttSaveOptionsData;
    OutlineOptionsData: typeof importedOutlineOptionsData.OutlineOptionsData;
    PageNumber: typeof importedPageNumber.PageNumber;
    PageSetup: typeof importedPageSetup.PageSetup;
    PageStatData: typeof importedPageStatData.PageStatData;
    Paragraph: typeof importedParagraph.Paragraph;
    ParagraphFormat: typeof importedParagraphFormat.ParagraphFormat;
    ParagraphFormatResponse: typeof importedParagraphFormatResponse.ParagraphFormatResponse;
    ParagraphFormatUpdate: typeof importedParagraphFormatUpdate.ParagraphFormatUpdate;
    ParagraphInsert: typeof importedParagraphInsert.ParagraphInsert;
    ParagraphLink: typeof importedParagraphLink.ParagraphLink;
    ParagraphLinkCollection: typeof importedParagraphLinkCollection.ParagraphLinkCollection;
    ParagraphLinkCollectionResponse: typeof importedParagraphLinkCollectionResponse.ParagraphLinkCollectionResponse;
    ParagraphListFormatResponse: typeof importedParagraphListFormatResponse.ParagraphListFormatResponse;
    ParagraphResponse: typeof importedParagraphResponse.ParagraphResponse;
    PclSaveOptionsData: typeof importedPclSaveOptionsData.PclSaveOptionsData;
    PdfDigitalSignatureDetailsData: typeof importedPdfDigitalSignatureDetailsData.PdfDigitalSignatureDetailsData;
    PdfEncryptionDetailsData: typeof importedPdfEncryptionDetailsData.PdfEncryptionDetailsData;
    PdfPermissions: typeof importedPdfPermissions.PdfPermissions;
    PdfSaveOptionsData: typeof importedPdfSaveOptionsData.PdfSaveOptionsData;
    PngSaveOptionsData: typeof importedPngSaveOptionsData.PngSaveOptionsData;
    PositionAfterNode: typeof importedPositionAfterNode.PositionAfterNode;
    PositionBeforeNode: typeof importedPositionBeforeNode.PositionBeforeNode;
    PositionInsideNode: typeof importedPositionInsideNode.PositionInsideNode;
    PreferredWidth: typeof importedPreferredWidth.PreferredWidth;
    ProtectionData: typeof importedProtectionData.ProtectionData;
    ProtectionDataResponse: typeof importedProtectionDataResponse.ProtectionDataResponse;
    ProtectionRequest: typeof importedProtectionRequest.ProtectionRequest;
    ProtectionRequestV2: typeof importedProtectionRequestV2.ProtectionRequestV2;
    PsSaveOptionsData: typeof importedPsSaveOptionsData.PsSaveOptionsData;
    PublicKeyResponse: typeof importedPublicKeyResponse.PublicKeyResponse;
    RangeDocument: typeof importedRangeDocument.RangeDocument;
    RangeTextResponse: typeof importedRangeTextResponse.RangeTextResponse;
    ReplaceRange: typeof importedReplaceRange.ReplaceRange;
    ReplaceTextParameters: typeof importedReplaceTextParameters.ReplaceTextParameters;
    ReplaceTextResponse: typeof importedReplaceTextResponse.ReplaceTextResponse;
    ReportBuildOptions: typeof importedReportBuildOptions.ReportBuildOptions;
    ReportEngineSettings: typeof importedReportEngineSettings.ReportEngineSettings;
    Revision: typeof importedRevision.Revision;
    RevisionCollection: typeof importedRevisionCollection.RevisionCollection;
    RevisionsModificationResponse: typeof importedRevisionsModificationResponse.RevisionsModificationResponse;
    RevisionsResponse: typeof importedRevisionsResponse.RevisionsResponse;
    RtfSaveOptionsData: typeof importedRtfSaveOptionsData.RtfSaveOptionsData;
    Run: typeof importedRun.Run;
    RunInsert: typeof importedRunInsert.RunInsert;
    RunLink: typeof importedRunLink.RunLink;
    RunResponse: typeof importedRunResponse.RunResponse;
    Runs: typeof importedRuns.Runs;
    RunsResponse: typeof importedRunsResponse.RunsResponse;
    RunUpdate: typeof importedRunUpdate.RunUpdate;
    SaveResponse: typeof importedSaveResponse.SaveResponse;
    SaveResult: typeof importedSaveResult.SaveResult;
    SearchResponse: typeof importedSearchResponse.SearchResponse;
    SearchResult: typeof importedSearchResult.SearchResult;
    SearchResultsCollection: typeof importedSearchResultsCollection.SearchResultsCollection;
    Section: typeof importedSection.Section;
    SectionLink: typeof importedSectionLink.SectionLink;
    SectionLinkCollection: typeof importedSectionLinkCollection.SectionLinkCollection;
    SectionLinkCollectionResponse: typeof importedSectionLinkCollectionResponse.SectionLinkCollectionResponse;
    SectionPageSetupResponse: typeof importedSectionPageSetupResponse.SectionPageSetupResponse;
    SectionResponse: typeof importedSectionResponse.SectionResponse;
    Shading: typeof importedShading.Shading;
    Signature: typeof importedSignature.Signature;
    SignatureCollectionResponse: typeof importedSignatureCollectionResponse.SignatureCollectionResponse;
    SignOptions: typeof importedSignOptions.SignOptions;
    SplitDocumentResponse: typeof importedSplitDocumentResponse.SplitDocumentResponse;
    SplitDocumentResult: typeof importedSplitDocumentResult.SplitDocumentResult;
    StatDataResponse: typeof importedStatDataResponse.StatDataResponse;
    StorageFile: typeof importedStorageFile.StorageFile;
    StoryChildNodes: typeof importedStoryChildNodes.StoryChildNodes;
    StructuredDocumentTag: typeof importedStructuredDocumentTag.StructuredDocumentTag;
    StructuredDocumentTagCollection: typeof importedStructuredDocumentTagCollection.StructuredDocumentTagCollection;
    StructuredDocumentTagInsert: typeof importedStructuredDocumentTagInsert.StructuredDocumentTagInsert;
    StructuredDocumentTagListItem: typeof importedStructuredDocumentTagListItem.StructuredDocumentTagListItem;
    StructuredDocumentTagResponse: typeof importedStructuredDocumentTagResponse.StructuredDocumentTagResponse;
    StructuredDocumentTagsResponse: typeof importedStructuredDocumentTagsResponse.StructuredDocumentTagsResponse;
    StructuredDocumentTagUpdate: typeof importedStructuredDocumentTagUpdate.StructuredDocumentTagUpdate;
    Style: typeof importedStyle.Style;
    StyleApply: typeof importedStyleApply.StyleApply;
    StyleCopy: typeof importedStyleCopy.StyleCopy;
    StyleInsert: typeof importedStyleInsert.StyleInsert;
    StyleResponse: typeof importedStyleResponse.StyleResponse;
    StylesResponse: typeof importedStylesResponse.StylesResponse;
    StyleUpdate: typeof importedStyleUpdate.StyleUpdate;
    SvgSaveOptionsData: typeof importedSvgSaveOptionsData.SvgSaveOptionsData;
    Table: typeof importedTable.Table;
    TableCell: typeof importedTableCell.TableCell;
    TableCellFormat: typeof importedTableCellFormat.TableCellFormat;
    TableCellFormatResponse: typeof importedTableCellFormatResponse.TableCellFormatResponse;
    TableCellInsert: typeof importedTableCellInsert.TableCellInsert;
    TableCellResponse: typeof importedTableCellResponse.TableCellResponse;
    TableInsert: typeof importedTableInsert.TableInsert;
    TableLink: typeof importedTableLink.TableLink;
    TableLinkCollection: typeof importedTableLinkCollection.TableLinkCollection;
    TableLinkCollectionResponse: typeof importedTableLinkCollectionResponse.TableLinkCollectionResponse;
    TableProperties: typeof importedTableProperties.TableProperties;
    TablePropertiesResponse: typeof importedTablePropertiesResponse.TablePropertiesResponse;
    TableResponse: typeof importedTableResponse.TableResponse;
    TableRow: typeof importedTableRow.TableRow;
    TableRowFormat: typeof importedTableRowFormat.TableRowFormat;
    TableRowFormatResponse: typeof importedTableRowFormatResponse.TableRowFormatResponse;
    TableRowInsert: typeof importedTableRowInsert.TableRowInsert;
    TableRowResponse: typeof importedTableRowResponse.TableRowResponse;
    TabStop: typeof importedTabStop.TabStop;
    TabStopInsert: typeof importedTabStopInsert.TabStopInsert;
    TabStopsResponse: typeof importedTabStopsResponse.TabStopsResponse;
    TextSaveOptionsData: typeof importedTextSaveOptionsData.TextSaveOptionsData;
    TiffSaveOptionsData: typeof importedTiffSaveOptionsData.TiffSaveOptionsData;
    TimeZoneInfoData: typeof importedTimeZoneInfoData.TimeZoneInfoData;
    TranslateNodeIdResponse: typeof importedTranslateNodeIdResponse.TranslateNodeIdResponse;
    UserInformation: typeof importedUserInformation.UserInformation;
    WatermarkDataImage: typeof importedWatermarkDataImage.WatermarkDataImage;
    WatermarkDataText: typeof importedWatermarkDataText.WatermarkDataText;
    WatermarkText: typeof importedWatermarkText.WatermarkText;
    WordMLSaveOptionsData: typeof importedWordMLSaveOptionsData.WordMLSaveOptionsData;
    WordsApiErrorResponse: typeof importedWordsApiErrorResponse.WordsApiErrorResponse;
    WordsApiLink: typeof importedWordsApiLink.WordsApiLink;
    WordsResponse: typeof importedWordsResponse.WordsResponse;
    XamlFixedSaveOptionsData: typeof importedXamlFixedSaveOptionsData.XamlFixedSaveOptionsData;
    XamlFlowPackSaveOptionsData: typeof importedXamlFlowPackSaveOptionsData.XamlFlowPackSaveOptionsData;
    XamlFlowSaveOptionsData: typeof importedXamlFlowSaveOptionsData.XamlFlowSaveOptionsData;
    XmlColor: typeof importedXmlColor.XmlColor;
    XmlDataLoadOptions: typeof importedXmlDataLoadOptions.XmlDataLoadOptions;
    XpsSaveOptionsData: typeof importedXpsSaveOptionsData.XpsSaveOptionsData;
};
/**
 * Request interface.
 */
export interface RequestInterface {
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Create unique request id
 */
export declare function createUid(): string;
export { enumsMap, typeMap };
/**
 * Request model for AcceptAllRevisions operation.
 * Accepts all revisions in the document.
 */
export declare class AcceptAllRevisionsRequest implements RequestInterface {
    constructor(init?: Partial<AcceptAllRevisionsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for AcceptAllRevisionsOnline operation.
 * Accepts all revisions in the document.
 */
export declare class AcceptAllRevisionsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<AcceptAllRevisionsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for AppendDocument operation.
 * Appends documents to the original document.
 */
export declare class AppendDocumentRequest implements RequestInterface {
    constructor(init?: Partial<AppendDocumentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * <see cref="BaseEntryList"/> with a list of entries to append.
     */
    documentList: importedBaseEntryList.BaseEntryList;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for AppendDocumentOnline operation.
 * Appends documents to the original document.
 */
export declare class AppendDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<AppendDocumentOnlineRequest>);
    /**
     * Original document.
     */
    document: Readable;
    /**
     * <see cref="BaseEntryList"/> with a list of entries to append.
     */
    documentList: importedBaseEntryList.BaseEntryList;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ApplyStyleToDocumentElement operation.
 * Applies a style to the document node.
 */
export declare class ApplyStyleToDocumentElementRequest implements RequestInterface {
    constructor(init?: Partial<ApplyStyleToDocumentElementRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree, that supports styles: ParagraphFormat, List, ListLevel, Table.
     */
    styledNodePath: string;
    /**
     * Style to apply.
     */
    styleApply: importedStyleApply.StyleApply;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ApplyStyleToDocumentElementOnline operation.
 * Applies a style to the document node.
 */
export declare class ApplyStyleToDocumentElementOnlineRequest implements RequestInterface {
    constructor(init?: Partial<ApplyStyleToDocumentElementOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree, that supports styles: ParagraphFormat, List, ListLevel, Table.
     */
    styledNodePath: string;
    /**
     * Style to apply.
     */
    styleApply: importedStyleApply.StyleApply;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for BuildReport operation.
 * Executes the report generation process using the specified document template and the external data source in XML, JSON or CSV format.
 */
export declare class BuildReportRequest implements RequestInterface {
    constructor(init?: Partial<BuildReportRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * A string providing a data to populate the specified template. The string must be of one of the following types: xml, json, csv.
     */
    data: string;
    /**
     * An object providing a settings of report engine.
     */
    reportEngineSettings: importedReportEngineSettings.ReportEngineSettings;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The filename of the output document. If this parameter is omitted, the result will be saved with autogenerated name.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for BuildReportOnline operation.
 * Executes the report generation process online using the specified document template and the external data source in XML, JSON or CSV format.
 */
export declare class BuildReportOnlineRequest implements RequestInterface {
    constructor(init?: Partial<BuildReportOnlineRequest>);
    /**
     * File with template.
     */
    template: Readable;
    /**
     * A string providing a data to populate the specified template. The string must be of one of the following types: xml, json, csv.
     */
    data: string;
    /**
     * An object providing a settings of report engine.
     */
    reportEngineSettings: importedReportEngineSettings.ReportEngineSettings;
    /**
     * The filename of the output document, that will be used when the resulting document has a dynamic field {filename}. If it is not set, the "template" will be used instead.
     */
    documentFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for Classify operation.
 * Runs a multi-class text classification for the specified raw text.
 */
export declare class ClassifyRequest implements RequestInterface {
    constructor(init?: Partial<ClassifyRequest>);
    /**
     * The text to classify.
     */
    text: string;
    /**
     * The number of the best classes to return.
     */
    bestClassesCount: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ClassifyDocument operation.
 * Runs a multi-class text classification for the document.
 */
export declare class ClassifyDocumentRequest implements RequestInterface {
    constructor(init?: Partial<ClassifyDocumentRequest>);
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The number of the best classes to return.
     */
    bestClassesCount: string;
    /**
     * The taxonomy to use.
     */
    taxonomy: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ClassifyDocumentOnline operation.
 * Runs a multi-class text classification for the document.
 */
export declare class ClassifyDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<ClassifyDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The number of the best classes to return.
     */
    bestClassesCount: string;
    /**
     * The taxonomy to use.
     */
    taxonomy: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CompareDocument operation.
 * Compares two documents.
 */
export declare class CompareDocumentRequest implements RequestInterface {
    constructor(init?: Partial<CompareDocumentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Compare data.
     */
    compareData: importedCompareData.CompareData;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CompareDocumentOnline operation.
 * Compares two documents.
 */
export declare class CompareDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<CompareDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Compare data.
     */
    compareData: importedCompareData.CompareData;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CompressDocument operation.
 * Compress and resize images inside the document.
 * The default settings allows to reduce the size of the document without any visible degradation of images quality.
 */
export declare class CompressDocumentRequest implements RequestInterface {
    constructor(init?: Partial<CompressDocumentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Options for compress the document.
     */
    compressOptions: importedCompressOptions.CompressOptions;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CompressDocumentOnline operation.
 * Compress and resize images inside the document.
 * The default settings allows to reduce the size of the document without any visible degradation of images quality.
 */
export declare class CompressDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<CompressDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Options for compress the document.
     */
    compressOptions: importedCompressOptions.CompressOptions;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ConvertDocument operation.
 * Converts a document on a local drive to the specified format.
 */
export declare class ConvertDocumentRequest implements RequestInterface {
    constructor(init?: Partial<ConvertDocumentRequest>);
    /**
     * Converting document.
     */
    document: Readable;
    /**
     * The format to convert.
     */
    format: string;
    /**
     * The path to the output document on a local storage.
     */
    outPath: string;
    /**
     * The filename of the output document, that will be used when the resulting document has a dynamic field {filename}. If it is not set, the "sourceFilename" will be used instead.
     */
    fileNameFieldValue: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CopyFile operation.
 * Copy file.
 */
export declare class CopyFileRequest implements RequestInterface {
    constructor(init?: Partial<CopyFileRequest>);
    /**
     * Destination file path.
     */
    destPath: string;
    /**
     * Source file's path e.g. '/Folder 1/file.ext' or '/Bucket/Folder 1/file.ext'.
     */
    srcPath: string;
    /**
     * Source storage name.
     */
    srcStorageName: string;
    /**
     * Destination storage name.
     */
    destStorageName: string;
    /**
     * File version ID to copy.
     */
    versionId: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CopyFolder operation.
 * Copy folder.
 */
export declare class CopyFolderRequest implements RequestInterface {
    constructor(init?: Partial<CopyFolderRequest>);
    /**
     * Destination folder path e.g. '/dst'.
     */
    destPath: string;
    /**
     * Source folder path e.g. /Folder1.
     */
    srcPath: string;
    /**
     * Source storage name.
     */
    srcStorageName: string;
    /**
     * Destination storage name.
     */
    destStorageName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CopyStyle operation.
 * Makes a copy of the style in the document.
 */
export declare class CopyStyleRequest implements RequestInterface {
    constructor(init?: Partial<CopyStyleRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Style to copy.
     */
    styleCopy: importedStyleCopy.StyleCopy;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CopyStyleOnline operation.
 * Makes a copy of the style in the document.
 */
export declare class CopyStyleOnlineRequest implements RequestInterface {
    constructor(init?: Partial<CopyStyleOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Style to copy.
     */
    styleCopy: importedStyleCopy.StyleCopy;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CopyStylesFromTemplate operation.
 * Copies styles from the origin document to the target document.
 */
export declare class CopyStylesFromTemplateRequest implements RequestInterface {
    constructor(init?: Partial<CopyStylesFromTemplateRequest>);
    /**
     * The filename of the target document.
     */
    name: string;
    /**
     * The filename of the origin document.
     */
    templateName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CreateDocument operation.
 * Creates a new document in cloud storage in the format, determined by the file extension.
 * Supported all save format extensions.
 */
export declare class CreateDocumentRequest implements RequestInterface {
    constructor(init?: Partial<CreateDocumentRequest>);
    /**
     * The filename of the document.
     */
    fileName: string;
    /**
     * The path to the document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CreateFolder operation.
 * Create the folder.
 */
export declare class CreateFolderRequest implements RequestInterface {
    constructor(init?: Partial<CreateFolderRequest>);
    /**
     * Target folder's path e.g. Folder1/Folder2/. The folders will be created recursively.
     */
    path: string;
    /**
     * Storage name.
     */
    storageName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CreateOrUpdateDocumentProperty operation.
 * Adds a new or updates an existing document property.
 */
export declare class CreateOrUpdateDocumentPropertyRequest implements RequestInterface {
    constructor(init?: Partial<CreateOrUpdateDocumentPropertyRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the property.
     */
    propertyName: string;
    /**
     * The property with new value.
     */
    property: importedDocumentPropertyCreateOrUpdate.DocumentPropertyCreateOrUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for CreateOrUpdateDocumentPropertyOnline operation.
 * Adds a new or updates an existing document property.
 */
export declare class CreateOrUpdateDocumentPropertyOnlineRequest implements RequestInterface {
    constructor(init?: Partial<CreateOrUpdateDocumentPropertyOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the property.
     */
    propertyName: string;
    /**
     * The property with new value.
     */
    property: importedDocumentPropertyCreateOrUpdate.DocumentPropertyCreateOrUpdate;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteAllParagraphTabStops operation.
 * Removes paragraph tab stops from the document node.
 */
export declare class DeleteAllParagraphTabStopsRequest implements RequestInterface {
    constructor(init?: Partial<DeleteAllParagraphTabStopsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteAllParagraphTabStopsOnline operation.
 * Removes paragraph tab stops from the document node.
 */
export declare class DeleteAllParagraphTabStopsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteAllParagraphTabStopsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBookmark operation.
 * Removes a bookmark from the document.
 */
export declare class DeleteBookmarkRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBookmarkRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the bookmark.
     */
    bookmarkName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBookmarkOnline operation.
 * Removes a bookmark from the document.
 */
export declare class DeleteBookmarkOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBookmarkOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the bookmark.
     */
    bookmarkName: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBookmarks operation.
 * Removes all bookmarks from the document.
 */
export declare class DeleteBookmarksRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBookmarksRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBookmarksOnline operation.
 * Removes all bookmarks from the document.
 */
export declare class DeleteBookmarksOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBookmarksOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBorder operation.
 * Removes a border from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class DeleteBorderRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBorderRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBorderOnline operation.
 * Removes a border from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class DeleteBorderOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBorderOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBorders operation.
 * Removes borders from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class DeleteBordersRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBordersRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteBordersOnline operation.
 * Removes borders from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class DeleteBordersOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteBordersOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteComment operation.
 * Removes a comment from the document.
 */
export declare class DeleteCommentRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCommentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the comment.
     */
    commentIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteCommentOnline operation.
 * Removes a comment from the document.
 */
export declare class DeleteCommentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCommentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the comment.
     */
    commentIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteComments operation.
 * Removes all comments from the document.
 */
export declare class DeleteCommentsRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCommentsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteCommentsOnline operation.
 * Removes all comments from the document.
 */
export declare class DeleteCommentsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCommentsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteCustomXmlPart operation.
 * Removes the custom xml part from the document.
 */
export declare class DeleteCustomXmlPartRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCustomXmlPartRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the custom xml part. This index is the number of the entry in the collection of custom xml parts, not the ID of the part.
     */
    customXmlPartIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteCustomXmlPartOnline operation.
 * Removes the custom xml part from the document.
 */
export declare class DeleteCustomXmlPartOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCustomXmlPartOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the custom xml part. This index is the number of the entry in the collection of custom xml parts, not the ID of the part.
     */
    customXmlPartIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteCustomXmlParts operation.
 * Removes all custom xml parts from the document.
 */
export declare class DeleteCustomXmlPartsRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCustomXmlPartsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteCustomXmlPartsOnline operation.
 * Removes all custom xml parts from the document.
 */
export declare class DeleteCustomXmlPartsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteCustomXmlPartsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteDocumentProperty operation.
 * Removes a document property.
 */
export declare class DeleteDocumentPropertyRequest implements RequestInterface {
    constructor(init?: Partial<DeleteDocumentPropertyRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the property.
     */
    propertyName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteDocumentPropertyOnline operation.
 * Removes a document property.
 */
export declare class DeleteDocumentPropertyOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteDocumentPropertyOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the property.
     */
    propertyName: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteDrawingObject operation.
 * Removes a DrawingObject from the document node.
 */
export declare class DeleteDrawingObjectRequest implements RequestInterface {
    constructor(init?: Partial<DeleteDrawingObjectRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteDrawingObjectOnline operation.
 * Removes a DrawingObject from the document node.
 */
export declare class DeleteDrawingObjectOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteDrawingObjectOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteField operation.
 * Removes a field from the document node.
 */
export declare class DeleteFieldRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFieldOnline operation.
 * Removes a field from the document node.
 */
export declare class DeleteFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFields operation.
 * Removes fields from the document node.
 */
export declare class DeleteFieldsRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFieldsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFieldsOnline operation.
 * Removes fields from the document node.
 */
export declare class DeleteFieldsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFieldsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFile operation.
 * Delete file.
 */
export declare class DeleteFileRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFileRequest>);
    /**
     * Path of the file including the file name and extension e.g. /folder1/file.ext.
     */
    path: string;
    /**
     * Storage name.
     */
    storageName: string;
    /**
     * File version ID to delete.
     */
    versionId: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFolder operation.
 * Delete folder.
 */
export declare class DeleteFolderRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFolderRequest>);
    /**
     * Folder path e.g. '/folder'.
     */
    path: string;
    /**
     * Storage name.
     */
    storageName: string;
    /**
     * Enable to delete folders, subfolders and files.
     */
    recursive: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFootnote operation.
 * Removes a footnote from the document node.
 */
export declare class DeleteFootnoteRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFootnoteRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFootnoteOnline operation.
 * Removes a footnote from the document node.
 */
export declare class DeleteFootnoteOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFootnoteOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFormField operation.
 * Removes a form field from the document node.
 */
export declare class DeleteFormFieldRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFormFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteFormFieldOnline operation.
 * Removes a form field from the document node.
 */
export declare class DeleteFormFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteFormFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteHeaderFooter operation.
 * Removes a HeaderFooter object from the document section.
 */
export declare class DeleteHeaderFooterRequest implements RequestInterface {
    constructor(init?: Partial<DeleteHeaderFooterRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteHeaderFooterOnline operation.
 * Removes a HeaderFooter object from the document section.
 */
export declare class DeleteHeaderFooterOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteHeaderFooterOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteHeadersFooters operation.
 * Removes HeaderFooter objects from the document section.
 */
export declare class DeleteHeadersFootersRequest implements RequestInterface {
    constructor(init?: Partial<DeleteHeadersFootersRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The list of HeaderFooter types.
     */
    headersFootersTypes: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteHeadersFootersOnline operation.
 * Removes HeaderFooter objects from the document section.
 */
export declare class DeleteHeadersFootersOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteHeadersFootersOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The list of HeaderFooter types.
     */
    headersFootersTypes: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteMacros operation.
 * Removes macros from the document.
 */
export declare class DeleteMacrosRequest implements RequestInterface {
    constructor(init?: Partial<DeleteMacrosRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteMacrosOnline operation.
 * Removes macros from the document.
 */
export declare class DeleteMacrosOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteMacrosOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteOfficeMathObject operation.
 * Removes an OfficeMath object from the document node.
 */
export declare class DeleteOfficeMathObjectRequest implements RequestInterface {
    constructor(init?: Partial<DeleteOfficeMathObjectRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteOfficeMathObjectOnline operation.
 * Removes an OfficeMath object from the document node.
 */
export declare class DeleteOfficeMathObjectOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteOfficeMathObjectOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteOfficeMathObjects operation.
 * Removes all office math objects from the document.
 */
export declare class DeleteOfficeMathObjectsRequest implements RequestInterface {
    constructor(init?: Partial<DeleteOfficeMathObjectsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteOfficeMathObjectsOnline operation.
 * Removes all office math objects from the document.
 */
export declare class DeleteOfficeMathObjectsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteOfficeMathObjectsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteParagraph operation.
 * Removes a paragraph from the document node.
 */
export declare class DeleteParagraphRequest implements RequestInterface {
    constructor(init?: Partial<DeleteParagraphRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteParagraphListFormat operation.
 * Removes the formatting properties of a paragraph list from the document node.
 */
export declare class DeleteParagraphListFormatRequest implements RequestInterface {
    constructor(init?: Partial<DeleteParagraphListFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteParagraphListFormatOnline operation.
 * Removes the formatting properties of a paragraph list from the document node.
 */
export declare class DeleteParagraphListFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteParagraphListFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteParagraphOnline operation.
 * Removes a paragraph from the document node.
 */
export declare class DeleteParagraphOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteParagraphOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteParagraphTabStop operation.
 * Removes a paragraph tab stop from the document node.
 */
export declare class DeleteParagraphTabStopRequest implements RequestInterface {
    constructor(init?: Partial<DeleteParagraphTabStopRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The position of a tab stop to remove.
     */
    position: number;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteParagraphTabStopOnline operation.
 * Removes a paragraph tab stop from the document node.
 */
export declare class DeleteParagraphTabStopOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteParagraphTabStopOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The position of a tab stop to remove.
     */
    position: number;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteRun operation.
 * Removes a Run object from the paragraph.
 */
export declare class DeleteRunRequest implements RequestInterface {
    constructor(init?: Partial<DeleteRunRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteRunOnline operation.
 * Removes a Run object from the paragraph.
 */
export declare class DeleteRunOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteRunOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteSection operation.
 * Removes a section from the document.
 */
export declare class DeleteSectionRequest implements RequestInterface {
    constructor(init?: Partial<DeleteSectionRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteSectionOnline operation.
 * Removes a section from the document.
 */
export declare class DeleteSectionOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteSectionOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteStructuredDocumentTag operation.
 * Removes a StructuredDocumentTag (SDT) from the document node.
 */
export declare class DeleteStructuredDocumentTagRequest implements RequestInterface {
    constructor(init?: Partial<DeleteStructuredDocumentTagRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteStructuredDocumentTagOnline operation.
 * Removes a StructuredDocumentTag (SDT) from the document node.
 */
export declare class DeleteStructuredDocumentTagOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteStructuredDocumentTagOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteTable operation.
 * Removes a table from the document node.
 */
export declare class DeleteTableRequest implements RequestInterface {
    constructor(init?: Partial<DeleteTableRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteTableCell operation.
 * Removes a cell from the table row.
 */
export declare class DeleteTableCellRequest implements RequestInterface {
    constructor(init?: Partial<DeleteTableCellRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteTableCellOnline operation.
 * Removes a cell from the table row.
 */
export declare class DeleteTableCellOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteTableCellOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteTableOnline operation.
 * Removes a table from the document node.
 */
export declare class DeleteTableOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteTableOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteTableRow operation.
 * Removes a row from the table.
 */
export declare class DeleteTableRowRequest implements RequestInterface {
    constructor(init?: Partial<DeleteTableRowRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteTableRowOnline operation.
 * Removes a row from the table.
 */
export declare class DeleteTableRowOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteTableRowOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteWatermark operation.
 * Removes a watermark from the document.
 */
export declare class DeleteWatermarkRequest implements RequestInterface {
    constructor(init?: Partial<DeleteWatermarkRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DeleteWatermarkOnline operation.
 * Removes a watermark from the document.
 */
export declare class DeleteWatermarkOnlineRequest implements RequestInterface {
    constructor(init?: Partial<DeleteWatermarkOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for DownloadFile operation.
 * Download file.
 */
export declare class DownloadFileRequest implements RequestInterface {
    constructor(init?: Partial<DownloadFileRequest>);
    /**
     * Path of the file including the file name and extension e.g. /folder1/file.ext.
     */
    path: string;
    /**
     * Storage name.
     */
    storageName: string;
    /**
     * File version ID to download.
     */
    versionId: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ExecuteMailMerge operation.
 * Executes a Mail Merge operation.
 */
export declare class ExecuteMailMergeRequest implements RequestInterface {
    constructor(init?: Partial<ExecuteMailMergeRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Mail merge data.
     */
    data: string;
    /**
     * Field options.
     */
    options: importedFieldOptions.FieldOptions;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The flag indicating whether to execute Mail Merge operation with regions.
     */
    withRegions: boolean;
    /**
     * The data file.
     */
    mailMergeDataFile: string;
    /**
     * The cleanup options.
     */
    cleanup: string;
    /**
     * The flag indicating whether paragraph with TableStart or TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields. The default value is true.
     */
    useWholeParagraphAsRegion: boolean;
    /**
     * The flag indicating whether fields in whole document are updated while executing of a mail merge with regions.
     */
    mergeWholeDocument: boolean;
    /**
     * The filename of the output document. If this parameter is omitted, the result will be saved with autogenerated name.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ExecuteMailMergeOnline operation.
 * Executes a Mail Merge operation online.
 */
export declare class ExecuteMailMergeOnlineRequest implements RequestInterface {
    constructor(init?: Partial<ExecuteMailMergeOnlineRequest>);
    /**
     * File with template.
     */
    template: Readable;
    /**
     * File with mailmerge data.
     */
    data: Readable;
    /**
     * Field options.
     */
    options: importedFieldOptions.FieldOptions;
    /**
     * The flag indicating whether to execute Mail Merge operation with regions.
     */
    withRegions: boolean;
    /**
     * The flag indicating whether fields in whole document are updated while executing of a mail merge with regions.
     */
    mergeWholeDocument: boolean;
    /**
     * The cleanup options.
     */
    cleanup: string;
    /**
     * The filename of the output document, that will be used when the resulting document has a dynamic field {filename}. If it is not set, the "template" will be used instead.
     */
    documentFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetAllRevisions operation.
 * Get all information about revisions.
 */
export declare class GetAllRevisionsRequest implements RequestInterface {
    constructor(init?: Partial<GetAllRevisionsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetAllRevisionsOnline operation.
 * Get all information about revisions.
 */
export declare class GetAllRevisionsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetAllRevisionsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetAvailableFonts operation.
 * Reads available fonts from the document.
 */
export declare class GetAvailableFontsRequest implements RequestInterface {
    constructor(init?: Partial<GetAvailableFontsRequest>);
    /**
     * The folder in cloud storage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBookmarkByName operation.
 * Reads a bookmark, specified by name, from the document.
 */
export declare class GetBookmarkByNameRequest implements RequestInterface {
    constructor(init?: Partial<GetBookmarkByNameRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the bookmark.
     */
    bookmarkName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBookmarkByNameOnline operation.
 * Reads a bookmark, specified by name, from the document.
 */
export declare class GetBookmarkByNameOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetBookmarkByNameOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the bookmark.
     */
    bookmarkName: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBookmarks operation.
 * Reads bookmarks from the document.
 */
export declare class GetBookmarksRequest implements RequestInterface {
    constructor(init?: Partial<GetBookmarksRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBookmarksOnline operation.
 * Reads bookmarks from the document.
 */
export declare class GetBookmarksOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetBookmarksOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBorder operation.
 * Reads a border from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class GetBorderRequest implements RequestInterface {
    constructor(init?: Partial<GetBorderRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBorderOnline operation.
 * Reads a border from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class GetBorderOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetBorderOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBorders operation.
 * Reads borders from the document node.
 */
export declare class GetBordersRequest implements RequestInterface {
    constructor(init?: Partial<GetBordersRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetBordersOnline operation.
 * Reads borders from the document node.
 */
export declare class GetBordersOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetBordersOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetComment operation.
 * Reads a comment from the document.
 */
export declare class GetCommentRequest implements RequestInterface {
    constructor(init?: Partial<GetCommentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the comment.
     */
    commentIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetCommentOnline operation.
 * Reads a comment from the document.
 */
export declare class GetCommentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetCommentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the comment.
     */
    commentIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetComments operation.
 * Reads comments from the document.
 */
export declare class GetCommentsRequest implements RequestInterface {
    constructor(init?: Partial<GetCommentsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetCommentsOnline operation.
 * Reads comments from the document.
 */
export declare class GetCommentsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetCommentsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetCustomXmlPart operation.
 * Reads the custom xml part from the document.
 */
export declare class GetCustomXmlPartRequest implements RequestInterface {
    constructor(init?: Partial<GetCustomXmlPartRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the custom xml part. This index is the number of the entry in the collection of custom xml parts, not the ID of the part.
     */
    customXmlPartIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetCustomXmlPartOnline operation.
 * Reads the custom xml part from the document.
 */
export declare class GetCustomXmlPartOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetCustomXmlPartOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the custom xml part. This index is the number of the entry in the collection of custom xml parts, not the ID of the part.
     */
    customXmlPartIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetCustomXmlParts operation.
 * Reads custom xml parts from the document.
 */
export declare class GetCustomXmlPartsRequest implements RequestInterface {
    constructor(init?: Partial<GetCustomXmlPartsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetCustomXmlPartsOnline operation.
 * Reads custom xml parts from the document.
 */
export declare class GetCustomXmlPartsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetCustomXmlPartsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocument operation.
 * Reads common information from the document.
 */
export declare class GetDocumentRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentRequest>);
    /**
     * The filename of the input document.
     */
    documentName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjectByIndex operation.
 * Reads a DrawingObject from the document node.
 */
export declare class GetDocumentDrawingObjectByIndexRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectByIndexRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjectByIndexOnline operation.
 * Reads a DrawingObject from the document node.
 */
export declare class GetDocumentDrawingObjectByIndexOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectByIndexOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjectImageData operation.
 * Reads image data of a DrawingObject from the document node.
 */
export declare class GetDocumentDrawingObjectImageDataRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectImageDataRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjectImageDataOnline operation.
 * Reads image data of a DrawingObject from the document node.
 */
export declare class GetDocumentDrawingObjectImageDataOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectImageDataOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjectOleData operation.
 * Reads OLE data of a DrawingObject from the document node.
 */
export declare class GetDocumentDrawingObjectOleDataRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectOleDataRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjectOleDataOnline operation.
 * Reads OLE data of a DrawingObject from the document node.
 */
export declare class GetDocumentDrawingObjectOleDataOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectOleDataOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjects operation.
 * Reads DrawingObjects from the document node.
 */
export declare class GetDocumentDrawingObjectsRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentDrawingObjectsOnline operation.
 * Reads DrawingObjects from the document node.
 */
export declare class GetDocumentDrawingObjectsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentDrawingObjectsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentFieldNames operation.
 * Reads merge field names from the document.
 */
export declare class GetDocumentFieldNamesRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentFieldNamesRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The flag indicating whether to use non merge fields. If true, result includes "mustache" field names.
     */
    useNonMergeFields: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentFieldNamesOnline operation.
 * Reads merge field names from the document.
 */
export declare class GetDocumentFieldNamesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentFieldNamesOnlineRequest>);
    /**
     * The template document.
     */
    template: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The flag indicating whether to use non merge fields. If true, result includes "mustache" field names.
     */
    useNonMergeFields: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentHyperlinkByIndex operation.
 * Reads a hyperlink from the document.
 */
export declare class GetDocumentHyperlinkByIndexRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentHyperlinkByIndexRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the hyperlink.
     */
    hyperlinkIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentHyperlinkByIndexOnline operation.
 * Reads a hyperlink from the document.
 */
export declare class GetDocumentHyperlinkByIndexOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentHyperlinkByIndexOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the hyperlink.
     */
    hyperlinkIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentHyperlinks operation.
 * Reads hyperlinks from the document.
 */
export declare class GetDocumentHyperlinksRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentHyperlinksRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentHyperlinksOnline operation.
 * Reads hyperlinks from the document.
 */
export declare class GetDocumentHyperlinksOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentHyperlinksOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentProperties operation.
 * Reads document properties.
 */
export declare class GetDocumentPropertiesRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentPropertiesRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentPropertiesOnline operation.
 * Reads document properties.
 */
export declare class GetDocumentPropertiesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentPropertiesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentProperty operation.
 * Reads a document property.
 */
export declare class GetDocumentPropertyRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentPropertyRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the property.
     */
    propertyName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentPropertyOnline operation.
 * Reads a document property.
 */
export declare class GetDocumentPropertyOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentPropertyOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the property.
     */
    propertyName: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentProtection operation.
 * Reads protection properties from the document.
 */
export declare class GetDocumentProtectionRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentProtectionRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentProtectionOnline operation.
 * Reads protection properties from the document.
 */
export declare class GetDocumentProtectionOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentProtectionOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentStatistics operation.
 * Reads document statistics.
 */
export declare class GetDocumentStatisticsRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentStatisticsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The flag indicating whether to include comments from the WordCount. The default value is "false".
     */
    includeComments: boolean;
    /**
     * The flag indicating whether to include footnotes from the WordCount. The default value is "false".
     */
    includeFootnotes: boolean;
    /**
     * The flag indicating whether to include shape's text from the WordCount. The default value is "false".
     */
    includeTextInShapes: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentStatisticsOnline operation.
 * Reads document statistics.
 */
export declare class GetDocumentStatisticsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentStatisticsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The flag indicating whether to include comments from the WordCount. The default value is "false".
     */
    includeComments: boolean;
    /**
     * The flag indicating whether to include footnotes from the WordCount. The default value is "false".
     */
    includeFootnotes: boolean;
    /**
     * The flag indicating whether to include shape's text from the WordCount. The default value is "false".
     */
    includeTextInShapes: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetDocumentWithFormat operation.
 * Converts a document in cloud storage to the specified format.
 */
export declare class GetDocumentWithFormatRequest implements RequestInterface {
    constructor(init?: Partial<GetDocumentWithFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The path to the output document.
     */
    outPath: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetField operation.
 * Reads a field from the document node.
 */
export declare class GetFieldRequest implements RequestInterface {
    constructor(init?: Partial<GetFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFieldOnline operation.
 * Reads a field from the document node.
 */
export declare class GetFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFields operation.
 * Reads fields from the document node.
 */
export declare class GetFieldsRequest implements RequestInterface {
    constructor(init?: Partial<GetFieldsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFieldsOnline operation.
 * Reads fields from the document node.
 */
export declare class GetFieldsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetFieldsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFilesList operation.
 * Get all files and folders within a folder.
 */
export declare class GetFilesListRequest implements RequestInterface {
    constructor(init?: Partial<GetFilesListRequest>);
    /**
     * Folder path e.g. '/folder'.
     */
    path: string;
    /**
     * Storage name.
     */
    storageName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFootnote operation.
 * Reads a footnote from the document node.
 */
export declare class GetFootnoteRequest implements RequestInterface {
    constructor(init?: Partial<GetFootnoteRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFootnoteOnline operation.
 * Reads a footnote from the document node.
 */
export declare class GetFootnoteOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetFootnoteOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFootnotes operation.
 * Reads footnotes from the document node.
 */
export declare class GetFootnotesRequest implements RequestInterface {
    constructor(init?: Partial<GetFootnotesRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFootnotesOnline operation.
 * Reads footnotes from the document node.
 */
export declare class GetFootnotesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetFootnotesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFormField operation.
 * Reads a form field from the document node.
 */
export declare class GetFormFieldRequest implements RequestInterface {
    constructor(init?: Partial<GetFormFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFormFieldOnline operation.
 * Reads a form field from the document node.
 */
export declare class GetFormFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetFormFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFormFields operation.
 * Reads form fields from the document node.
 */
export declare class GetFormFieldsRequest implements RequestInterface {
    constructor(init?: Partial<GetFormFieldsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetFormFieldsOnline operation.
 * Reads form fields from the document node.
 */
export declare class GetFormFieldsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetFormFieldsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetHeaderFooter operation.
 * Reads a HeaderFooter object from the document.
 */
export declare class GetHeaderFooterRequest implements RequestInterface {
    constructor(init?: Partial<GetHeaderFooterRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the HeaderFooter object.
     */
    headerFooterIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The list of HeaderFooter types.
     */
    filterByType: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetHeaderFooterOfSection operation.
 * Reads a HeaderFooter object from the document section.
 */
export declare class GetHeaderFooterOfSectionRequest implements RequestInterface {
    constructor(init?: Partial<GetHeaderFooterOfSectionRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the HeaderFooter object.
     */
    headerFooterIndex: number;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The list of HeaderFooter types.
     */
    filterByType: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetHeaderFooterOfSectionOnline operation.
 * Reads a HeaderFooter object from the document section.
 */
export declare class GetHeaderFooterOfSectionOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetHeaderFooterOfSectionOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the HeaderFooter object.
     */
    headerFooterIndex: number;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The list of HeaderFooter types.
     */
    filterByType: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetHeaderFooterOnline operation.
 * Reads a HeaderFooter object from the document.
 */
export declare class GetHeaderFooterOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetHeaderFooterOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the HeaderFooter object.
     */
    headerFooterIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The list of HeaderFooter types.
     */
    filterByType: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetHeaderFooters operation.
 * Reads HeaderFooter objects from the document section.
 */
export declare class GetHeaderFootersRequest implements RequestInterface {
    constructor(init?: Partial<GetHeaderFootersRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The list of HeaderFooter types.
     */
    filterByType: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetHeaderFootersOnline operation.
 * Reads HeaderFooter objects from the document section.
 */
export declare class GetHeaderFootersOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetHeaderFootersOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The list of HeaderFooter types.
     */
    filterByType: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetInfo operation.
 * Returns application info.
 */
export declare class GetInfoRequest implements RequestInterface {
    constructor(init?: Partial<GetInfoRequest>);
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetList operation.
 * Reads a list from the document.
 */
export declare class GetListRequest implements RequestInterface {
    constructor(init?: Partial<GetListRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The list Id.
     */
    listId: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetListOnline operation.
 * Reads a list from the document.
 */
export declare class GetListOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetListOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The list Id.
     */
    listId: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetLists operation.
 * Reads lists from the document.
 */
export declare class GetListsRequest implements RequestInterface {
    constructor(init?: Partial<GetListsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetListsOnline operation.
 * Reads lists from the document.
 */
export declare class GetListsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetListsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetOfficeMathObject operation.
 * Reads an OfficeMath object from the document node.
 */
export declare class GetOfficeMathObjectRequest implements RequestInterface {
    constructor(init?: Partial<GetOfficeMathObjectRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetOfficeMathObjectOnline operation.
 * Reads an OfficeMath object from the document node.
 */
export declare class GetOfficeMathObjectOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetOfficeMathObjectOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetOfficeMathObjects operation.
 * Reads OfficeMath objects from the document node.
 */
export declare class GetOfficeMathObjectsRequest implements RequestInterface {
    constructor(init?: Partial<GetOfficeMathObjectsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetOfficeMathObjectsOnline operation.
 * Reads OfficeMath objects from the document node.
 */
export declare class GetOfficeMathObjectsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetOfficeMathObjectsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraph operation.
 * Reads a paragraph from the document node.
 */
export declare class GetParagraphRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphFormat operation.
 * Reads the formatting properties of a paragraph from the document node.
 */
export declare class GetParagraphFormatRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphFormatOnline operation.
 * Reads the formatting properties of a paragraph from the document node.
 */
export declare class GetParagraphFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphListFormat operation.
 * Reads the formatting properties of a paragraph list from the document node.
 */
export declare class GetParagraphListFormatRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphListFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphListFormatOnline operation.
 * Reads the formatting properties of a paragraph list from the document node.
 */
export declare class GetParagraphListFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphListFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphOnline operation.
 * Reads a paragraph from the document node.
 */
export declare class GetParagraphOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphs operation.
 * Reads paragraphs from the document node.
 */
export declare class GetParagraphsRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphsOnline operation.
 * Reads paragraphs from the document node.
 */
export declare class GetParagraphsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphTabStops operation.
 * Reads paragraph tab stops from the document node.
 */
export declare class GetParagraphTabStopsRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphTabStopsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetParagraphTabStopsOnline operation.
 * Reads paragraph tab stops from the document node.
 */
export declare class GetParagraphTabStopsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetParagraphTabStopsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetPublicKey operation.
 * Get assymetric public key.
 */
export declare class GetPublicKeyRequest implements RequestInterface {
    constructor(init?: Partial<GetPublicKeyRequest>);
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRangeText operation.
 * Reads range text from the document.
 */
export declare class GetRangeTextRequest implements RequestInterface {
    constructor(init?: Partial<GetRangeTextRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRangeTextOnline operation.
 * Reads range text from the document.
 */
export declare class GetRangeTextOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetRangeTextOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRun operation.
 * Reads a Run object from the paragraph.
 */
export declare class GetRunRequest implements RequestInterface {
    constructor(init?: Partial<GetRunRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRunFont operation.
 * Reads the font properties of a Run object from the paragraph.
 */
export declare class GetRunFontRequest implements RequestInterface {
    constructor(init?: Partial<GetRunFontRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRunFontOnline operation.
 * Reads the font properties of a Run object from the paragraph.
 */
export declare class GetRunFontOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetRunFontOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRunOnline operation.
 * Reads a Run object from the paragraph.
 */
export declare class GetRunOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetRunOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRuns operation.
 * Reads Run objects from the paragraph.
 */
export declare class GetRunsRequest implements RequestInterface {
    constructor(init?: Partial<GetRunsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetRunsOnline operation.
 * Reads Run objects from the paragraph.
 */
export declare class GetRunsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetRunsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSection operation.
 * Reads a section from the document.
 */
export declare class GetSectionRequest implements RequestInterface {
    constructor(init?: Partial<GetSectionRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSectionOnline operation.
 * Reads a section from the document.
 */
export declare class GetSectionOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetSectionOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSectionPageSetup operation.
 * Reads the page setup of a section from the document.
 */
export declare class GetSectionPageSetupRequest implements RequestInterface {
    constructor(init?: Partial<GetSectionPageSetupRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSectionPageSetupOnline operation.
 * Reads the page setup of a section from the document.
 */
export declare class GetSectionPageSetupOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetSectionPageSetupOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSections operation.
 * Reads sections from the document.
 */
export declare class GetSectionsRequest implements RequestInterface {
    constructor(init?: Partial<GetSectionsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSectionsOnline operation.
 * Reads sections from the document.
 */
export declare class GetSectionsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetSectionsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSignatures operation.
 * Gets signatures from the document.
 */
export declare class GetSignaturesRequest implements RequestInterface {
    constructor(init?: Partial<GetSignaturesRequest>);
    /**
     * The filename of the Word document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetSignaturesOnline operation.
 * Gets signatures from the document.
 */
export declare class GetSignaturesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetSignaturesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStructuredDocumentTag operation.
 * Reads a StructuredDocumentTag (SDT) from the document node.
 */
export declare class GetStructuredDocumentTagRequest implements RequestInterface {
    constructor(init?: Partial<GetStructuredDocumentTagRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStructuredDocumentTagOnline operation.
 * Reads a StructuredDocumentTag (SDT) from the document node.
 */
export declare class GetStructuredDocumentTagOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetStructuredDocumentTagOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStructuredDocumentTags operation.
 * Reads StructuredDocumentTags (SDT) from the document node.
 */
export declare class GetStructuredDocumentTagsRequest implements RequestInterface {
    constructor(init?: Partial<GetStructuredDocumentTagsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStructuredDocumentTagsOnline operation.
 * Reads StructuredDocumentTags (SDT) from the document node.
 */
export declare class GetStructuredDocumentTagsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetStructuredDocumentTagsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStyle operation.
 * Reads a style from the document.
 */
export declare class GetStyleRequest implements RequestInterface {
    constructor(init?: Partial<GetStyleRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the style.
     */
    styleName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStyleFromDocumentElement operation.
 * Reads a style from the document node.
 */
export declare class GetStyleFromDocumentElementRequest implements RequestInterface {
    constructor(init?: Partial<GetStyleFromDocumentElementRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree, that supports styles: ParagraphFormat, List, ListLevel, Table.
     */
    styledNodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStyleFromDocumentElementOnline operation.
 * Reads a style from the document node.
 */
export declare class GetStyleFromDocumentElementOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetStyleFromDocumentElementOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree, that supports styles: ParagraphFormat, List, ListLevel, Table.
     */
    styledNodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStyleOnline operation.
 * Reads a style from the document.
 */
export declare class GetStyleOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetStyleOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the style.
     */
    styleName: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStyles operation.
 * Reads styles from the document.
 */
export declare class GetStylesRequest implements RequestInterface {
    constructor(init?: Partial<GetStylesRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetStylesOnline operation.
 * Reads styles from the document.
 */
export declare class GetStylesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetStylesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTable operation.
 * Reads a table from the document node.
 */
export declare class GetTableRequest implements RequestInterface {
    constructor(init?: Partial<GetTableRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableCell operation.
 * Reads a cell from the table row.
 */
export declare class GetTableCellRequest implements RequestInterface {
    constructor(init?: Partial<GetTableCellRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableCellFormat operation.
 * Reads the formatting properties of a table cell.
 */
export declare class GetTableCellFormatRequest implements RequestInterface {
    constructor(init?: Partial<GetTableCellFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableCellFormatOnline operation.
 * Reads the formatting properties of a table cell.
 */
export declare class GetTableCellFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetTableCellFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableCellOnline operation.
 * Reads a cell from the table row.
 */
export declare class GetTableCellOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetTableCellOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableOnline operation.
 * Reads a table from the document node.
 */
export declare class GetTableOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetTableOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableProperties operation.
 * Reads properties of a table from the document node.
 */
export declare class GetTablePropertiesRequest implements RequestInterface {
    constructor(init?: Partial<GetTablePropertiesRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTablePropertiesOnline operation.
 * Reads properties of a table from the document node.
 */
export declare class GetTablePropertiesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetTablePropertiesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableRow operation.
 * Reads a row from the table.
 */
export declare class GetTableRowRequest implements RequestInterface {
    constructor(init?: Partial<GetTableRowRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableRowFormat operation.
 * Reads the formatting properties of a table row.
 */
export declare class GetTableRowFormatRequest implements RequestInterface {
    constructor(init?: Partial<GetTableRowFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableRowFormatOnline operation.
 * Reads the formatting properties of a table row.
 */
export declare class GetTableRowFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetTableRowFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTableRowOnline operation.
 * Reads a row from the table.
 */
export declare class GetTableRowOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetTableRowOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTables operation.
 * Reads tables from the document node.
 */
export declare class GetTablesRequest implements RequestInterface {
    constructor(init?: Partial<GetTablesRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for GetTablesOnline operation.
 * Reads tables from the document node.
 */
export declare class GetTablesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<GetTablesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertBookmark operation.
 * Inserts a new bookmark to the document.
 */
export declare class InsertBookmarkRequest implements RequestInterface {
    constructor(init?: Partial<InsertBookmarkRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Bookmark to insert.
     */
    bookmark: importedBookmarkInsert.BookmarkInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertBookmarkOnline operation.
 * Inserts a new bookmark to the document.
 */
export declare class InsertBookmarkOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertBookmarkOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Bookmark to insert.
     */
    bookmark: importedBookmarkInsert.BookmarkInsert;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertComment operation.
 * Inserts a new comment to the document.
 */
export declare class InsertCommentRequest implements RequestInterface {
    constructor(init?: Partial<InsertCommentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Comment data.
     */
    comment: importedCommentInsert.CommentInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertCommentOnline operation.
 * Inserts a new comment to the document.
 */
export declare class InsertCommentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertCommentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Comment data.
     */
    comment: importedCommentInsert.CommentInsert;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertCustomXmlPart operation.
 * Inserts a new custom xml part to the document.
 */
export declare class InsertCustomXmlPartRequest implements RequestInterface {
    constructor(init?: Partial<InsertCustomXmlPartRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Custom xml part.
     */
    customXmlPart: importedCustomXmlPartInsert.CustomXmlPartInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertCustomXmlPartOnline operation.
 * Inserts a new custom xml part to the document.
 */
export declare class InsertCustomXmlPartOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertCustomXmlPartOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Custom xml part.
     */
    customXmlPart: importedCustomXmlPartInsert.CustomXmlPartInsert;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertDrawingObject operation.
 * Inserts a new DrawingObject to the document node.
 */
export declare class InsertDrawingObjectRequest implements RequestInterface {
    constructor(init?: Partial<InsertDrawingObjectRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Drawing object parameters.
     */
    drawingObject: importedDrawingObjectInsert.DrawingObjectInsert;
    /**
     * File with image.
     */
    imageFile: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertDrawingObjectOnline operation.
 * Inserts a new DrawingObject to the document node.
 */
export declare class InsertDrawingObjectOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertDrawingObjectOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Drawing object parameters.
     */
    drawingObject: importedDrawingObjectInsert.DrawingObjectInsert;
    /**
     * File with image.
     */
    imageFile: Readable;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertField operation.
 * Inserts a new field to the document node.
 */
export declare class InsertFieldRequest implements RequestInterface {
    constructor(init?: Partial<InsertFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Field data.
     */
    field: importedFieldInsert.FieldInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertFieldOnline operation.
 * Inserts a new field to the document node.
 */
export declare class InsertFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Field data.
     */
    field: importedFieldInsert.FieldInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertFootnote operation.
 * Inserts a new footnote to the document node.
 */
export declare class InsertFootnoteRequest implements RequestInterface {
    constructor(init?: Partial<InsertFootnoteRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteInsert.FootnoteInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertFootnoteOnline operation.
 * Inserts a new footnote to the document node.
 */
export declare class InsertFootnoteOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertFootnoteOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteInsert.FootnoteInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertFormField operation.
 * Inserts a new form field to the document node.
 */
export declare class InsertFormFieldRequest implements RequestInterface {
    constructor(init?: Partial<InsertFormFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The index of the node. A new form field will be inserted before the node with the specified node Id.
     */
    insertBeforeNode: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertFormFieldOnline operation.
 * Inserts a new form field to the document node.
 */
export declare class InsertFormFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertFormFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The index of the node. A new form field will be inserted before the node with the specified node Id.
     */
    insertBeforeNode: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertHeaderFooter operation.
 * Inserts a new HeaderFooter object to the document section.
 */
export declare class InsertHeaderFooterRequest implements RequestInterface {
    constructor(init?: Partial<InsertHeaderFooterRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Type of header/footer.
     */
    headerFooterType: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertHeaderFooterOnline operation.
 * Inserts a new HeaderFooter object to the document section.
 */
export declare class InsertHeaderFooterOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertHeaderFooterOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the section in the document tree.
     */
    sectionPath: string;
    /**
     * Type of header/footer.
     */
    headerFooterType: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertList operation.
 * Inserts a new list to the document.
 */
export declare class InsertListRequest implements RequestInterface {
    constructor(init?: Partial<InsertListRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * List object.
     */
    listInsert: importedListInsert.ListInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertListOnline operation.
 * Inserts a new list to the document.
 */
export declare class InsertListOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertListOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * List object.
     */
    listInsert: importedListInsert.ListInsert;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertOrUpdateParagraphTabStop operation.
 * Inserts a new or updates an existing paragraph tab stop in the document node.
 */
export declare class InsertOrUpdateParagraphTabStopRequest implements RequestInterface {
    constructor(init?: Partial<InsertOrUpdateParagraphTabStopRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * TabStopInsert dto.
     */
    tabStopInsertDto: importedTabStopInsert.TabStopInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertOrUpdateParagraphTabStopOnline operation.
 * Inserts a new or updates an existing paragraph tab stop in the document node.
 */
export declare class InsertOrUpdateParagraphTabStopOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertOrUpdateParagraphTabStopOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * TabStopInsert dto.
     */
    tabStopInsertDto: importedTabStopInsert.TabStopInsert;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertPageNumbers operation.
 * Inserts page numbers to the document.
 */
export declare class InsertPageNumbersRequest implements RequestInterface {
    constructor(init?: Partial<InsertPageNumbersRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Page number dto.
     */
    pageNumber: importedPageNumber.PageNumber;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertPageNumbersOnline operation.
 * Inserts page numbers to the document.
 */
export declare class InsertPageNumbersOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertPageNumbersOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Page number dto.
     */
    pageNumber: importedPageNumber.PageNumber;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertParagraph operation.
 * Inserts a new paragraph to the document node.
 */
export declare class InsertParagraphRequest implements RequestInterface {
    constructor(init?: Partial<InsertParagraphRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Paragraph data.
     */
    paragraph: importedParagraphInsert.ParagraphInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertParagraphOnline operation.
 * Inserts a new paragraph to the document node.
 */
export declare class InsertParagraphOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertParagraphOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Paragraph data.
     */
    paragraph: importedParagraphInsert.ParagraphInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertRun operation.
 * Inserts a new Run object to the paragraph.
 */
export declare class InsertRunRequest implements RequestInterface {
    constructor(init?: Partial<InsertRunRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Run data.
     */
    run: importedRunInsert.RunInsert;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertRunOnline operation.
 * Inserts a new Run object to the paragraph.
 */
export declare class InsertRunOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertRunOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Run data.
     */
    run: importedRunInsert.RunInsert;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertSection operation.
 * Inserts a section to the document.
 */
export declare class InsertSectionRequest implements RequestInterface {
    constructor(init?: Partial<InsertSectionRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index to insert into.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertSectionOnline operation.
 * Inserts a section to the document.
 */
export declare class InsertSectionOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertSectionOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index to insert into.
     */
    sectionIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertStructuredDocumentTag operation.
 * Inserts a new StructuredDocumentTag (SDT) to the document node.
 */
export declare class InsertStructuredDocumentTagRequest implements RequestInterface {
    constructor(init?: Partial<InsertStructuredDocumentTagRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Structured document tag parameters.
     */
    structuredDocumentTag: importedStructuredDocumentTagInsert.StructuredDocumentTagInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertStructuredDocumentTagOnline operation.
 * Inserts a new StructuredDocumentTag (SDT) to the document node.
 */
export declare class InsertStructuredDocumentTagOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertStructuredDocumentTagOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Structured document tag parameters.
     */
    structuredDocumentTag: importedStructuredDocumentTagInsert.StructuredDocumentTagInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertStyle operation.
 * Inserts a new style to the document.
 */
export declare class InsertStyleRequest implements RequestInterface {
    constructor(init?: Partial<InsertStyleRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Style to insert.
     */
    styleInsert: importedStyleInsert.StyleInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertStyleOnline operation.
 * Inserts a new style to the document.
 */
export declare class InsertStyleOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertStyleOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Style to insert.
     */
    styleInsert: importedStyleInsert.StyleInsert;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertTable operation.
 * Inserts a new table to the document node.
 */
export declare class InsertTableRequest implements RequestInterface {
    constructor(init?: Partial<InsertTableRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Table parameters.
     */
    table: importedTableInsert.TableInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertTableCell operation.
 * Inserts a new cell to the table row.
 */
export declare class InsertTableCellRequest implements RequestInterface {
    constructor(init?: Partial<InsertTableCellRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Table cell parameters.
     */
    cell: importedTableCellInsert.TableCellInsert;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertTableCellOnline operation.
 * Inserts a new cell to the table row.
 */
export declare class InsertTableCellOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertTableCellOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Table cell parameters.
     */
    cell: importedTableCellInsert.TableCellInsert;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertTableOnline operation.
 * Inserts a new table to the document node.
 */
export declare class InsertTableOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertTableOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Table parameters.
     */
    table: importedTableInsert.TableInsert;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertTableRow operation.
 * Inserts a new row to the table.
 */
export declare class InsertTableRowRequest implements RequestInterface {
    constructor(init?: Partial<InsertTableRowRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Table row parameters.
     */
    row: importedTableRowInsert.TableRowInsert;
    /**
     * The path to the table in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertTableRowOnline operation.
 * Inserts a new row to the table.
 */
export declare class InsertTableRowOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertTableRowOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Table row parameters.
     */
    row: importedTableRowInsert.TableRowInsert;
    /**
     * The path to the table in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertWatermark operation.
 * Insert a watermark to the document.
 */
export declare class InsertWatermarkRequest implements RequestInterface {
    constructor(init?: Partial<InsertWatermarkRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The watermark data.
     */
    watermarkData: importedWatermarkDataBase.WatermarkDataBase;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertWatermarkImage operation.
 * Inserts a new watermark image to the document.
 */
export declare class InsertWatermarkImageRequest implements RequestInterface {
    constructor(init?: Partial<InsertWatermarkImageRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * File with image.
     */
    imageFile: Readable;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The rotation angle of the watermark.
     */
    rotationAngle: number;
    /**
     * The filename of the image. If the parameter value is missing — the image data is expected in the request content.
     */
    image: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertWatermarkImageOnline operation.
 * Inserts a new watermark image to the document.
 */
export declare class InsertWatermarkImageOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertWatermarkImageOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * File with image.
     */
    imageFile: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The rotation angle of the watermark.
     */
    rotationAngle: number;
    /**
     * The filename of the image. If the parameter value is missing — the image data is expected in the request content.
     */
    image: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertWatermarkOnline operation.
 * Insert a watermark to the document.
 */
export declare class InsertWatermarkOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertWatermarkOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The watermark data.
     */
    watermarkData: importedWatermarkDataBase.WatermarkDataBase;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertWatermarkText operation.
 * Inserts a new watermark text to the document.
 */
export declare class InsertWatermarkTextRequest implements RequestInterface {
    constructor(init?: Partial<InsertWatermarkTextRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The watermark data.
     */
    watermarkText: importedWatermarkText.WatermarkText;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for InsertWatermarkTextOnline operation.
 * Inserts a new watermark text to the document.
 */
export declare class InsertWatermarkTextOnlineRequest implements RequestInterface {
    constructor(init?: Partial<InsertWatermarkTextOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The watermark data.
     */
    watermarkText: importedWatermarkText.WatermarkText;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for LinkHeaderFootersToPrevious operation.
 * Links headers / footers of the section to the previous one.
 */
export declare class LinkHeaderFootersToPreviousRequest implements RequestInterface {
    constructor(init?: Partial<LinkHeaderFootersToPreviousRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Linking mode.
     */
    mode: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for LoadWebDocument operation.
 * Downloads a document from the Web using URL and saves it to cloud storage in the specified format.
 */
export declare class LoadWebDocumentRequest implements RequestInterface {
    constructor(init?: Partial<LoadWebDocumentRequest>);
    /**
     * The properties of data downloading.
     */
    data: importedLoadWebDocumentData.LoadWebDocumentData;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for MergeWithNext operation.
 * Merge the section with the next one.
 */
export declare class MergeWithNextRequest implements RequestInterface {
    constructor(init?: Partial<MergeWithNextRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for MergeWithNextOnline operation.
 * Merge the section with the next one.
 */
export declare class MergeWithNextOnlineRequest implements RequestInterface {
    constructor(init?: Partial<MergeWithNextOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for MoveFile operation.
 * Move file.
 */
export declare class MoveFileRequest implements RequestInterface {
    constructor(init?: Partial<MoveFileRequest>);
    /**
     * Destination file path e.g. '/dest.ext'.
     */
    destPath: string;
    /**
     * Source file's path e.g. '/Folder 1/file.ext' or '/Bucket/Folder 1/file.ext'.
     */
    srcPath: string;
    /**
     * Source storage name.
     */
    srcStorageName: string;
    /**
     * Destination storage name.
     */
    destStorageName: string;
    /**
     * File version ID to move.
     */
    versionId: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for MoveFolder operation.
 * Move folder.
 */
export declare class MoveFolderRequest implements RequestInterface {
    constructor(init?: Partial<MoveFolderRequest>);
    /**
     * Destination folder path to move to e.g '/dst'.
     */
    destPath: string;
    /**
     * Source folder path e.g. /Folder1.
     */
    srcPath: string;
    /**
     * Source storage name.
     */
    srcStorageName: string;
    /**
     * Destination storage name.
     */
    destStorageName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for OptimizeDocument operation.
 * Applies document content optimization options, specific to a particular versions of Microsoft Word.
 */
export declare class OptimizeDocumentRequest implements RequestInterface {
    constructor(init?: Partial<OptimizeDocumentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The document optimization options.
     */
    options: importedOptimizationOptions.OptimizationOptions;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for OptimizeDocumentOnline operation.
 * Applies document content optimization options, specific to a particular versions of Microsoft Word.
 */
export declare class OptimizeDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<OptimizeDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The document optimization options.
     */
    options: importedOptimizationOptions.OptimizationOptions;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ProtectDocument operation.
 * Changes the document protection. The previous protection will be overwritten if it exist.
 */
export declare class ProtectDocumentRequest implements RequestInterface {
    constructor(init?: Partial<ProtectDocumentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Use ProtectionRequestV2 model to provide protection options.
     */
    protectionRequest: importedProtectionRequestBase.ProtectionRequestBase;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ProtectDocumentOnline operation.
 * Changes the document protection. The previous protection will be overwritten if it exist.
 */
export declare class ProtectDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<ProtectDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Use ProtectionRequestV2 model to provide protection options.
     */
    protectionRequest: importedProtectionRequestBase.ProtectionRequestBase;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RejectAllRevisions operation.
 * Rejects all revisions in the document.
 */
export declare class RejectAllRevisionsRequest implements RequestInterface {
    constructor(init?: Partial<RejectAllRevisionsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RejectAllRevisionsOnline operation.
 * Rejects all revisions in the document.
 */
export declare class RejectAllRevisionsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RejectAllRevisionsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RemoveAllSignatures operation.
 * Removes all signatures of the document.
 */
export declare class RemoveAllSignaturesRequest implements RequestInterface {
    constructor(init?: Partial<RemoveAllSignaturesRequest>);
    /**
     * Name of the document with signatures.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RemoveAllSignaturesOnline operation.
 * Removes all signatures of the document.
 */
export declare class RemoveAllSignaturesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RemoveAllSignaturesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RemoveRange operation.
 * Removes a range from the document.
 */
export declare class RemoveRangeRequest implements RequestInterface {
    constructor(init?: Partial<RemoveRangeRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RemoveRangeOnline operation.
 * Removes a range from the document.
 */
export declare class RemoveRangeOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RemoveRangeOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderDrawingObject operation.
 * Renders a DrawingObject to the specified format.
 */
export declare class RenderDrawingObjectRequest implements RequestInterface {
    constructor(init?: Partial<RenderDrawingObjectRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderDrawingObjectOnline operation.
 * Renders a DrawingObject to the specified format.
 */
export declare class RenderDrawingObjectOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RenderDrawingObjectOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderMathObject operation.
 * Renders an OfficeMath object to the specified format.
 */
export declare class RenderMathObjectRequest implements RequestInterface {
    constructor(init?: Partial<RenderMathObjectRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderMathObjectOnline operation.
 * Renders an OfficeMath object to the specified format.
 */
export declare class RenderMathObjectOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RenderMathObjectOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderPage operation.
 * Renders a page to the specified format.
 */
export declare class RenderPageRequest implements RequestInterface {
    constructor(init?: Partial<RenderPageRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the page.
     */
    pageIndex: number;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderPageOnline operation.
 * Renders a page to the specified format.
 */
export declare class RenderPageOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RenderPageOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the page.
     */
    pageIndex: number;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderParagraph operation.
 * Renders a paragraph to the specified format.
 */
export declare class RenderParagraphRequest implements RequestInterface {
    constructor(init?: Partial<RenderParagraphRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderParagraphOnline operation.
 * Renders a paragraph to the specified format.
 */
export declare class RenderParagraphOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RenderParagraphOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderTable operation.
 * Renders a table to the specified format.
 */
export declare class RenderTableRequest implements RequestInterface {
    constructor(init?: Partial<RenderTableRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for RenderTableOnline operation.
 * Renders a table to the specified format.
 */
export declare class RenderTableOnlineRequest implements RequestInterface {
    constructor(init?: Partial<RenderTableOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ReplaceText operation.
 * Replaces text in the document.
 */
export declare class ReplaceTextRequest implements RequestInterface {
    constructor(init?: Partial<ReplaceTextRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The replace operation settings.
     */
    replaceText: importedReplaceTextParameters.ReplaceTextParameters;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ReplaceTextOnline operation.
 * Replaces text in the document.
 */
export declare class ReplaceTextOnlineRequest implements RequestInterface {
    constructor(init?: Partial<ReplaceTextOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The replace operation settings.
     */
    replaceText: importedReplaceTextParameters.ReplaceTextParameters;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ReplaceWithText operation.
 * Replaces a range with text in the document.
 */
export declare class ReplaceWithTextRequest implements RequestInterface {
    constructor(init?: Partial<ReplaceWithTextRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * Model with text for replacement.
     */
    rangeText: importedReplaceRange.ReplaceRange;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ReplaceWithTextOnline operation.
 * Replaces a range with text in the document.
 */
export declare class ReplaceWithTextOnlineRequest implements RequestInterface {
    constructor(init?: Partial<ReplaceWithTextOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * Model with text for replacement.
     */
    rangeText: importedReplaceRange.ReplaceRange;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for ResetCache operation.
 * Clears the font cache.
 */
export declare class ResetCacheRequest implements RequestInterface {
    constructor(init?: Partial<ResetCacheRequest>);
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SaveAs operation.
 * Converts a document in cloud storage to the specified format.
 */
export declare class SaveAsRequest implements RequestInterface {
    constructor(init?: Partial<SaveAsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Save options.
     */
    saveOptionsData: importedSaveOptionsData.SaveOptionsData;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SaveAsOnline operation.
 * Converts a document in cloud storage to the specified format.
 */
export declare class SaveAsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<SaveAsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Save options.
     */
    saveOptionsData: importedSaveOptionsData.SaveOptionsData;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SaveAsRange operation.
 * Saves a range as a new document.
 */
export declare class SaveAsRangeRequest implements RequestInterface {
    constructor(init?: Partial<SaveAsRangeRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * Parameters of a new document.
     */
    documentParameters: importedRangeDocument.RangeDocument;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SaveAsRangeOnline operation.
 * Saves a range as a new document.
 */
export declare class SaveAsRangeOnlineRequest implements RequestInterface {
    constructor(init?: Partial<SaveAsRangeOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The range start identifier. Identifier examples: id0.0.0, page0.
     */
    rangeStartIdentifier: string;
    /**
     * Parameters of a new document.
     */
    documentParameters: importedRangeDocument.RangeDocument;
    /**
     * The range end identifier. Identifier examples: id1.0.0, id0.0.0:end, page1, page1:end, document:end.
     */
    rangeEndIdentifier: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SaveAsTiff operation.
 * Converts a document in cloud storage to TIFF format using detailed conversion settings.
 */
export declare class SaveAsTiffRequest implements RequestInterface {
    constructor(init?: Partial<SaveAsTiffRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Tiff save options.
     */
    saveOptions: importedTiffSaveOptionsData.TiffSaveOptionsData;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The flag indicating whether to use antialiasing.
     */
    useAntiAliasing: boolean;
    /**
     * The flag indicating whether to use high quality.
     */
    useHighQualityRendering: boolean;
    /**
     * The level of brightness for the generated images.
     */
    imageBrightness: number;
    /**
     * The color mode for the generated images.
     */
    imageColorMode: string;
    /**
     * The contrast for the generated images.
     */
    imageContrast: number;
    /**
     * The images numeral format.
     */
    numeralFormat: string;
    /**
     * The number of pages to render.
     */
    pageCount: number;
    /**
     * The index of the page to start rendering.
     */
    pageIndex: number;
    /**
     * The background image color.
     */
    paperColor: string;
    /**
     * The pixel format of the generated images.
     */
    pixelFormat: string;
    /**
     * The resolution of the generated images.
     */
    resolution: number;
    /**
     * The zoom factor for the generated images.
     */
    scale: number;
    /**
     * The compression tipe.
     */
    tiffCompression: string;
    /**
     * The optional dml rendering mode. The default value is Fallback.
     */
    dmlRenderingMode: string;
    /**
     * The optional dml effects rendering mode. The default value is Simplified.
     */
    dmlEffectsRenderingMode: string;
    /**
     * The optional TIFF binarization method. Possible values are: FloydSteinbergDithering, Threshold.
     */
    tiffBinarizationMethod: string;
    /**
     * The flag indicating whether to ZIP the output.
     */
    zipOutput: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SaveAsTiffOnline operation.
 * Converts a document in cloud storage to TIFF format using detailed conversion settings.
 */
export declare class SaveAsTiffOnlineRequest implements RequestInterface {
    constructor(init?: Partial<SaveAsTiffOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Tiff save options.
     */
    saveOptions: importedTiffSaveOptionsData.TiffSaveOptionsData;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * The flag indicating whether to use antialiasing.
     */
    useAntiAliasing: boolean;
    /**
     * The flag indicating whether to use high quality.
     */
    useHighQualityRendering: boolean;
    /**
     * The level of brightness for the generated images.
     */
    imageBrightness: number;
    /**
     * The color mode for the generated images.
     */
    imageColorMode: string;
    /**
     * The contrast for the generated images.
     */
    imageContrast: number;
    /**
     * The images numeral format.
     */
    numeralFormat: string;
    /**
     * The number of pages to render.
     */
    pageCount: number;
    /**
     * The index of the page to start rendering.
     */
    pageIndex: number;
    /**
     * The background image color.
     */
    paperColor: string;
    /**
     * The pixel format of the generated images.
     */
    pixelFormat: string;
    /**
     * The resolution of the generated images.
     */
    resolution: number;
    /**
     * The zoom factor for the generated images.
     */
    scale: number;
    /**
     * The compression tipe.
     */
    tiffCompression: string;
    /**
     * The optional dml rendering mode. The default value is Fallback.
     */
    dmlRenderingMode: string;
    /**
     * The optional dml effects rendering mode. The default value is Simplified.
     */
    dmlEffectsRenderingMode: string;
    /**
     * The optional TIFF binarization method. Possible values are: FloydSteinbergDithering, Threshold.
     */
    tiffBinarizationMethod: string;
    /**
     * The flag indicating whether to ZIP the output.
     */
    zipOutput: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for Search operation.
 * Searches text, specified by the regular expression, in the document.
 */
export declare class SearchRequest implements RequestInterface {
    constructor(init?: Partial<SearchRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The regular expression used to find matches.
     */
    pattern: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SearchOnline operation.
 * Searches text, specified by the regular expression, in the document.
 */
export declare class SearchOnlineRequest implements RequestInterface {
    constructor(init?: Partial<SearchOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The regular expression used to find matches.
     */
    pattern: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SignDocument operation.
 * Signs the document with given certificate.
 */
export declare class SignDocumentRequest implements RequestInterface {
    constructor(init?: Partial<SignDocumentRequest>);
    /**
     * Name of the document to sign.
     */
    name: string;
    /**
     * certifate file path.
     */
    certificatePath: string;
    /**
     * certificate password.
     */
    certificatePassword: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SignDocumentOnline operation.
 * Signs the document with given certificate.
 */
export declare class SignDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<SignDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * certifate file path.
     */
    certificatePath: string;
    /**
     * certificate password.
     */
    certificatePassword: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SplitDocument operation.
 * Splits a document into parts and saves them in the specified format.
 */
export declare class SplitDocumentRequest implements RequestInterface {
    constructor(init?: Partial<SplitDocumentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The format to split.
     */
    format: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * The start page.
     */
    from: number;
    /**
     * The end page.
     */
    to: number;
    /**
     * The flag indicating whether to ZIP the output.
     */
    zipOutput: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for SplitDocumentOnline operation.
 * Splits a document into parts and saves them in the specified format.
 */
export declare class SplitDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<SplitDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The format to split.
     */
    format: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * The start page.
     */
    from: number;
    /**
     * The end page.
     */
    to: number;
    /**
     * The flag indicating whether to ZIP the output.
     */
    zipOutput: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for TranslateNodeId operation.
 * Translate a node id to a node path.
 */
export declare class TranslateNodeIdRequest implements RequestInterface {
    constructor(init?: Partial<TranslateNodeIdRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The node identifier. Identifier examples: id0.0.0.
     */
    nodeId: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for TranslateNodeIdOnline operation.
 * Translate a node id to a node path.
 */
export declare class TranslateNodeIdOnlineRequest implements RequestInterface {
    constructor(init?: Partial<TranslateNodeIdOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The node identifier. Identifier examples: id0.0.0.
     */
    nodeId: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UnprotectDocument operation.
 * Removes protection from the document.
 */
export declare class UnprotectDocumentRequest implements RequestInterface {
    constructor(init?: Partial<UnprotectDocumentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UnprotectDocumentOnline operation.
 * Removes protection from the document.
 */
export declare class UnprotectDocumentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UnprotectDocumentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateBookmark operation.
 * Updates a bookmark in the document.
 */
export declare class UpdateBookmarkRequest implements RequestInterface {
    constructor(init?: Partial<UpdateBookmarkRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the bookmark.
     */
    bookmarkName: string;
    /**
     * Bookmark data.
     */
    bookmarkData: importedBookmarkData.BookmarkData;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateBookmarkOnline operation.
 * Updates a bookmark in the document.
 */
export declare class UpdateBookmarkOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateBookmarkOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the bookmark.
     */
    bookmarkName: string;
    /**
     * Bookmark data.
     */
    bookmarkData: importedBookmarkData.BookmarkData;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateBorder operation.
 * Updates a border in the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class UpdateBorderRequest implements RequestInterface {
    constructor(init?: Partial<UpdateBorderRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * Border properties.
     */
    borderProperties: importedBorder.Border;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateBorderOnline operation.
 * Updates a border in the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class UpdateBorderOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateBorderOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Border properties.
     */
    borderProperties: importedBorder.Border;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateComment operation.
 * Updates a comment in the document.
 */
export declare class UpdateCommentRequest implements RequestInterface {
    constructor(init?: Partial<UpdateCommentRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the comment.
     */
    commentIndex: number;
    /**
     * Comment data.
     */
    comment: importedCommentUpdate.CommentUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateCommentOnline operation.
 * Updates a comment in the document.
 */
export declare class UpdateCommentOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateCommentOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the comment.
     */
    commentIndex: number;
    /**
     * Comment data.
     */
    comment: importedCommentUpdate.CommentUpdate;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateCustomXmlPart operation.
 * Updates the custom xml part in the document.
 */
export declare class UpdateCustomXmlPartRequest implements RequestInterface {
    constructor(init?: Partial<UpdateCustomXmlPartRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the custom xml part. This index is the number of the entry in the collection of custom xml parts, not the ID of the part.
     */
    customXmlPartIndex: number;
    /**
     * Custom xml part.
     */
    customXmlPart: importedCustomXmlPartUpdate.CustomXmlPartUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateCustomXmlPartOnline operation.
 * Updates the custom xml part in the document.
 */
export declare class UpdateCustomXmlPartOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateCustomXmlPartOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the custom xml part. This index is the number of the entry in the collection of custom xml parts, not the ID of the part.
     */
    customXmlPartIndex: number;
    /**
     * Custom xml part.
     */
    customXmlPart: importedCustomXmlPartUpdate.CustomXmlPartUpdate;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateDrawingObject operation.
 * Updates a DrawingObject in the document node.
 */
export declare class UpdateDrawingObjectRequest implements RequestInterface {
    constructor(init?: Partial<UpdateDrawingObjectRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Drawing object parameters.
     */
    drawingObject: importedDrawingObjectUpdate.DrawingObjectUpdate;
    /**
     * File with image.
     */
    imageFile: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateDrawingObjectOnline operation.
 * Updates a DrawingObject in the document node.
 */
export declare class UpdateDrawingObjectOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateDrawingObjectOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Drawing object parameters.
     */
    drawingObject: importedDrawingObjectUpdate.DrawingObjectUpdate;
    /**
     * File with image.
     */
    imageFile: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateField operation.
 * Updates a field in the document node.
 */
export declare class UpdateFieldRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Field data.
     */
    field: importedFieldUpdate.FieldUpdate;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateFieldOnline operation.
 * Updates a field in the document node.
 */
export declare class UpdateFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Field data.
     */
    field: importedFieldUpdate.FieldUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateFields operation.
 * Reevaluates field values in the document.
 */
export declare class UpdateFieldsRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFieldsRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateFieldsOnline operation.
 * Reevaluates field values in the document.
 */
export declare class UpdateFieldsOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFieldsOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateFootnote operation.
 * Updates a footnote in the document node.
 */
export declare class UpdateFootnoteRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFootnoteRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteUpdate.FootnoteUpdate;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateFootnoteOnline operation.
 * Updates a footnote in the document node.
 */
export declare class UpdateFootnoteOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFootnoteOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteUpdate.FootnoteUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateFormField operation.
 * Updates a form field in the document node.
 */
export declare class UpdateFormFieldRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFormFieldRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateFormFieldOnline operation.
 * Updates a form field in the document node.
 */
export declare class UpdateFormFieldOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateFormFieldOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateList operation.
 * Updates a list in the document.
 */
export declare class UpdateListRequest implements RequestInterface {
    constructor(init?: Partial<UpdateListRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The list Id.
     */
    listId: number;
    /**
     * List object.
     */
    listUpdate: importedListUpdate.ListUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateListLevel operation.
 * Updates the level of a List element in the document.
 */
export declare class UpdateListLevelRequest implements RequestInterface {
    constructor(init?: Partial<UpdateListLevelRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The list Id.
     */
    listId: number;
    /**
     * The list level.
     */
    listLevel: number;
    /**
     * List object.
     */
    listUpdate: importedListLevelUpdate.ListLevelUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateListLevelOnline operation.
 * Updates the level of a List element in the document.
 */
export declare class UpdateListLevelOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateListLevelOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The list Id.
     */
    listId: number;
    /**
     * List object.
     */
    listUpdate: importedListLevelUpdate.ListLevelUpdate;
    /**
     * The list level.
     */
    listLevel: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateListOnline operation.
 * Updates a list in the document.
 */
export declare class UpdateListOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateListOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The list Id.
     */
    listId: number;
    /**
     * List object.
     */
    listUpdate: importedListUpdate.ListUpdate;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateParagraphFormat operation.
 * Updates the formatting properties of a paragraph in the document node.
 */
export declare class UpdateParagraphFormatRequest implements RequestInterface {
    constructor(init?: Partial<UpdateParagraphFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Dto for paragraph format update.
     */
    paragraphFormatDto: importedParagraphFormatUpdate.ParagraphFormatUpdate;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateParagraphFormatOnline operation.
 * Updates the formatting properties of a paragraph in the document node.
 */
export declare class UpdateParagraphFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateParagraphFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Dto for paragraph format update.
     */
    paragraphFormatDto: importedParagraphFormatUpdate.ParagraphFormatUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateParagraphListFormat operation.
 * Updates the formatting properties of a paragraph list in the document node.
 */
export declare class UpdateParagraphListFormatRequest implements RequestInterface {
    constructor(init?: Partial<UpdateParagraphListFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * ListFormatUpdate dto.
     */
    listFormatDto: importedListFormatUpdate.ListFormatUpdate;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateParagraphListFormatOnline operation.
 * Updates the formatting properties of a paragraph list in the document node.
 */
export declare class UpdateParagraphListFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateParagraphListFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * ListFormatUpdate dto.
     */
    listFormatDto: importedListFormatUpdate.ListFormatUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateRun operation.
 * Updates a Run object in the paragraph.
 */
export declare class UpdateRunRequest implements RequestInterface {
    constructor(init?: Partial<UpdateRunRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Run data.
     */
    run: importedRunUpdate.RunUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateRunFont operation.
 * Updates the font properties of a Run object in the paragraph.
 */
export declare class UpdateRunFontRequest implements RequestInterface {
    constructor(init?: Partial<UpdateRunFontRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Font dto object.
     */
    fontDto: importedFont.Font;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateRunFontOnline operation.
 * Updates the font properties of a Run object in the paragraph.
 */
export declare class UpdateRunFontOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateRunFontOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Font dto object.
     */
    fontDto: importedFont.Font;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateRunOnline operation.
 * Updates a Run object in the paragraph.
 */
export declare class UpdateRunOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateRunOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the paragraph in the document tree.
     */
    paragraphPath: string;
    /**
     * Run data.
     */
    run: importedRunUpdate.RunUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateSectionPageSetup operation.
 * Updates the page setup of a section in the document.
 */
export declare class UpdateSectionPageSetupRequest implements RequestInterface {
    constructor(init?: Partial<UpdateSectionPageSetupRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Page setup properties dto.
     */
    pageSetup: importedPageSetup.PageSetup;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateSectionPageSetupOnline operation.
 * Updates the page setup of a section in the document.
 */
export declare class UpdateSectionPageSetupOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateSectionPageSetupOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The index of the section.
     */
    sectionIndex: number;
    /**
     * Page setup properties dto.
     */
    pageSetup: importedPageSetup.PageSetup;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateStructuredDocumentTag operation.
 * Updates a StructuredDocumentTag (SDT) in the document node.
 */
export declare class UpdateStructuredDocumentTagRequest implements RequestInterface {
    constructor(init?: Partial<UpdateStructuredDocumentTagRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Structured document tag parameters.
     */
    structuredDocumentTag: importedStructuredDocumentTagUpdate.StructuredDocumentTagUpdate;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateStructuredDocumentTagOnline operation.
 * Updates a StructuredDocumentTag (SDT) in the document node.
 */
export declare class UpdateStructuredDocumentTagOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateStructuredDocumentTagOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * Structured document tag parameters.
     */
    structuredDocumentTag: importedStructuredDocumentTagUpdate.StructuredDocumentTagUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateStyle operation.
 * Updates a style in the document.
 */
export declare class UpdateStyleRequest implements RequestInterface {
    constructor(init?: Partial<UpdateStyleRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The name of the style.
     */
    styleName: string;
    /**
     * Style properties to update.
     */
    styleUpdate: importedStyleUpdate.StyleUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateStyleOnline operation.
 * Updates a style in the document.
 */
export declare class UpdateStyleOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateStyleOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The name of the style.
     */
    styleName: string;
    /**
     * Style properties to update.
     */
    styleUpdate: importedStyleUpdate.StyleUpdate;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateTableCellFormat operation.
 * Updates the formatting properties of a cell in the table row.
 */
export declare class UpdateTableCellFormatRequest implements RequestInterface {
    constructor(init?: Partial<UpdateTableCellFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The properties.
     */
    format: importedTableCellFormat.TableCellFormat;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateTableCellFormatOnline operation.
 * Updates the formatting properties of a cell in the table row.
 */
export declare class UpdateTableCellFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateTableCellFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table row in the document tree.
     */
    tableRowPath: string;
    /**
     * The properties.
     */
    format: importedTableCellFormat.TableCellFormat;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateTableProperties operation.
 * Updates properties of a table in the document node.
 */
export declare class UpdateTablePropertiesRequest implements RequestInterface {
    constructor(init?: Partial<UpdateTablePropertiesRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * The properties.
     */
    properties: importedTableProperties.TableProperties;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateTablePropertiesOnline operation.
 * Updates properties of a table in the document node.
 */
export declare class UpdateTablePropertiesOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateTablePropertiesOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The properties.
     */
    properties: importedTableProperties.TableProperties;
    /**
     * Object index.
     */
    index: number;
    /**
     * The path to the node in the document tree.
     */
    nodePath: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateTableRowFormat operation.
 * Updates the formatting properties of a table row.
 */
export declare class UpdateTableRowFormatRequest implements RequestInterface {
    constructor(init?: Partial<UpdateTableRowFormatRequest>);
    /**
     * The filename of the input document.
     */
    name: string;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Table row format.
     */
    format: importedTableRowFormat.TableRowFormat;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UpdateTableRowFormatOnline operation.
 * Updates the formatting properties of a table row.
 */
export declare class UpdateTableRowFormatOnlineRequest implements RequestInterface {
    constructor(init?: Partial<UpdateTableRowFormatOnlineRequest>);
    /**
     * The document.
     */
    document: Readable;
    /**
     * The path to the table in the document tree.
     */
    tablePath: string;
    /**
     * Table row format.
     */
    format: importedTableRowFormat.TableRowFormat;
    /**
     * Object index.
     */
    index: number;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password of protected Word document. Use the parameter to pass a password via SDK. SDK encrypts it automatically. We don't recommend to use the parameter to pass a plain password for direct call of API.
     */
    password: string;
    /**
     * Password of protected Word document. Use the parameter to pass an encrypted password for direct calls of API. See SDK code for encyption details.
     */
    encryptedPassword: string;
    /**
     * The value indicates whether OpenType support is on.
     */
    openTypeSupport: boolean;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Request model for UploadFile operation.
 * Upload file.
 */
export declare class UploadFileRequest implements RequestInterface {
    constructor(init?: Partial<UploadFileRequest>);
    /**
     * File to upload.
     */
    fileContent: Readable;
    /**
     * Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext
     * If the content is multipart and path does not contains the file name it tries to get them from filename parameter
     * from Content-Disposition header.
     */
    path: string;
    /**
     * Storage name.
     */
    storageName: string;
    /**
     * create the requst options for this request
     * @param configuration a configuration for the request
     * @param data encryptor
     */
    createRequestOptions(configuration: Configuration, _encryptor: Encryptor): Promise<request.OptionsWithUri>;
    /**
     * create response from string
     */
    createResponse(_response: Buffer, _headers: http.IncomingHttpHeaders): any;
}
/**
 * Response model for AcceptAllRevisionsOnline operation.
 * Accepts all revisions in the document.
 */
export declare class AcceptAllRevisionsOnlineResponse {
    /**
     * The REST response with a result of the modification operations for the revisions collection (now these are acceptAll and rejectAll).
     */
    model: importedRevisionsModificationResponse.RevisionsModificationResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for AppendDocumentOnline operation.
 * Appends documents to the original document.
 */
export declare class AppendDocumentOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for ApplyStyleToDocumentElementOnline operation.
 * Applies a style to the document node.
 */
export declare class ApplyStyleToDocumentElementOnlineResponse {
    /**
     * The base class for all responses.
     */
    model: importedWordsResponse.WordsResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for CompareDocumentOnline operation.
 * Compares two documents.
 */
export declare class CompareDocumentOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for CompressDocumentOnline operation.
 * Compress and resize images inside the document.
 * The default settings allows to reduce the size of the document without any visible degradation of images quality.
 */
export declare class CompressDocumentOnlineResponse {
    /**
     * The REST response of compressed document.
     */
    model: importedCompressResponse.CompressResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for CopyStyleOnline operation.
 * Makes a copy of the style in the document.
 */
export declare class CopyStyleOnlineResponse {
    /**
     * The REST response with a style.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/styles/{0}" REST API requests.
     */
    model: importedStyleResponse.StyleResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for CreateOrUpdateDocumentPropertyOnline operation.
 * Adds a new or updates an existing document property.
 */
export declare class CreateOrUpdateDocumentPropertyOnlineResponse {
    /**
     * The REST response with a document property.
     * This response should be returned by the service when handling: GET documentProperties/{propertyName}.
     */
    model: importedDocumentPropertyResponse.DocumentPropertyResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for DeleteAllParagraphTabStopsOnline operation.
 * Removes paragraph tab stops from the document node.
 */
export declare class DeleteAllParagraphTabStopsOnlineResponse {
    /**
     * The REST response with an array of tab stops.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/tabstops" REST API requests.
     */
    model: importedTabStopsResponse.TabStopsResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for DeleteBorderOnline operation.
 * Removes a border from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class DeleteBorderOnlineResponse {
    /**
     * The REST response with a border.
     * This response is returned by the Service when handling "GET {nodeWithBorders}/borders" REST API requests.
     */
    model: importedBorderResponse.BorderResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for DeleteBordersOnline operation.
 * Removes borders from the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class DeleteBordersOnlineResponse {
    /**
     * The REST response with a collection of borders.
     * This response is returned by the Service when handling "GET {nodeWithBorders}/borders" REST API requests.
     */
    model: importedBordersResponse.BordersResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for DeleteParagraphListFormatOnline operation.
 * Removes the formatting properties of a paragraph list from the document node.
 */
export declare class DeleteParagraphListFormatOnlineResponse {
    /**
     * The REST response with a list format for a paragraph.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/listFormat" REST API requests.
     */
    model: importedParagraphListFormatResponse.ParagraphListFormatResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for DeleteParagraphTabStopOnline operation.
 * Removes a paragraph tab stop from the document node.
 */
export declare class DeleteParagraphTabStopOnlineResponse {
    /**
     * The REST response with an array of tab stops.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/tabstops" REST API requests.
     */
    model: importedTabStopsResponse.TabStopsResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for DeleteWatermarkOnline operation.
 * Removes a watermark from the document.
 */
export declare class DeleteWatermarkOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertBookmarkOnline operation.
 * Inserts a new bookmark to the document.
 */
export declare class InsertBookmarkOnlineResponse {
    /**
     * The REST response with a bookmark.
     * This response should be returned by the service when handling: GET bookmarks/{bookmarkName}.
     */
    model: importedBookmarkResponse.BookmarkResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertCommentOnline operation.
 * Inserts a new comment to the document.
 */
export declare class InsertCommentOnlineResponse {
    /**
     * The REST response with a comment.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/comments/0" REST API requests.
     */
    model: importedCommentResponse.CommentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertCustomXmlPartOnline operation.
 * Inserts a new custom xml part to the document.
 */
export declare class InsertCustomXmlPartOnlineResponse {
    /**
     * The REST response with a custom xml part.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/customXmlParts/0" REST API requests.
     */
    model: importedCustomXmlPartResponse.CustomXmlPartResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertDrawingObjectOnline operation.
 * Inserts a new DrawingObject to the document node.
 */
export declare class InsertDrawingObjectOnlineResponse {
    /**
     * The REST response with a DrawingObject.
     */
    model: importedDrawingObjectResponse.DrawingObjectResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertFieldOnline operation.
 * Inserts a new field to the document node.
 */
export declare class InsertFieldOnlineResponse {
    /**
     * The REST response with a field.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/fields/{1}" REST API requests.
     */
    model: importedFieldResponse.FieldResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertFootnoteOnline operation.
 * Inserts a new footnote to the document node.
 */
export declare class InsertFootnoteOnlineResponse {
    /**
     * The REST response with a footnote.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/footnote/0" REST API requests.
     */
    model: importedFootnoteResponse.FootnoteResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertFormFieldOnline operation.
 * Inserts a new form field to the document node.
 */
export declare class InsertFormFieldOnlineResponse {
    /**
     * The REST response with a form field.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/form fields/{1}" REST API requests.
     */
    model: importedFormFieldResponse.FormFieldResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertHeaderFooterOnline operation.
 * Inserts a new HeaderFooter object to the document section.
 */
export declare class InsertHeaderFooterOnlineResponse {
    /**
     * The REST response with a HeaderFooter.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/headersfooters/{0}" REST API requests.
     */
    model: importedHeaderFooterResponse.HeaderFooterResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertListOnline operation.
 * Inserts a new list to the document.
 */
export declare class InsertListOnlineResponse {
    /**
     * The REST response with a list information.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/lists/{n}" REST API requests.
     */
    model: importedListResponse.ListResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertOrUpdateParagraphTabStopOnline operation.
 * Inserts a new or updates an existing paragraph tab stop in the document node.
 */
export declare class InsertOrUpdateParagraphTabStopOnlineResponse {
    /**
     * The REST response with an array of tab stops.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/tabstops" REST API requests.
     */
    model: importedTabStopsResponse.TabStopsResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertPageNumbersOnline operation.
 * Inserts page numbers to the document.
 */
export declare class InsertPageNumbersOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertParagraphOnline operation.
 * Inserts a new paragraph to the document node.
 */
export declare class InsertParagraphOnlineResponse {
    /**
     * The REST response with a paragraph.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}" REST API requests.
     */
    model: importedParagraphResponse.ParagraphResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertRunOnline operation.
 * Inserts a new Run object to the paragraph.
 */
export declare class InsertRunOnlineResponse {
    /**
     * The REST response with a Run element.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/runs/{1}" REST API requests.
     */
    model: importedRunResponse.RunResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertStructuredDocumentTagOnline operation.
 * Inserts a new StructuredDocumentTag (SDT) to the document node.
 */
export declare class InsertStructuredDocumentTagOnlineResponse {
    /**
     * The REST response with a StructuredDocumentTag.
     */
    model: importedStructuredDocumentTagResponse.StructuredDocumentTagResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertStyleOnline operation.
 * Inserts a new style to the document.
 */
export declare class InsertStyleOnlineResponse {
    /**
     * The REST response with a style.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/styles/{0}" REST API requests.
     */
    model: importedStyleResponse.StyleResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertTableCellOnline operation.
 * Inserts a new cell to the table row.
 */
export declare class InsertTableCellOnlineResponse {
    /**
     * The REST response with a table cell.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/tables/{0}" REST API requests.
     */
    model: importedTableCellResponse.TableCellResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertTableOnline operation.
 * Inserts a new table to the document node.
 */
export declare class InsertTableOnlineResponse {
    /**
     * The REST response with a table.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/tables/{0}" REST API requests.
     */
    model: importedTableResponse.TableResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertTableRowOnline operation.
 * Inserts a new row to the table.
 */
export declare class InsertTableRowOnlineResponse {
    /**
     * The REST response with a table row.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/tables/{0}" REST API requests.
     */
    model: importedTableRowResponse.TableRowResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertWatermarkImageOnline operation.
 * Inserts a new watermark image to the document.
 */
export declare class InsertWatermarkImageOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertWatermarkOnline operation.
 * Insert a watermark to the document.
 */
export declare class InsertWatermarkOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for InsertWatermarkTextOnline operation.
 * Inserts a new watermark text to the document.
 */
export declare class InsertWatermarkTextOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for ProtectDocumentOnline operation.
 * Changes the document protection. The previous protection will be overwritten if it exist.
 */
export declare class ProtectDocumentOnlineResponse {
    /**
     * The REST response with data on document's protection.
     */
    model: importedProtectionDataResponse.ProtectionDataResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for RejectAllRevisionsOnline operation.
 * Rejects all revisions in the document.
 */
export declare class RejectAllRevisionsOnlineResponse {
    /**
     * The REST response with a result of the modification operations for the revisions collection (now these are acceptAll and rejectAll).
     */
    model: importedRevisionsModificationResponse.RevisionsModificationResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for RemoveAllSignaturesOnline operation.
 * Removes all signatures of the document.
 */
export declare class RemoveAllSignaturesOnlineResponse {
    /**
     * The REST response with a document signature collection.
     * This response is returned by the Service when handling any "https://api.aspose.cloud/v4.0/words/Test.doc/signatures" REST API requests.
     */
    model: importedSignatureCollectionResponse.SignatureCollectionResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for RemoveRangeOnline operation.
 * Removes a range from the document.
 */
export declare class RemoveRangeOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for ReplaceTextOnline operation.
 * Replaces text in the document.
 */
export declare class ReplaceTextOnlineResponse {
    /**
     * The REST response with a number of occurrences of the captured text in the document.
     */
    model: importedReplaceTextResponse.ReplaceTextResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for ReplaceWithTextOnline operation.
 * Replaces a range with text in the document.
 */
export declare class ReplaceWithTextOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for SaveAsOnline operation.
 * Converts a document in cloud storage to the specified format.
 */
export declare class SaveAsOnlineResponse {
    /**
     * The REST response with a save result.
     */
    model: importedSaveResponse.SaveResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for SaveAsRangeOnline operation.
 * Saves a range as a new document.
 */
export declare class SaveAsRangeOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for SaveAsTiffOnline operation.
 * Converts a document in cloud storage to TIFF format using detailed conversion settings.
 */
export declare class SaveAsTiffOnlineResponse {
    /**
     * The REST response with a save result.
     */
    model: importedSaveResponse.SaveResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for SignDocumentOnline operation.
 * Signs the document with given certificate.
 */
export declare class SignDocumentOnlineResponse {
    /**
     * The REST response with a document signature collection.
     * This response is returned by the Service when handling any "https://api.aspose.cloud/v4.0/words/Test.doc/signatures" REST API requests.
     */
    model: importedSignatureCollectionResponse.SignatureCollectionResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for SplitDocumentOnline operation.
 * Splits a document into parts and saves them in the specified format.
 */
export declare class SplitDocumentOnlineResponse {
    /**
     * The REST response with a result of document splitting.
     * This response should be returned by the service when handling: POST /{name}/split.
     */
    model: importedSplitDocumentResponse.SplitDocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UnprotectDocumentOnline operation.
 * Removes protection from the document.
 */
export declare class UnprotectDocumentOnlineResponse {
    /**
     * The REST response with data on document's protection.
     */
    model: importedProtectionDataResponse.ProtectionDataResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateBookmarkOnline operation.
 * Updates a bookmark in the document.
 */
export declare class UpdateBookmarkOnlineResponse {
    /**
     * The REST response with a bookmark.
     * This response should be returned by the service when handling: GET bookmarks/{bookmarkName}.
     */
    model: importedBookmarkResponse.BookmarkResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateBorderOnline operation.
 * Updates a border in the document node.
 * The 'nodePath' parameter should refer to a paragraph, a cell or a row.
 */
export declare class UpdateBorderOnlineResponse {
    /**
     * The REST response with a border.
     * This response is returned by the Service when handling "GET {nodeWithBorders}/borders" REST API requests.
     */
    model: importedBorderResponse.BorderResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateCommentOnline operation.
 * Updates a comment in the document.
 */
export declare class UpdateCommentOnlineResponse {
    /**
     * The REST response with a comment.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/comments/0" REST API requests.
     */
    model: importedCommentResponse.CommentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateCustomXmlPartOnline operation.
 * Updates the custom xml part in the document.
 */
export declare class UpdateCustomXmlPartOnlineResponse {
    /**
     * The REST response with a custom xml part.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/customXmlParts/0" REST API requests.
     */
    model: importedCustomXmlPartResponse.CustomXmlPartResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateDrawingObjectOnline operation.
 * Updates a DrawingObject in the document node.
 */
export declare class UpdateDrawingObjectOnlineResponse {
    /**
     * The REST response with a DrawingObject.
     */
    model: importedDrawingObjectResponse.DrawingObjectResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateFieldOnline operation.
 * Updates a field in the document node.
 */
export declare class UpdateFieldOnlineResponse {
    /**
     * The REST response with a field.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/fields/{1}" REST API requests.
     */
    model: importedFieldResponse.FieldResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateFieldsOnline operation.
 * Reevaluates field values in the document.
 */
export declare class UpdateFieldsOnlineResponse {
    /**
     * The REST response with a document description.
     */
    model: importedDocumentResponse.DocumentResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateFootnoteOnline operation.
 * Updates a footnote in the document node.
 */
export declare class UpdateFootnoteOnlineResponse {
    /**
     * The REST response with a footnote.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/footnote/0" REST API requests.
     */
    model: importedFootnoteResponse.FootnoteResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateFormFieldOnline operation.
 * Updates a form field in the document node.
 */
export declare class UpdateFormFieldOnlineResponse {
    /**
     * The REST response with a form field.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/form fields/{1}" REST API requests.
     */
    model: importedFormFieldResponse.FormFieldResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateListLevelOnline operation.
 * Updates the level of a List element in the document.
 */
export declare class UpdateListLevelOnlineResponse {
    /**
     * The REST response with a list information.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/lists/{n}" REST API requests.
     */
    model: importedListResponse.ListResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateListOnline operation.
 * Updates a list in the document.
 */
export declare class UpdateListOnlineResponse {
    /**
     * The REST response with a list information.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/lists/{n}" REST API requests.
     */
    model: importedListResponse.ListResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateParagraphFormatOnline operation.
 * Updates the formatting properties of a paragraph in the document node.
 */
export declare class UpdateParagraphFormatOnlineResponse {
    /**
     * The REST response with the formatting properties of a paragraph.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/format" REST API requests.
     */
    model: importedParagraphFormatResponse.ParagraphFormatResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateParagraphListFormatOnline operation.
 * Updates the formatting properties of a paragraph list in the document node.
 */
export declare class UpdateParagraphListFormatOnlineResponse {
    /**
     * The REST response with a list format for a paragraph.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/listFormat" REST API requests.
     */
    model: importedParagraphListFormatResponse.ParagraphListFormatResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateRunFontOnline operation.
 * Updates the font properties of a Run object in the paragraph.
 */
export declare class UpdateRunFontOnlineResponse {
    /**
     * The REST response with a font.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/runs/{1}/font" REST API requests.
     */
    model: importedFontResponse.FontResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateRunOnline operation.
 * Updates a Run object in the paragraph.
 */
export declare class UpdateRunOnlineResponse {
    /**
     * The REST response with a Run element.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/paragraphs/{0}/runs/{1}" REST API requests.
     */
    model: importedRunResponse.RunResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateSectionPageSetupOnline operation.
 * Updates the page setup of a section in the document.
 */
export declare class UpdateSectionPageSetupOnlineResponse {
    /**
     * The REST response with a page setup of a section.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/sections/{0}/PageSetup" REST API requests.
     */
    model: importedSectionPageSetupResponse.SectionPageSetupResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateStructuredDocumentTagOnline operation.
 * Updates a StructuredDocumentTag (SDT) in the document node.
 */
export declare class UpdateStructuredDocumentTagOnlineResponse {
    /**
     * The REST response with a StructuredDocumentTag.
     */
    model: importedStructuredDocumentTagResponse.StructuredDocumentTagResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateStyleOnline operation.
 * Updates a style in the document.
 */
export declare class UpdateStyleOnlineResponse {
    /**
     * The REST response with a style.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/styles/{0}" REST API requests.
     */
    model: importedStyleResponse.StyleResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateTableCellFormatOnline operation.
 * Updates the formatting properties of a cell in the table row.
 */
export declare class UpdateTableCellFormatOnlineResponse {
    /**
     * The REST response with the formatting properties of a table cell.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/tables/{0}/rows/{1}/cells/{2}/cellformat" REST API requests.
     */
    model: importedTableCellFormatResponse.TableCellFormatResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateTablePropertiesOnline operation.
 * Updates properties of a table in the document node.
 */
export declare class UpdateTablePropertiesOnlineResponse {
    /**
     * The REST response with a table.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/tables/{0}/properties" REST API requests.
     */
    model: importedTablePropertiesResponse.TablePropertiesResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
/**
 * Response model for UpdateTableRowFormatOnline operation.
 * Updates the formatting properties of a table row.
 */
export declare class UpdateTableRowFormatOnlineResponse {
    /**
     * The REST response with the formatting properties of a table row.
     * This response is returned by the Service when handling "GET https://api.aspose.cloud/v4.0/words/Test.doc/tables/{0}/rows/{1}/rowformat" REST API requests.
     */
    model: importedTableRowFormatResponse.TableRowFormatResponse;
    /**
     * The document after modification.
     */
    document: Map<string, Buffer>;
}
