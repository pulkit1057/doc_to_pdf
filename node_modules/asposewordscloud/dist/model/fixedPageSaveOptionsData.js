"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="fixedPageSaveOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FixedPageSaveOptionsData = exports.importsMapFixedPageSaveOptionsData = void 0;
const metafileRenderingOptionsData_1 = require("./metafileRenderingOptionsData");
const saveOptionsData_1 = require("./saveOptionsData");
exports.importsMapFixedPageSaveOptionsData = {
    MetafileRenderingOptionsData: metafileRenderingOptionsData_1.MetafileRenderingOptionsData,
    SaveOptionsData: saveOptionsData_1.SaveOptionsData,
};
/**
 * Contains common options that can be specified when saving a document into fixed page formats (PDF, XPS, images etc).
 */
class FixedPageSaveOptionsData extends saveOptionsData_1.SaveOptionsData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(FixedPageSaveOptionsData.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        super.validate();
        (_a = this.metafileRenderingOptions) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.FixedPageSaveOptionsData = FixedPageSaveOptionsData;
/**
 * Attribute type map
 */
FixedPageSaveOptionsData.attributeTypeMap = [
    {
        name: "colorMode",
        baseName: "ColorMode",
        type: "FixedPageSaveOptionsData.ColorModeEnum",
    },
    {
        name: "jpegQuality",
        baseName: "JpegQuality",
        type: "number",
    },
    {
        name: "metafileRenderingOptions",
        baseName: "MetafileRenderingOptions",
        type: "MetafileRenderingOptionsData",
    },
    {
        name: "numeralFormat",
        baseName: "NumeralFormat",
        type: "FixedPageSaveOptionsData.NumeralFormatEnum",
    },
    {
        name: "optimizeOutput",
        baseName: "OptimizeOutput",
        type: "boolean",
    },
    {
        name: "pageCount",
        baseName: "PageCount",
        type: "number",
    },
    {
        name: "pageIndex",
        baseName: "PageIndex",
        type: "number",
    }
];
/**
 * Enums for FixedPageSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (FixedPageSaveOptionsData) {
    let ColorModeEnum;
    (function (ColorModeEnum) {
        ColorModeEnum[ColorModeEnum["Normal"] = 'Normal'] = "Normal";
        ColorModeEnum[ColorModeEnum["Grayscale"] = 'Grayscale'] = "Grayscale";
    })(ColorModeEnum = FixedPageSaveOptionsData.ColorModeEnum || (FixedPageSaveOptionsData.ColorModeEnum = {}));
    let NumeralFormatEnum;
    (function (NumeralFormatEnum) {
        NumeralFormatEnum[NumeralFormatEnum["European"] = 'European'] = "European";
        NumeralFormatEnum[NumeralFormatEnum["ArabicIndic"] = 'ArabicIndic'] = "ArabicIndic";
        NumeralFormatEnum[NumeralFormatEnum["EasternArabicIndic"] = 'EasternArabicIndic'] = "EasternArabicIndic";
        NumeralFormatEnum[NumeralFormatEnum["Context"] = 'Context'] = "Context";
        NumeralFormatEnum[NumeralFormatEnum["System"] = 'System'] = "System";
    })(NumeralFormatEnum = FixedPageSaveOptionsData.NumeralFormatEnum || (FixedPageSaveOptionsData.NumeralFormatEnum = {}));
})(FixedPageSaveOptionsData = exports.FixedPageSaveOptionsData || (exports.FixedPageSaveOptionsData = {}));
// tslint:enable:quotemark
