import { AttributeInfo } from '../internal/attributeInfo';
import { FixedPageSaveOptionsData } from './fixedPageSaveOptionsData';
export declare const importsMapImageSaveOptionsData: {
    FixedPageSaveOptionsData: typeof FixedPageSaveOptionsData;
};
/**
 * Container abstract class for image save options.
 */
export declare abstract class ImageSaveOptionsData extends FixedPageSaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the horizontal resolution in dots per inch for the generated images.
     * This property has effect only when saving to raster image formats.
     * The default value is 96.
     */
    horizontalResolution: number;
    /**
     * Gets or sets the brightness level of the image.
     */
    imageBrightness: number;
    /**
     * Gets or sets the color mode of the image.
     */
    imageColorMode: ImageSaveOptionsData.ImageColorModeEnum;
    /**
     * Gets or sets the contrast level of the image.
     */
    imageContrast: number;
    /**
     * Gets or sets the background (paper) color of the image.
     */
    paperColor: string;
    /**
     * Gets or sets the pixel format of the image.
     */
    pixelFormat: ImageSaveOptionsData.PixelFormatEnum;
    /**
     * Gets or sets both horizontal and vertical resolution in dots per inch for the generated images.
     * This property has effect only when saving to raster image formats.
     * The default value is 96.
     */
    resolution: number;
    /**
     * Gets or sets the zoom factor of the image.
     */
    scale: number;
    /**
     * Gets or sets a value indicating whether to use anti-aliasing for rendering.
     */
    useAntiAliasing: boolean;
    /**
     * Gets or sets a value indicating whether to use high quality (i.e. slow) rendering algorithms.
     */
    useHighQualityRendering: boolean;
    /**
     * Gets or sets the vertical resolution in dots per inch for the generated images.
     * This property has effect only when saving to raster image formats.
     * The default value is 96.
     */
    verticalResolution: number;
    /**
     * Gets or sets the height of a generated image in pixels.
     * This property has effect only when saving to raster image formats
     * and used in pair with ImageWidth.
     */
    imageHeight: number;
    /**
     * Gets or sets the width of a generated image in pixels.
     * This property has effect only when saving to raster image formats
     * and used in pair with ImageHeight.
     */
    imageWidth: number;
    /**
     * Gets or sets a value indicating whether to use GDI+ or Aspose.Words metafile renderer when saving to EMF.
     * If set to true - GDI+ metafile renderer is used. I.e. content is written to GDI+ graphics object and saved to metafile.If set to false - Aspose.Words metafile renderer is used. I.e. content is written directly to the metafile format with Aspose.Words.The default value is true.Has effect only when saving to EMF.
     */
    useGdiEmfRenderer: boolean;
    constructor(init?: Partial<ImageSaveOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for ImageSaveOptionsData
 */
export declare namespace ImageSaveOptionsData {
    enum ImageColorModeEnum {
        None,
        Grayscale,
        BlackAndWhite
    }
    enum PixelFormatEnum {
        Format16BppRgb555,
        Format16BppRgb565,
        Format16BppArgb1555,
        Format24BppRgb,
        Format32BppRgb,
        Format32BppArgb,
        Format32BppPArgb,
        Format48BppRgb,
        Format64BppArgb,
        Format64BppPArgb,
        Format1bppIndexed
    }
}
