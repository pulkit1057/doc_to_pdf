import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
import { DocumentProperties } from './documentProperties';
import { Link } from './link';
export declare const importsMapDocument: {
    DocumentProperties: typeof DocumentProperties;
    Link: typeof Link;
};
/**
 * Represents Words document DTO.
 */
export declare class Document implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the list of links that originate from this document.
     */
    links: Array<Link>;
    /**
     * Gets or sets the document properties.
     */
    documentProperties: DocumentProperties;
    /**
     * Gets or sets the name of the file.
     */
    fileName: string;
    /**
     * Gets or sets a value indicating whether the document is encrypted and requires a password to open.
     */
    isEncrypted: boolean;
    /**
     * Gets or sets a value indicating whether the document contains a digital signature. This property merely informs that a digital signature is present on a document, but it does not specify whether the signature is valid or not.
     */
    isSigned: boolean;
    /**
     * Gets or sets the original format of the document.
     */
    sourceFormat: Document.SourceFormatEnum;
    constructor(init?: Partial<Document>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for Document
 */
export declare namespace Document {
    enum SourceFormatEnum {
        Unknown,
        Doc,
        Dot,
        DocPreWord60,
        Docx,
        Docm,
        Dotx,
        Dotm,
        FlatOpc,
        Rtf,
        WordML,
        Html,
        Mhtml,
        Epub,
        Text,
        Odt,
        Ott,
        Pdf,
        Xps,
        Tiff,
        Svg,
        Azw3
    }
}
