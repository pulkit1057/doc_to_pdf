import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
export declare const importsMapCompareOptions: {};
/**
 * DTO container with compare documents options.
 */
export declare class CompareOptions implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets whether accept revisions before comparison or not.
     */
    acceptAllRevisionsBeforeComparison: boolean;
    /**
     * Gets or sets a value indicating whether documents comparison is case insensitive. By default comparison is case sensitive.
     */
    ignoreCaseChanges: boolean;
    /**
     * Gets or sets a value indicating whether comments content is ignored. By default comments are not ignored.
     */
    ignoreComments: boolean;
    /**
     * Gets or sets a value indicating whether fields content is ignored. By default fields are not ignored.
     */
    ignoreFields: boolean;
    /**
     * Gets or sets a value indicating whether footnotes/endnotes content is ignored. By default footnotes/endnotes are not ignored.
     */
    ignoreFootnotes: boolean;
    /**
     * Gets or sets a value indicating whether formatting is ignored. By default document formatting is not ignored.
     */
    ignoreFormatting: boolean;
    /**
     * Gets or sets a value indicating whether headers and footers content is ignored. By default headers and footers are not ignored.
     */
    ignoreHeadersAndFooters: boolean;
    /**
     * Gets or sets a value indicating whether tables content is ignored. By default tables are not ignored.
     */
    ignoreTables: boolean;
    /**
     * Gets or sets a value indicating whether textboxes content is ignored. By default textboxes are not ignored.
     */
    ignoreTextboxes: boolean;
    /**
     * Gets or sets the option that controls which document shall be used as a target during comparison.
     */
    target: CompareOptions.TargetEnum;
    constructor(init?: Partial<CompareOptions>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for CompareOptions
 */
export declare namespace CompareOptions {
    enum TargetEnum {
        Current,
        New
    }
}
