"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="splitDocumentResult.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitDocumentResult = exports.importsMapSplitDocumentResult = void 0;
const fileLink_1 = require("./fileLink");
exports.importsMapSplitDocumentResult = {
    FileLink: fileLink_1.FileLink,
};
/**
 * Result of splitting document.
 */
class SplitDocumentResult {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return SplitDocumentResult.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a, _b;
        (_a = this.sourceDocument) === null || _a === void 0 ? void 0 : _a.validate();
        (_b = this.zippedPages) === null || _b === void 0 ? void 0 : _b.validate();
        if (this.pages !== null && this.pages !== undefined) {
            for (let elementPages of this.pages) {
                elementPages === null || elementPages === void 0 ? void 0 : elementPages.validate();
            }
        }
    }
}
exports.SplitDocumentResult = SplitDocumentResult;
/**
 * Attribute type map
 */
SplitDocumentResult.attributeTypeMap = [
    {
        name: "sourceDocument",
        baseName: "SourceDocument",
        type: "FileLink",
    },
    {
        name: "zippedPages",
        baseName: "ZippedPages",
        type: "FileLink",
    },
    {
        name: "pages",
        baseName: "Pages",
        type: "Array<FileLink>",
    }
];
