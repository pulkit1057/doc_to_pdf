"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="footnoteBase.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FootnoteBase = exports.importsMapFootnoteBase = void 0;
const position_1 = require("./position");
exports.importsMapFootnoteBase = {
    Position: position_1.Position,
};
/**
 * Footnote base class.
 */
class FootnoteBase {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return FootnoteBase.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        (_a = this.position) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.FootnoteBase = FootnoteBase;
/**
 * Attribute type map
 */
FootnoteBase.attributeTypeMap = [
    {
        name: "position",
        baseName: "Position",
        type: "Position",
    },
    {
        name: "footnoteType",
        baseName: "FootnoteType",
        type: "FootnoteBase.FootnoteTypeEnum",
    },
    {
        name: "referenceMark",
        baseName: "ReferenceMark",
        type: "string",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Enums for FootnoteBase
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (FootnoteBase) {
    let FootnoteTypeEnum;
    (function (FootnoteTypeEnum) {
        FootnoteTypeEnum[FootnoteTypeEnum["Footnote"] = 'Footnote'] = "Footnote";
        FootnoteTypeEnum[FootnoteTypeEnum["Endnote"] = 'Endnote'] = "Endnote";
    })(FootnoteTypeEnum = FootnoteBase.FootnoteTypeEnum || (FootnoteBase.FootnoteTypeEnum = {}));
})(FootnoteBase = exports.FootnoteBase || (exports.FootnoteBase = {}));
// tslint:enable:quotemark
