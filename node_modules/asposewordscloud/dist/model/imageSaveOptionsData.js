"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="imageSaveOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageSaveOptionsData = exports.importsMapImageSaveOptionsData = void 0;
const fixedPageSaveOptionsData_1 = require("./fixedPageSaveOptionsData");
exports.importsMapImageSaveOptionsData = {
    FixedPageSaveOptionsData: fixedPageSaveOptionsData_1.FixedPageSaveOptionsData,
};
/**
 * Container abstract class for image save options.
 */
class ImageSaveOptionsData extends fixedPageSaveOptionsData_1.FixedPageSaveOptionsData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImageSaveOptionsData.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        super.validate();
    }
}
exports.ImageSaveOptionsData = ImageSaveOptionsData;
/**
 * Attribute type map
 */
ImageSaveOptionsData.attributeTypeMap = [
    {
        name: "horizontalResolution",
        baseName: "HorizontalResolution",
        type: "number",
    },
    {
        name: "imageBrightness",
        baseName: "ImageBrightness",
        type: "number",
    },
    {
        name: "imageColorMode",
        baseName: "ImageColorMode",
        type: "ImageSaveOptionsData.ImageColorModeEnum",
    },
    {
        name: "imageContrast",
        baseName: "ImageContrast",
        type: "number",
    },
    {
        name: "paperColor",
        baseName: "PaperColor",
        type: "string",
    },
    {
        name: "pixelFormat",
        baseName: "PixelFormat",
        type: "ImageSaveOptionsData.PixelFormatEnum",
    },
    {
        name: "resolution",
        baseName: "Resolution",
        type: "number",
    },
    {
        name: "scale",
        baseName: "Scale",
        type: "number",
    },
    {
        name: "useAntiAliasing",
        baseName: "UseAntiAliasing",
        type: "boolean",
    },
    {
        name: "useHighQualityRendering",
        baseName: "UseHighQualityRendering",
        type: "boolean",
    },
    {
        name: "verticalResolution",
        baseName: "VerticalResolution",
        type: "number",
    },
    {
        name: "imageHeight",
        baseName: "ImageHeight",
        type: "number",
    },
    {
        name: "imageWidth",
        baseName: "ImageWidth",
        type: "number",
    },
    {
        name: "useGdiEmfRenderer",
        baseName: "UseGdiEmfRenderer",
        type: "boolean",
    }
];
/**
 * Enums for ImageSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (ImageSaveOptionsData) {
    let ImageColorModeEnum;
    (function (ImageColorModeEnum) {
        ImageColorModeEnum[ImageColorModeEnum["None"] = 'None'] = "None";
        ImageColorModeEnum[ImageColorModeEnum["Grayscale"] = 'Grayscale'] = "Grayscale";
        ImageColorModeEnum[ImageColorModeEnum["BlackAndWhite"] = 'BlackAndWhite'] = "BlackAndWhite";
    })(ImageColorModeEnum = ImageSaveOptionsData.ImageColorModeEnum || (ImageSaveOptionsData.ImageColorModeEnum = {}));
    let PixelFormatEnum;
    (function (PixelFormatEnum) {
        PixelFormatEnum[PixelFormatEnum["Format16BppRgb555"] = 'Format16BppRgb555'] = "Format16BppRgb555";
        PixelFormatEnum[PixelFormatEnum["Format16BppRgb565"] = 'Format16BppRgb565'] = "Format16BppRgb565";
        PixelFormatEnum[PixelFormatEnum["Format16BppArgb1555"] = 'Format16BppArgb1555'] = "Format16BppArgb1555";
        PixelFormatEnum[PixelFormatEnum["Format24BppRgb"] = 'Format24BppRgb'] = "Format24BppRgb";
        PixelFormatEnum[PixelFormatEnum["Format32BppRgb"] = 'Format32BppRgb'] = "Format32BppRgb";
        PixelFormatEnum[PixelFormatEnum["Format32BppArgb"] = 'Format32BppArgb'] = "Format32BppArgb";
        PixelFormatEnum[PixelFormatEnum["Format32BppPArgb"] = 'Format32BppPArgb'] = "Format32BppPArgb";
        PixelFormatEnum[PixelFormatEnum["Format48BppRgb"] = 'Format48BppRgb'] = "Format48BppRgb";
        PixelFormatEnum[PixelFormatEnum["Format64BppArgb"] = 'Format64BppArgb'] = "Format64BppArgb";
        PixelFormatEnum[PixelFormatEnum["Format64BppPArgb"] = 'Format64BppPArgb'] = "Format64BppPArgb";
        PixelFormatEnum[PixelFormatEnum["Format1bppIndexed"] = 'Format1bppIndexed'] = "Format1bppIndexed";
    })(PixelFormatEnum = ImageSaveOptionsData.PixelFormatEnum || (ImageSaveOptionsData.PixelFormatEnum = {}));
})(ImageSaveOptionsData = exports.ImageSaveOptionsData || (exports.ImageSaveOptionsData = {}));
// tslint:enable:quotemark
