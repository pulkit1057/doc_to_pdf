"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="htmlSaveOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlSaveOptionsData = exports.importsMapHtmlSaveOptionsData = void 0;
const saveOptionsData_1 = require("./saveOptionsData");
exports.importsMapHtmlSaveOptionsData = {
    SaveOptionsData: saveOptionsData_1.SaveOptionsData,
};
/**
 * Container class for html save options.
 */
class HtmlSaveOptionsData extends saveOptionsData_1.SaveOptionsData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HtmlSaveOptionsData.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        this.saveFormat = 'html';
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        super.validate();
    }
}
exports.HtmlSaveOptionsData = HtmlSaveOptionsData;
/**
 * Attribute type map
 */
HtmlSaveOptionsData.attributeTypeMap = [
    {
        name: "allowNegativeIndent",
        baseName: "AllowNegativeIndent",
        type: "boolean",
    },
    {
        name: "cssClassNamePrefix",
        baseName: "CssClassNamePrefix",
        type: "string",
    },
    {
        name: "cssStyleSheetFileName",
        baseName: "CssStyleSheetFileName",
        type: "string",
    },
    {
        name: "cssStyleSheetType",
        baseName: "CssStyleSheetType",
        type: "HtmlSaveOptionsData.CssStyleSheetTypeEnum",
    },
    {
        name: "documentSplitCriteria",
        baseName: "DocumentSplitCriteria",
        type: "HtmlSaveOptionsData.DocumentSplitCriteriaEnum",
    },
    {
        name: "documentSplitHeadingLevel",
        baseName: "DocumentSplitHeadingLevel",
        type: "number",
    },
    {
        name: "encoding",
        baseName: "Encoding",
        type: "string",
    },
    {
        name: "exportDocumentProperties",
        baseName: "ExportDocumentProperties",
        type: "boolean",
    },
    {
        name: "exportDropDownFormFieldAsText",
        baseName: "ExportDropDownFormFieldAsText",
        type: "boolean",
    },
    {
        name: "exportFontResources",
        baseName: "ExportFontResources",
        type: "boolean",
    },
    {
        name: "exportFontsAsBase64",
        baseName: "ExportFontsAsBase64",
        type: "boolean",
    },
    {
        name: "exportHeadersFootersMode",
        baseName: "ExportHeadersFootersMode",
        type: "HtmlSaveOptionsData.ExportHeadersFootersModeEnum",
    },
    {
        name: "exportImagesAsBase64",
        baseName: "ExportImagesAsBase64",
        type: "boolean",
    },
    {
        name: "exportLanguageInformation",
        baseName: "ExportLanguageInformation",
        type: "boolean",
    },
    {
        name: "exportListLabels",
        baseName: "ExportListLabels",
        type: "HtmlSaveOptionsData.ExportListLabelsEnum",
    },
    {
        name: "exportOriginalUrlForLinkedImages",
        baseName: "ExportOriginalUrlForLinkedImages",
        type: "boolean",
    },
    {
        name: "exportPageMargins",
        baseName: "ExportPageMargins",
        type: "boolean",
    },
    {
        name: "exportPageSetup",
        baseName: "ExportPageSetup",
        type: "boolean",
    },
    {
        name: "exportRelativeFontSize",
        baseName: "ExportRelativeFontSize",
        type: "boolean",
    },
    {
        name: "exportRoundtripInformation",
        baseName: "ExportRoundtripInformation",
        type: "boolean",
    },
    {
        name: "exportTextInputFormFieldAsText",
        baseName: "ExportTextInputFormFieldAsText",
        type: "boolean",
    },
    {
        name: "exportTocPageNumbers",
        baseName: "ExportTocPageNumbers",
        type: "boolean",
    },
    {
        name: "exportXhtmlTransitional",
        baseName: "ExportXhtmlTransitional",
        type: "boolean",
    },
    {
        name: "fontResourcesSubsettingSizeThreshold",
        baseName: "FontResourcesSubsettingSizeThreshold",
        type: "number",
    },
    {
        name: "fontsFolder",
        baseName: "FontsFolder",
        type: "string",
    },
    {
        name: "fontsFolderAlias",
        baseName: "FontsFolderAlias",
        type: "string",
    },
    {
        name: "htmlVersion",
        baseName: "HtmlVersion",
        type: "HtmlSaveOptionsData.HtmlVersionEnum",
    },
    {
        name: "imageResolution",
        baseName: "ImageResolution",
        type: "number",
    },
    {
        name: "imagesFolder",
        baseName: "ImagesFolder",
        type: "string",
    },
    {
        name: "imagesFolderAlias",
        baseName: "ImagesFolderAlias",
        type: "string",
    },
    {
        name: "metafileFormat",
        baseName: "MetafileFormat",
        type: "HtmlSaveOptionsData.MetafileFormatEnum",
    },
    {
        name: "officeMathOutputMode",
        baseName: "OfficeMathOutputMode",
        type: "HtmlSaveOptionsData.OfficeMathOutputModeEnum",
    },
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    },
    {
        name: "replaceBackslashWithYenSign",
        baseName: "ReplaceBackslashWithYenSign",
        type: "boolean",
    },
    {
        name: "resolveFontNames",
        baseName: "ResolveFontNames",
        type: "boolean",
    },
    {
        name: "resourceFolder",
        baseName: "ResourceFolder",
        type: "string",
    },
    {
        name: "resourceFolderAlias",
        baseName: "ResourceFolderAlias",
        type: "string",
    },
    {
        name: "scaleImageToShapeSize",
        baseName: "ScaleImageToShapeSize",
        type: "boolean",
    },
    {
        name: "tableWidthOutputMode",
        baseName: "TableWidthOutputMode",
        type: "HtmlSaveOptionsData.TableWidthOutputModeEnum",
    }
];
/**
 * Enums for HtmlSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (HtmlSaveOptionsData) {
    let CssStyleSheetTypeEnum;
    (function (CssStyleSheetTypeEnum) {
        CssStyleSheetTypeEnum[CssStyleSheetTypeEnum["Inline"] = 'Inline'] = "Inline";
        CssStyleSheetTypeEnum[CssStyleSheetTypeEnum["Embedded"] = 'Embedded'] = "Embedded";
        CssStyleSheetTypeEnum[CssStyleSheetTypeEnum["External"] = 'External'] = "External";
    })(CssStyleSheetTypeEnum = HtmlSaveOptionsData.CssStyleSheetTypeEnum || (HtmlSaveOptionsData.CssStyleSheetTypeEnum = {}));
    let DocumentSplitCriteriaEnum;
    (function (DocumentSplitCriteriaEnum) {
        DocumentSplitCriteriaEnum[DocumentSplitCriteriaEnum["None"] = 'None'] = "None";
        DocumentSplitCriteriaEnum[DocumentSplitCriteriaEnum["PageBreak"] = 'PageBreak'] = "PageBreak";
        DocumentSplitCriteriaEnum[DocumentSplitCriteriaEnum["ColumnBreak"] = 'ColumnBreak'] = "ColumnBreak";
        DocumentSplitCriteriaEnum[DocumentSplitCriteriaEnum["SectionBreak"] = 'SectionBreak'] = "SectionBreak";
        DocumentSplitCriteriaEnum[DocumentSplitCriteriaEnum["HeadingParagraph"] = 'HeadingParagraph'] = "HeadingParagraph";
    })(DocumentSplitCriteriaEnum = HtmlSaveOptionsData.DocumentSplitCriteriaEnum || (HtmlSaveOptionsData.DocumentSplitCriteriaEnum = {}));
    let ExportHeadersFootersModeEnum;
    (function (ExportHeadersFootersModeEnum) {
        ExportHeadersFootersModeEnum[ExportHeadersFootersModeEnum["None"] = 'None'] = "None";
        ExportHeadersFootersModeEnum[ExportHeadersFootersModeEnum["PerSection"] = 'PerSection'] = "PerSection";
        ExportHeadersFootersModeEnum[ExportHeadersFootersModeEnum["FirstSectionHeaderLastSectionFooter"] = 'FirstSectionHeaderLastSectionFooter'] = "FirstSectionHeaderLastSectionFooter";
        ExportHeadersFootersModeEnum[ExportHeadersFootersModeEnum["FirstPageHeaderFooterPerSection"] = 'FirstPageHeaderFooterPerSection'] = "FirstPageHeaderFooterPerSection";
    })(ExportHeadersFootersModeEnum = HtmlSaveOptionsData.ExportHeadersFootersModeEnum || (HtmlSaveOptionsData.ExportHeadersFootersModeEnum = {}));
    let ExportListLabelsEnum;
    (function (ExportListLabelsEnum) {
        ExportListLabelsEnum[ExportListLabelsEnum["Auto"] = 'Auto'] = "Auto";
        ExportListLabelsEnum[ExportListLabelsEnum["AsInlineText"] = 'AsInlineText'] = "AsInlineText";
        ExportListLabelsEnum[ExportListLabelsEnum["ByHtmlTags"] = 'ByHtmlTags'] = "ByHtmlTags";
    })(ExportListLabelsEnum = HtmlSaveOptionsData.ExportListLabelsEnum || (HtmlSaveOptionsData.ExportListLabelsEnum = {}));
    let HtmlVersionEnum;
    (function (HtmlVersionEnum) {
        HtmlVersionEnum[HtmlVersionEnum["Xhtml"] = 'Xhtml'] = "Xhtml";
        HtmlVersionEnum[HtmlVersionEnum["Html5"] = 'Html5'] = "Html5";
    })(HtmlVersionEnum = HtmlSaveOptionsData.HtmlVersionEnum || (HtmlSaveOptionsData.HtmlVersionEnum = {}));
    let MetafileFormatEnum;
    (function (MetafileFormatEnum) {
        MetafileFormatEnum[MetafileFormatEnum["Png"] = 'Png'] = "Png";
        MetafileFormatEnum[MetafileFormatEnum["Svg"] = 'Svg'] = "Svg";
        MetafileFormatEnum[MetafileFormatEnum["EmfOrWmf"] = 'EmfOrWmf'] = "EmfOrWmf";
    })(MetafileFormatEnum = HtmlSaveOptionsData.MetafileFormatEnum || (HtmlSaveOptionsData.MetafileFormatEnum = {}));
    let OfficeMathOutputModeEnum;
    (function (OfficeMathOutputModeEnum) {
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["Image"] = 'Image'] = "Image";
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["MathML"] = 'MathML'] = "MathML";
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["Text"] = 'Text'] = "Text";
    })(OfficeMathOutputModeEnum = HtmlSaveOptionsData.OfficeMathOutputModeEnum || (HtmlSaveOptionsData.OfficeMathOutputModeEnum = {}));
    let TableWidthOutputModeEnum;
    (function (TableWidthOutputModeEnum) {
        TableWidthOutputModeEnum[TableWidthOutputModeEnum["All"] = 'All'] = "All";
        TableWidthOutputModeEnum[TableWidthOutputModeEnum["RelativeOnly"] = 'RelativeOnly'] = "RelativeOnly";
        TableWidthOutputModeEnum[TableWidthOutputModeEnum["None"] = 'None'] = "None";
    })(TableWidthOutputModeEnum = HtmlSaveOptionsData.TableWidthOutputModeEnum || (HtmlSaveOptionsData.TableWidthOutputModeEnum = {}));
})(HtmlSaveOptionsData = exports.HtmlSaveOptionsData || (exports.HtmlSaveOptionsData = {}));
// tslint:enable:quotemark
