import { AttributeInfo } from '../internal/attributeInfo';
import { BaseEntry } from './baseEntry';
export declare const importsMapDocumentEntry: {
    BaseEntry: typeof BaseEntry;
};
/**
 * Represents a document which will be appended to the original resource document.
 */
export declare class DocumentEntry extends BaseEntry {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets document password encrypted on API public key. The default value is null (the document has no password).
     */
    encryptedPassword: string;
    /**
     * Gets or sets the option that controls formatting will be used: appended or destination document. Can be KeepSourceFormatting or UseDestinationStyles.
     */
    importFormatMode: DocumentEntry.ImportFormatModeEnum;
    constructor(init?: Partial<DocumentEntry>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for DocumentEntry
 */
export declare namespace DocumentEntry {
    enum ImportFormatModeEnum {
        UseDestinationStyles,
        KeepSourceFormatting,
        KeepDifferentStyles
    }
}
