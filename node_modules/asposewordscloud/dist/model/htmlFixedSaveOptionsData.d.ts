import { AttributeInfo } from '../internal/attributeInfo';
import { FixedPageSaveOptionsData } from './fixedPageSaveOptionsData';
export declare const importsMapHtmlFixedSaveOptionsData: {
    FixedPageSaveOptionsData: typeof FixedPageSaveOptionsData;
};
/**
 * Container class for fixed html save options.
 */
export declare class HtmlFixedSaveOptionsData extends FixedPageSaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the prefix which is added to all class names in style.css file.
     * Default value is "aw".
     */
    cssClassNamesPrefix: string;
    /**
     * Gets or sets the character encoding.
     */
    encoding: string;
    /**
     * Gets or sets a value indicating whether the CSS (Cascading Style Sheet) should be embedded into the Html document.
     */
    exportEmbeddedCss: boolean;
    /**
     * Gets or sets a value indicating whether fonts should be embedded into the Html document in Base64 format.
     */
    exportEmbeddedFonts: boolean;
    /**
     * Gets or sets a value indicating whether images should be embedded into the Html document in Base64 format.
     */
    exportEmbeddedImages: boolean;
    /**
     * Gets or sets a value indicating whether form fields are exported as interactive items (as 'input' tag) rather than converted to text or graphics.
     */
    exportFormFields: boolean;
    /**
     * Gets or sets the export format of fonts.
     */
    fontFormat: HtmlFixedSaveOptionsData.FontFormatEnum;
    /**
     * Gets or sets the horizontal alignment of pages in the HTML document.
     * The default value is HtmlFixedHorizontalPageAlignment.Center.
     */
    pageHorizontalAlignment: HtmlFixedSaveOptionsData.PageHorizontalAlignmentEnum;
    /**
     * Gets or sets the margin around pages in HTML document.
     * The margins value is measured in points and should be equal to or greater than 0.
     * Default value is 10 points.
     * Depends on the value of PageHorizontalAlignment property:
     * Defines top, bottom and left page margins if the value is Left.
     * Defines top, bottom and right page margins if the value is Right.
     * Defines top and bottom page margins if the value is Center.
     */
    pageMargins: number;
    /**
     * Gets or sets the physical folder where resources are saved when exporting the document.
     */
    resourcesFolder: string;
    /**
     * Gets or sets the name of the folder used to construct resource URIs.
     */
    resourcesFolderAlias: string;
    /**
     * Gets or sets a value indicating whether "@font-face" CSS rules should be placed into a separate file "fontFaces.css" when a document is being saved with external stylesheet (that is, when Aspose.Words.Saving.HtmlFixedSaveOptions.ExportEmbeddedCss is false). The default value is false, all CSS rules are written into single file "styles.css".
     * Setting this property to true restores the old behavior (separate files) for compatibility with legacy code.
     */
    saveFontFaceCssSeparately: boolean;
    /**
     * Gets or sets a value indicating whether to show border around pages.
     */
    showPageBorder: boolean;
    /**
     * Gets or sets a value indicating whether fonts from target machine must be used to display the document. If this flag is set to true, Aspose.Words.Saving.HtmlFixedSaveOptions.FontFormat and Aspose.Words.Saving.HtmlFixedSaveOptions.ExportEmbeddedFonts properties do not have effect, also Aspose.Words.Saving.HtmlFixedSaveOptions.ResourceSavingCallback is not fired for fonts. The default value is false.
     */
    useTargetMachineFonts: boolean;
    constructor(init?: Partial<HtmlFixedSaveOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for HtmlFixedSaveOptionsData
 */
export declare namespace HtmlFixedSaveOptionsData {
    enum FontFormatEnum {
        Woff,
        Ttf
    }
    enum PageHorizontalAlignmentEnum {
        Left,
        Center,
        Right
    }
}
