"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="documentEntry.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentEntry = exports.importsMapDocumentEntry = void 0;
const baseEntry_1 = require("./baseEntry");
exports.importsMapDocumentEntry = {
    BaseEntry: baseEntry_1.BaseEntry,
};
/**
 * Represents a document which will be appended to the original resource document.
 */
class DocumentEntry extends baseEntry_1.BaseEntry {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(DocumentEntry.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
        super.collectFilesContent(_resultFilesContent);
    }
    validate() {
        super.validate();
        if (this.importFormatMode === null || this.importFormatMode === undefined) {
            throw new Error('Property ImportFormatMode in DocumentEntry is required.');
        }
    }
}
exports.DocumentEntry = DocumentEntry;
/**
 * Attribute type map
 */
DocumentEntry.attributeTypeMap = [
    {
        name: "encryptedPassword",
        baseName: "EncryptedPassword",
        type: "string",
    },
    {
        name: "importFormatMode",
        baseName: "ImportFormatMode",
        type: "DocumentEntry.ImportFormatModeEnum",
    }
];
/**
 * Enums for DocumentEntry
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (DocumentEntry) {
    let ImportFormatModeEnum;
    (function (ImportFormatModeEnum) {
        ImportFormatModeEnum[ImportFormatModeEnum["UseDestinationStyles"] = 'UseDestinationStyles'] = "UseDestinationStyles";
        ImportFormatModeEnum[ImportFormatModeEnum["KeepSourceFormatting"] = 'KeepSourceFormatting'] = "KeepSourceFormatting";
        ImportFormatModeEnum[ImportFormatModeEnum["KeepDifferentStyles"] = 'KeepDifferentStyles'] = "KeepDifferentStyles";
    })(ImportFormatModeEnum = DocumentEntry.ImportFormatModeEnum || (DocumentEntry.ImportFormatModeEnum = {}));
})(DocumentEntry = exports.DocumentEntry || (exports.DocumentEntry = {}));
// tslint:enable:quotemark
