import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
import { PositionInsideNode } from './positionInsideNode';
export declare const importsMapCommentBase: {
    PositionInsideNode: typeof PositionInsideNode;
};
/**
 * Comment.
 */
export declare abstract class CommentBase implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the link to comment range start node.
     */
    rangeStart: PositionInsideNode;
    /**
     * Gets or sets the link to comment range end node.
     */
    rangeEnd: PositionInsideNode;
    /**
     * Gets or sets the author name for a comment.
     * Cannot be null.Default is empty string.
     */
    author: string;
    /**
     * Gets or sets the initials of the user associated with a specific comment.
     * Cannot be null.Default is empty string.
     */
    initial: string;
    /**
     * Gets or sets the date and time that the comment was made.
     * Default is MinValue03.01.0001.
     */
    dateTime: Date;
    /**
     * Gets or sets text of the comment.
     * This method allows to quickly set text of a comment from a string. The string can contain paragraph breaks, this will create paragraphs of text in the comment accordingly.
     */
    text: string;
    constructor(init?: Partial<CommentBase>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
