import { AttributeInfo } from '../internal/attributeInfo';
import { FixedPageSaveOptionsData } from './fixedPageSaveOptionsData';
export declare const importsMapSvgSaveOptionsData: {
    FixedPageSaveOptionsData: typeof FixedPageSaveOptionsData;
};
/**
 * Container class for svg save options.
 */
export declare class SvgSaveOptionsData extends FixedPageSaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets a value indicating whether images should be embedded into SVG document as base64.
     */
    exportEmbeddedImages: boolean;
    /**
     * Gets or sets a value indicating whether the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.
     */
    fitToViewPort: boolean;
    /**
     * Gets or sets a value in pixels per inch that limits resolution of exported raster images.
     * If the value of this property is non-zero, it limits resolution of exported raster images.
     * That is, higher-resolution images are resampled down to the limit and lower-resolution images are exported as is.
     */
    maxImageResolution: number;
    /**
     * Gets or sets the physical folder where resources (images) are saved when exporting.
     */
    resourcesFolder: string;
    /**
     * Gets or sets the name of the folder used to construct image URIs.
     */
    resourcesFolderAlias: string;
    /**
     * Gets or sets a value indicating whether to show or hide page stepper.
     */
    showPageBorder: boolean;
    /**
     * Gets or sets the option that controls how text should be rendered.
     */
    textOutputMode: SvgSaveOptionsData.TextOutputModeEnum;
    constructor(init?: Partial<SvgSaveOptionsData>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for SvgSaveOptionsData
 */
export declare namespace SvgSaveOptionsData {
    enum TextOutputModeEnum {
        UseSvgFonts,
        UseTargetMachineFonts,
        UsePlacedGlyphs
    }
}
