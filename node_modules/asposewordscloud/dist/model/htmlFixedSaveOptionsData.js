"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="htmlFixedSaveOptionsData.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlFixedSaveOptionsData = exports.importsMapHtmlFixedSaveOptionsData = void 0;
const fixedPageSaveOptionsData_1 = require("./fixedPageSaveOptionsData");
exports.importsMapHtmlFixedSaveOptionsData = {
    FixedPageSaveOptionsData: fixedPageSaveOptionsData_1.FixedPageSaveOptionsData,
};
/**
 * Container class for fixed html save options.
 */
class HtmlFixedSaveOptionsData extends fixedPageSaveOptionsData_1.FixedPageSaveOptionsData {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HtmlFixedSaveOptionsData.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        this.saveFormat = 'htmlfixed';
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        super.validate();
    }
}
exports.HtmlFixedSaveOptionsData = HtmlFixedSaveOptionsData;
/**
 * Attribute type map
 */
HtmlFixedSaveOptionsData.attributeTypeMap = [
    {
        name: "cssClassNamesPrefix",
        baseName: "CssClassNamesPrefix",
        type: "string",
    },
    {
        name: "encoding",
        baseName: "Encoding",
        type: "string",
    },
    {
        name: "exportEmbeddedCss",
        baseName: "ExportEmbeddedCss",
        type: "boolean",
    },
    {
        name: "exportEmbeddedFonts",
        baseName: "ExportEmbeddedFonts",
        type: "boolean",
    },
    {
        name: "exportEmbeddedImages",
        baseName: "ExportEmbeddedImages",
        type: "boolean",
    },
    {
        name: "exportFormFields",
        baseName: "ExportFormFields",
        type: "boolean",
    },
    {
        name: "fontFormat",
        baseName: "FontFormat",
        type: "HtmlFixedSaveOptionsData.FontFormatEnum",
    },
    {
        name: "pageHorizontalAlignment",
        baseName: "PageHorizontalAlignment",
        type: "HtmlFixedSaveOptionsData.PageHorizontalAlignmentEnum",
    },
    {
        name: "pageMargins",
        baseName: "PageMargins",
        type: "number",
    },
    {
        name: "resourcesFolder",
        baseName: "ResourcesFolder",
        type: "string",
    },
    {
        name: "resourcesFolderAlias",
        baseName: "ResourcesFolderAlias",
        type: "string",
    },
    {
        name: "saveFontFaceCssSeparately",
        baseName: "SaveFontFaceCssSeparately",
        type: "boolean",
    },
    {
        name: "showPageBorder",
        baseName: "ShowPageBorder",
        type: "boolean",
    },
    {
        name: "useTargetMachineFonts",
        baseName: "UseTargetMachineFonts",
        type: "boolean",
    }
];
/**
 * Enums for HtmlFixedSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (HtmlFixedSaveOptionsData) {
    let FontFormatEnum;
    (function (FontFormatEnum) {
        FontFormatEnum[FontFormatEnum["Woff"] = 'Woff'] = "Woff";
        FontFormatEnum[FontFormatEnum["Ttf"] = 'Ttf'] = "Ttf";
    })(FontFormatEnum = HtmlFixedSaveOptionsData.FontFormatEnum || (HtmlFixedSaveOptionsData.FontFormatEnum = {}));
    let PageHorizontalAlignmentEnum;
    (function (PageHorizontalAlignmentEnum) {
        PageHorizontalAlignmentEnum[PageHorizontalAlignmentEnum["Left"] = 'Left'] = "Left";
        PageHorizontalAlignmentEnum[PageHorizontalAlignmentEnum["Center"] = 'Center'] = "Center";
        PageHorizontalAlignmentEnum[PageHorizontalAlignmentEnum["Right"] = 'Right'] = "Right";
    })(PageHorizontalAlignmentEnum = HtmlFixedSaveOptionsData.PageHorizontalAlignmentEnum || (HtmlFixedSaveOptionsData.PageHorizontalAlignmentEnum = {}));
})(HtmlFixedSaveOptionsData = exports.HtmlFixedSaveOptionsData || (exports.HtmlFixedSaveOptionsData = {}));
// tslint:enable:quotemark
