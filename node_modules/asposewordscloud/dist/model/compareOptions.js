"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="compareOptions.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompareOptions = exports.importsMapCompareOptions = void 0;
exports.importsMapCompareOptions = {};
/**
 * DTO container with compare documents options.
 */
class CompareOptions {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return CompareOptions.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
    }
}
exports.CompareOptions = CompareOptions;
/**
 * Attribute type map
 */
CompareOptions.attributeTypeMap = [
    {
        name: "acceptAllRevisionsBeforeComparison",
        baseName: "AcceptAllRevisionsBeforeComparison",
        type: "boolean",
    },
    {
        name: "ignoreCaseChanges",
        baseName: "IgnoreCaseChanges",
        type: "boolean",
    },
    {
        name: "ignoreComments",
        baseName: "IgnoreComments",
        type: "boolean",
    },
    {
        name: "ignoreFields",
        baseName: "IgnoreFields",
        type: "boolean",
    },
    {
        name: "ignoreFootnotes",
        baseName: "IgnoreFootnotes",
        type: "boolean",
    },
    {
        name: "ignoreFormatting",
        baseName: "IgnoreFormatting",
        type: "boolean",
    },
    {
        name: "ignoreHeadersAndFooters",
        baseName: "IgnoreHeadersAndFooters",
        type: "boolean",
    },
    {
        name: "ignoreTables",
        baseName: "IgnoreTables",
        type: "boolean",
    },
    {
        name: "ignoreTextboxes",
        baseName: "IgnoreTextboxes",
        type: "boolean",
    },
    {
        name: "target",
        baseName: "Target",
        type: "CompareOptions.TargetEnum",
    }
];
/**
 * Enums for CompareOptions
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (CompareOptions) {
    let TargetEnum;
    (function (TargetEnum) {
        TargetEnum[TargetEnum["Current"] = 'Current'] = "Current";
        TargetEnum[TargetEnum["New"] = 'New'] = "New";
    })(TargetEnum = CompareOptions.TargetEnum || (CompareOptions.TargetEnum = {}));
})(CompareOptions = exports.CompareOptions || (exports.CompareOptions = {}));
// tslint:enable:quotemark
