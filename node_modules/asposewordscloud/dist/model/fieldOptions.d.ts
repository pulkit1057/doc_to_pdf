import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
import { UserInformation } from './userInformation';
export declare const importsMapFieldOptions: {
    UserInformation: typeof UserInformation;
};
/**
 * DTO for field options.
 */
export declare class FieldOptions implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets Curren tUser.
     */
    currentUser: UserInformation;
    /**
     * Gets or sets Custom Toc Style Separator.
     */
    customTocStyleSeparator: string;
    /**
     * Gets or sets Default Document Author.
     */
    defaultDocumentAuthor: string;
    /**
     * Gets or sets Field Index Format.
     */
    fieldIndexFormat: FieldOptions.FieldIndexFormatEnum;
    /**
     * Gets or sets Field Update Culture Name.
     * It is used for all fields if FieldUpdateCultureSource is FieldCode.
     */
    fieldUpdateCultureName: string;
    /**
     * Gets or sets Field Update Culture Source.
     */
    fieldUpdateCultureSource: FieldOptions.FieldUpdateCultureSourceEnum;
    /**
     * Gets or sets File Name.
     */
    fileName: string;
    /**
     * Gets or sets if Bidi Text Supported OnUpdate.
     */
    isBidiTextSupportedOnUpdate: boolean;
    /**
     * Gets or sets if Legacy Number Format.
     */
    legacyNumberFormat: boolean;
    /**
     * Gets or sets PreProcess Culture Name.
     * It is a culture code for DOC fields.
     */
    preProcessCultureName: string;
    /**
     * Gets or sets Template Name.
     */
    templateName: string;
    /**
     * Gets or sets if Use Invariant Culture Number Format.
     */
    useInvariantCultureNumberFormat: boolean;
    /**
     * Gets or sets BuiltIn Templates Paths.
     */
    builtInTemplatesPaths: Array<string>;
    constructor(init?: Partial<FieldOptions>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for FieldOptions
 */
export declare namespace FieldOptions {
    enum FieldIndexFormatEnum {
        Template,
        Classic,
        Fancy,
        Modern,
        Bulleted,
        Formal,
        Simple
    }
    enum FieldUpdateCultureSourceEnum {
        CurrentThread,
        FieldCode
    }
}
