import { AttributeInfo } from '../internal/attributeInfo';
import { ModelInterface } from './modelInterface';
import { Position } from './position';
export declare const importsMapFootnoteBase: {
    Position: typeof Position;
};
/**
 * Footnote base class.
 */
export declare abstract class FootnoteBase implements ModelInterface {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets the link to range start node.
     */
    position: Position;
    /**
     * Gets or sets the option, that specifies whether this is a footnote or endnote.
     */
    footnoteType: FootnoteBase.FootnoteTypeEnum;
    /**
     * Gets or sets the custom reference mark to be used for this footnote.
     * Default value is Empty, meaning auto-numbered footnotes are used.
     * RTF-format can only store 1 symbol as custom reference mark, so upon export only the first symbol will be written others will be discard.
     */
    referenceMark: string;
    /**
     * Gets or sets text of the footnote.
     * This method allows to quickly set text of a footnote from a string. The string can contain paragraph breaks, this will create paragraphs of text in the footnote accordingly.
     */
    text: string;
    constructor(init?: Partial<FootnoteBase>);
    collectFilesContent(_resultFilesContent: Array<any>): void;
    validate(): void;
}
/**
 * Enums for FootnoteBase
 */
export declare namespace FootnoteBase {
    enum FootnoteTypeEnum {
        Footnote,
        Endnote
    }
}
