"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="structuredDocumentTagBase.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructuredDocumentTagBase = exports.importsMapStructuredDocumentTagBase = void 0;
const nodeLink_1 = require("./nodeLink");
const structuredDocumentTagListItem_1 = require("./structuredDocumentTagListItem");
const xmlColor_1 = require("./xmlColor");
exports.importsMapStructuredDocumentTagBase = {
    NodeLink: nodeLink_1.NodeLink,
    StructuredDocumentTagListItem: structuredDocumentTagListItem_1.StructuredDocumentTagListItem,
    XmlColor: xmlColor_1.XmlColor,
};
/**
 * DTO container with a StructuredDocumentTagBaseDto.
 */
class StructuredDocumentTagBase extends nodeLink_1.NodeLink {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(StructuredDocumentTagBase.attributeTypeMap);
    }
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        super.validate();
        if (this.listItems !== null && this.listItems !== undefined) {
            for (let elementListItems of this.listItems) {
                elementListItems === null || elementListItems === void 0 ? void 0 : elementListItems.validate();
            }
        }
        (_a = this.color) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.StructuredDocumentTagBase = StructuredDocumentTagBase;
/**
 * Attribute type map
 */
StructuredDocumentTagBase.attributeTypeMap = [
    {
        name: "listItems",
        baseName: "ListItems",
        type: "Array<StructuredDocumentTagListItem>",
    },
    {
        name: "checked",
        baseName: "Checked",
        type: "boolean",
    },
    {
        name: "appearance",
        baseName: "Appearance",
        type: "StructuredDocumentTagBase.AppearanceEnum",
    },
    {
        name: "dateDisplayLocale",
        baseName: "DateDisplayLocale",
        type: "number",
    },
    {
        name: "dateDisplayFormat",
        baseName: "DateDisplayFormat",
        type: "string",
    },
    {
        name: "fullDate",
        baseName: "FullDate",
        type: "Date",
    },
    {
        name: "title",
        baseName: "Title",
        type: "string",
    },
    {
        name: "dateStorageFormat",
        baseName: "DateStorageFormat",
        type: "StructuredDocumentTagBase.DateStorageFormatEnum",
    },
    {
        name: "buildingBlockGallery",
        baseName: "BuildingBlockGallery",
        type: "string",
    },
    {
        name: "buildingBlockCategory",
        baseName: "BuildingBlockCategory",
        type: "string",
    },
    {
        name: "multiline",
        baseName: "Multiline",
        type: "boolean",
    },
    {
        name: "color",
        baseName: "Color",
        type: "XmlColor",
    },
    {
        name: "styleName",
        baseName: "StyleName",
        type: "string",
    },
    {
        name: "calendarType",
        baseName: "CalendarType",
        type: "StructuredDocumentTagBase.CalendarTypeEnum",
    },
    {
        name: "isTemporary",
        baseName: "IsTemporary",
        type: "boolean",
    },
    {
        name: "placeholderName",
        baseName: "PlaceholderName",
        type: "string",
    },
    {
        name: "lockContentControl",
        baseName: "LockContentControl",
        type: "boolean",
    },
    {
        name: "lockContents",
        baseName: "LockContents",
        type: "boolean",
    },
    {
        name: "isShowingPlaceholderText",
        baseName: "IsShowingPlaceholderText",
        type: "boolean",
    },
    {
        name: "tag",
        baseName: "Tag",
        type: "string",
    },
    {
        name: "id",
        baseName: "Id",
        type: "number",
    },
    {
        name: "wordOpenXML",
        baseName: "WordOpenXML",
        type: "string",
    }
];
/**
 * Enums for StructuredDocumentTagBase
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (StructuredDocumentTagBase) {
    let AppearanceEnum;
    (function (AppearanceEnum) {
        AppearanceEnum[AppearanceEnum["BoundingBox"] = 'BoundingBox'] = "BoundingBox";
        AppearanceEnum[AppearanceEnum["Default"] = 'Default'] = "Default";
        AppearanceEnum[AppearanceEnum["Tags"] = 'Tags'] = "Tags";
        AppearanceEnum[AppearanceEnum["Hidden"] = 'Hidden'] = "Hidden";
    })(AppearanceEnum = StructuredDocumentTagBase.AppearanceEnum || (StructuredDocumentTagBase.AppearanceEnum = {}));
    let DateStorageFormatEnum;
    (function (DateStorageFormatEnum) {
        DateStorageFormatEnum[DateStorageFormatEnum["Date"] = 'Date'] = "Date";
        DateStorageFormatEnum[DateStorageFormatEnum["DateTime"] = 'DateTime'] = "DateTime";
        DateStorageFormatEnum[DateStorageFormatEnum["Default"] = 'Default'] = "Default";
        DateStorageFormatEnum[DateStorageFormatEnum["Text"] = 'Text'] = "Text";
    })(DateStorageFormatEnum = StructuredDocumentTagBase.DateStorageFormatEnum || (StructuredDocumentTagBase.DateStorageFormatEnum = {}));
    let CalendarTypeEnum;
    (function (CalendarTypeEnum) {
        CalendarTypeEnum[CalendarTypeEnum["Default"] = 'Default'] = "Default";
        CalendarTypeEnum[CalendarTypeEnum["Gregorian"] = 'Gregorian'] = "Gregorian";
        CalendarTypeEnum[CalendarTypeEnum["GregorianArabic"] = 'GregorianArabic'] = "GregorianArabic";
        CalendarTypeEnum[CalendarTypeEnum["GregorianMeFrench"] = 'GregorianMeFrench'] = "GregorianMeFrench";
        CalendarTypeEnum[CalendarTypeEnum["GregorianUs"] = 'GregorianUs'] = "GregorianUs";
        CalendarTypeEnum[CalendarTypeEnum["GregorianXlitEnglish"] = 'GregorianXlitEnglish'] = "GregorianXlitEnglish";
        CalendarTypeEnum[CalendarTypeEnum["GregorianXlitFrench"] = 'GregorianXlitFrench'] = "GregorianXlitFrench";
        CalendarTypeEnum[CalendarTypeEnum["Hebrew"] = 'Hebrew'] = "Hebrew";
        CalendarTypeEnum[CalendarTypeEnum["Hijri"] = 'Hijri'] = "Hijri";
        CalendarTypeEnum[CalendarTypeEnum["Japan"] = 'Japan'] = "Japan";
        CalendarTypeEnum[CalendarTypeEnum["Korea"] = 'Korea'] = "Korea";
        CalendarTypeEnum[CalendarTypeEnum["None"] = 'None'] = "None";
        CalendarTypeEnum[CalendarTypeEnum["Saka"] = 'Saka'] = "Saka";
        CalendarTypeEnum[CalendarTypeEnum["Taiwan"] = 'Taiwan'] = "Taiwan";
        CalendarTypeEnum[CalendarTypeEnum["Thai"] = 'Thai'] = "Thai";
    })(CalendarTypeEnum = StructuredDocumentTagBase.CalendarTypeEnum || (StructuredDocumentTagBase.CalendarTypeEnum = {}));
})(StructuredDocumentTagBase = exports.StructuredDocumentTagBase || (exports.StructuredDocumentTagBase = {}));
// tslint:enable:quotemark
