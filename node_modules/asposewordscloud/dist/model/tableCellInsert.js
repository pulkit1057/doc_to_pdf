"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="tableCellInsert.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableCellInsert = exports.importsMapTableCellInsert = void 0;
const position_1 = require("./position");
exports.importsMapTableCellInsert = {
    Position: position_1.Position,
};
/**
 * DTO container with a table cell.
 */
class TableCellInsert {
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return TableCellInsert.attributeTypeMap;
    }
    constructor(init) {
        Object.assign(this, init);
    }
    collectFilesContent(_resultFilesContent) {
    }
    validate() {
        var _a;
        (_a = this.existingCellPosition) === null || _a === void 0 ? void 0 : _a.validate();
    }
}
exports.TableCellInsert = TableCellInsert;
/**
 * Attribute type map
 */
TableCellInsert.attributeTypeMap = [
    {
        name: "existingCellPosition",
        baseName: "ExistingCellPosition",
        type: "Position",
    },
    {
        name: "insertAfter",
        baseName: "InsertAfter",
        type: "number",
    }
];
