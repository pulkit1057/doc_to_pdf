"use strict";
/*
 * --------------------------------------------------------------------------------
 * <copyright company="Aspose" file="configuration.ts">
 *   Copyright (c) 2024 Aspose.Words for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const auth_1 = require("../internal/auth");
const defaultBasePath = "https://api.aspose.cloud";
/**
 * Aspose.Words for Cloud API configuration
 */
class Configuration {
    constructor(clientId, clientSecret, baseUrl, debugMode) {
        /**
         * Base Url.
         */
        this.baseUrl = defaultBasePath;
        /**
         * Timeout in seconds. Default value is 100 seconds.
         */
        this.timeout = 100;
        if (baseUrl) {
            this.baseUrl = baseUrl;
        }
        if (!clientId || !clientId.trim()) {
            throw new Error("appSID parameter must be non-empty string");
        }
        if (!clientSecret || !clientSecret.trim()) {
            throw new Error("ClientSecret parameter must be non-empty string");
        }
        this.ClientId = clientId;
        this.ClientSecret = clientSecret;
        this.debugMode = debugMode;
        this.authentication = new auth_1.OAuth();
    }
    /**
     * Returns api base url
     */
    getApiBaseUrl() {
        return this.baseUrl + "/v4.0";
    }
}
exports.Configuration = Configuration;
